{"version":3,"sources":["webpack://hips_webgl_renderer/webpack/runtime/load script","webpack://hips_webgl_renderer/webpack/runtime/wasm chunk loading","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/catalogs/aitoff.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/catalogs/arc.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/catalogs/catalog.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/catalogs/mercator.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/catalogs/mollweide.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/catalogs/ortho.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/catalogs/ortho.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/catalogs/tan.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/colormaps/colormap.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/colormaps/colormap.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/grid/aitoff.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/grid/arc.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/grid/grid.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/grid/grid_cpu.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/grid/grid_cpu.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/grid/mercator.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/grid/mollweide.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/grid/ortho.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/grid/tan.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/hips/rasterizer/aitoff.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/hips/rasterizer/arc.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/hips/rasterizer/color.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/hips/rasterizer/gnomonic.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/hips/rasterizer/grayscale_to_color.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/hips/rasterizer/grayscale_to_colormap.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/hips/rasterizer/mercator.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/hips/rasterizer/mollweide.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/hips/rasterizer/ortho.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/hips/raytracer/color.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/hips/raytracer/grayscale_to_color.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/hips/raytracer/grayscale_to_colormap.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl1/hips/raytracer/raytracer.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/catalogs/aitoff.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/catalogs/arc.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/catalogs/catalog.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/catalogs/mercator.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/catalogs/mollweide.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/catalogs/ortho.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/catalogs/ortho.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/catalogs/tan.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/colormaps/colormap.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/colormaps/colormap.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/grid/aitoff.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/grid/arc.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/grid/grid.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/grid/grid_cpu.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/grid/grid_cpu.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/grid/mercator.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/grid/mollweide.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/grid/ortho.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/grid/tan.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/rasterizer/aitoff.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/rasterizer/arc.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/rasterizer/color.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/rasterizer/gnomonic.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/rasterizer/grayscale_to_color.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/rasterizer/grayscale_to_color_i.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/rasterizer/grayscale_to_color_u.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/rasterizer/grayscale_to_colormap.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/rasterizer/grayscale_to_colormap_i.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/rasterizer/grayscale_to_colormap_u.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/rasterizer/mercator.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/rasterizer/mollweide.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/rasterizer/ortho.vert","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/raytracer/color.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/raytracer/grayscale_to_color.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/raytracer/grayscale_to_color_i.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/raytracer/grayscale_to_color_u.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/raytracer/grayscale_to_colormap.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/raytracer/grayscale_to_colormap_i.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/raytracer/grayscale_to_colormap_u.frag","webpack://hips_webgl_renderer/./src/core/src/shaders/webgl2/hips/raytracer/raytracer.vert","webpack://hips_webgl_renderer/./src/js/Popup.js","webpack://hips_webgl_renderer/./src/js/HealpixGrid.js","webpack://hips_webgl_renderer/./src/js/libs/astro/astroMath.js","webpack://hips_webgl_renderer/./src/js/libs/astro/projection.js","webpack://hips_webgl_renderer/./src/js/ProjectionEnum.js","webpack://hips_webgl_renderer/./src/js/libs/astro/coo.js","webpack://hips_webgl_renderer/./src/js/CooFrameEnum.js","webpack://hips_webgl_renderer/./src/js/AladinUtils.js","webpack://hips_webgl_renderer/./src/js/libs/healpix.js","webpack://hips_webgl_renderer/./src/js/HealpixCache.js","webpack://hips_webgl_renderer/./src/js/Tile.js","webpack://hips_webgl_renderer/./src/js/TileBuffer.js","webpack://hips_webgl_renderer/./src/js/Downloader.js","webpack://hips_webgl_renderer/./src/js/libs/Stats.js","webpack://hips_webgl_renderer/./src/js/ColorMap.js","webpack://hips_webgl_renderer/./src/js/Footprint.js","webpack://hips_webgl_renderer/./src/js/Circle.js","webpack://hips_webgl_renderer/./src/js/CooConversion.js","webpack://hips_webgl_renderer/./src/js/libs/RequestAnimationFrame.js","webpack://hips_webgl_renderer/./src/js/ShadersWebGL1.js","webpack://hips_webgl_renderer/./src/js/ShadersWebGL2.js","webpack://hips_webgl_renderer/./src/core/img/kernel.png","webpack://hips_webgl_renderer/./src/core/img/colormaps/colormaps.png","webpack://hips_webgl_renderer/./src/js/ImageSurveyLayer.js","webpack://hips_webgl_renderer/./src/js/View.js","webpack://hips_webgl_renderer/./src/js/libs/fits.js","webpack://hips_webgl_renderer/./src/js/MOC.js","webpack://hips_webgl_renderer/./src/js/Line.js","webpack://hips_webgl_renderer/./src/js/Overlay.js","webpack://hips_webgl_renderer/./src/js/Ellipse.js","webpack://hips_webgl_renderer/./src/js/Polyline.js","webpack://hips_webgl_renderer/./src/js/Logger.js","webpack://hips_webgl_renderer/./src/js/Source.js","webpack://hips_webgl_renderer/./src/js/Color.js","webpack://hips_webgl_renderer/./src/js/Catalog.js","webpack://hips_webgl_renderer/./src/js/ProgressiveCat.js","webpack://hips_webgl_renderer/./src/js/Sesame.js","webpack://hips_webgl_renderer/./src/js/MeasurementTable.js","webpack://hips_webgl_renderer/./src/js/Location.js","webpack://hips_webgl_renderer/./src/js/URLBuilder.js","webpack://hips_webgl_renderer/./src/js/DiscoveryTree.js","webpack://hips_webgl_renderer/./src/js/Aladin.js","webpack://hips_webgl_renderer/./src/js/HiPSDefinition.js","webpack://hips_webgl_renderer/./src/js/HpxImageSurvey.js","webpack://hips_webgl_renderer/./src/js/SimbadPointer.js","webpack://hips_webgl_renderer/./src/js/Utils.js","webpack://hips_webgl_renderer/webpack/bootstrap","webpack://hips_webgl_renderer/webpack/runtime/compat get default export","webpack://hips_webgl_renderer/webpack/runtime/define property getters","webpack://hips_webgl_renderer/webpack/runtime/ensure chunk","webpack://hips_webgl_renderer/webpack/runtime/get javascript chunk filename","webpack://hips_webgl_renderer/webpack/runtime/global","webpack://hips_webgl_renderer/webpack/runtime/harmony module decorator","webpack://hips_webgl_renderer/webpack/runtime/hasOwnProperty shorthand","webpack://hips_webgl_renderer/webpack/runtime/make namespace object","webpack://hips_webgl_renderer/webpack/runtime/publicPath","webpack://hips_webgl_renderer/webpack/runtime/jsonp chunk loading","webpack://hips_webgl_renderer/webpack/startup"],"names":["inProgress","dataWebpackPrefix","wasmImportedFuncCache0","wasmImportedFuncCache1","wasmImportedFuncCache2","wasmImportedFuncCache3","wasmImportedFuncCache4","wasmImportedFuncCache5","wasmImportedFuncCache6","wasmImportedFuncCache7","wasmImportedFuncCache8","wasmImportedFuncCache9","wasmImportedFuncCache10","wasmImportedFuncCache11","wasmImportedFuncCache12","wasmImportedFuncCache13","wasmImportedFuncCache14","wasmImportedFuncCache15","wasmImportedFuncCache16","wasmImportedFuncCache17","wasmImportedFuncCache18","wasmImportedFuncCache19","wasmImportedFuncCache20","wasmImportedFuncCache21","wasmImportedFuncCache22","wasmImportedFuncCache23","wasmImportedFuncCache24","wasmImportedFuncCache25","wasmImportedFuncCache26","wasmImportedFuncCache27","wasmImportedFuncCache28","wasmImportedFuncCache29","wasmImportedFuncCache30","wasmImportedFuncCache31","wasmImportedFuncCache32","wasmImportedFuncCache33","wasmImportedFuncCache34","wasmImportedFuncCache35","wasmImportedFuncCache36","wasmImportedFuncCache37","wasmImportedFuncCache38","wasmImportedFuncCache39","wasmImportedFuncCache40","wasmImportedFuncCache41","wasmImportedFuncCache42","wasmImportedFuncCache43","wasmImportedFuncCache44","wasmImportedFuncCache45","wasmImportedFuncCache46","wasmImportedFuncCache47","wasmImportedFuncCache48","wasmImportedFuncCache49","wasmImportedFuncCache50","wasmImportedFuncCache51","wasmImportedFuncCache52","wasmImportedFuncCache53","wasmImportedFuncCache54","wasmImportedFuncCache55","wasmImportedFuncCache56","wasmImportedFuncCache57","wasmImportedFuncCache58","wasmImportedFuncCache59","wasmImportedFuncCache60","wasmImportedFuncCache61","wasmImportedFuncCache62","wasmImportedFuncCache63","wasmImportedFuncCache64","wasmImportedFuncCache65","wasmImportedFuncCache66","wasmImportedFuncCache67","wasmImportedFuncCache68","wasmImportedFuncCache69","wasmImportedFuncCache70","wasmImportedFuncCache71","wasmImportedFuncCache72","wasmImportedFuncCache73","wasmImportedFuncCache74","wasmImportedFuncCache75","wasmImportedFuncCache76","wasmImportedFuncCache77","wasmImportedFuncCache78","wasmImportedFuncCache79","wasmImportedFuncCache80","wasmImportedFuncCache81","wasmImportedFuncCache82","wasmImportedFuncCache83","wasmImportedFuncCache84","wasmImportedFuncCache85","wasmImportedFuncCache86","wasmImportedFuncCache87","wasmImportedFuncCache88","wasmImportedFuncCache89","wasmImportedFuncCache90","wasmImportedFuncCache91","wasmImportedFuncCache92","wasmImportedFuncCache93","wasmImportedFuncCache94","wasmImportedFuncCache95","wasmImportedFuncCache96","wasmImportedFuncCache97","wasmImportedFuncCache98","wasmImportedFuncCache99","wasmImportedFuncCache100","wasmImportedFuncCache101","wasmImportedFuncCache102","wasmImportedFuncCache103","wasmImportedFuncCache104","wasmImportedFuncCache105","wasmImportedFuncCache106","wasmImportedFuncCache107","wasmImportedFuncCache108","wasmImportedFuncCache109","wasmImportedFuncCache110","wasmImportedFuncCache111","wasmImportedFuncCache112","wasmImportedFuncCache113","wasmImportedFuncCache114","wasmImportedFuncCache115","wasmImportedFuncCache116","wasmImportedFuncCache117","wasmImportedFuncCache118","wasmImportedFuncCache119","wasmImportedFuncCache120","wasmImportedFuncCache121","wasmImportedFuncCache122","wasmImportedFuncCache123","wasmImportedFuncCache124","wasmImportedFuncCache125","wasmImportedFuncCache126","wasmImportedFuncCache127","wasmImportedFuncCache128","wasmImportedFuncCache129","wasmImportedFuncCache130","wasmImportedFuncCache131","wasmImportedFuncCache132","wasmImportedFuncCache133","wasmImportedFuncCache134","wasmImportedFuncCache135","wasmImportedFuncCache136","wasmImportedFuncCache137","wasmImportedFuncCache138","wasmImportedFuncCache139","wasmImportedFuncCache140","wasmImportedFuncCache141","wasmImportedFuncCache142","wasmImportedFuncCache143","wasmImportedFuncCache144","wasmImportedFuncCache145","wasmImportedFuncCache146","wasmImportedFuncCache147","wasmImportedFuncCache148","wasmImportedFuncCache149","wasmImportedFuncCache150","wasmImportedFuncCache151","wasmImportedFuncCache152","wasmImportedFuncCache153","wasmImportedFuncCache154","wasmImportedFuncCache155","wasmImportedFuncCache156","wasmImportedFuncCache157","wasmImportedFuncCache158","wasmImportedFuncCache159","wasmImportedFuncCache160","wasmImportedFuncCache161","wasmImportedFuncCache162","wasmImportedFuncCache163","wasmImportedFuncCache164","wasmImportedFuncCache165","wasmImportedFuncCache166","wasmImportedFuncCache167","wasmImportedFuncCache168","wasmImportedFuncCache169","wasmImportedFuncCache170","wasmImportedFuncCache171","wasmImportedFuncCache172","wasmImportedFuncCache173","wasmImportedFuncCache174","wasmImportedFuncCache175","wasmImportedFuncCache176","wasmImportedFuncCache177","wasmImportedFuncCache178","wasmImportedFuncCache179","wasmImportedFuncCache180","wasmImportedFuncCache181","wasmImportedFuncCache182","wasmImportedFuncCache183","wasmImportedFuncCache184","wasmImportedFuncCache185","wasmImportedFuncCache186","wasmImportedFuncCache187","wasmImportedFuncCache188","wasmImportedFuncCache189","wasmImportedFuncCache190","wasmImportedFuncCache191","wasmImportedFuncCache192","wasmImportedFuncCache193","wasmImportedFuncCache194","wasmImportedFuncCache195","wasmImportedFuncCache196","wasmImportedFuncCache197","wasmImportedFuncCache198","wasmImportedFuncCache199","wasmImportedFuncCache200","wasmImportedFuncCache201","wasmImportedFuncCache202","wasmImportedFuncCache203","wasmImportedFuncCache204","wasmImportedFuncCache205","wasmImportedFuncCache206","wasmImportedFuncCache207","wasmImportedFuncCache208","wasmImportedFuncCache209","wasmImportedFuncCache210","wasmImportedFuncCache211","wasmImportedFuncCache212","wasmImportedFuncCache213","wasmImportedFuncCache214","wasmImportedFuncCache215","wasmImportedFuncCache216","wasmImportedFuncCache217","wasmImportedFuncCache218","wasmImportedFuncCache219","wasmImportedFuncCache220","wasmImportedFuncCache221","wasmImportedFuncCache222","installedWasmModules","wasmImportObjects","wasmModuleMap","module","exports","Popup","parentDiv","view","this","domEl","$","appendTo","self","find","click","hide","prototype","mustClearCatalog","catalogForPopup","show","setTitle","title","html","setText","text","w","outerWidth","h","outerHeight","setSource","source","popup","setPosition","x","y","newX","newY","catalog","sourceSize","style","left","top","HealpixGrid","redraw","ctx","cornersXYViewMap","fov","norder","cornersXYView","ipix","lineWidth","strokeStyle","beginPath","k","len","length","moveTo","vx","vy","lineTo","stroke","strokeText","AstroMath","D2R","Math","PI","R2D","sign","cosd","abs","floor","cos","sind","sin","tand","resid","tan","asind","asin","acosd","acos","atand","atan","atan2","sgny","phi","atan2d","cosh","exp","sinh","tanh","acosh","log","sqrt","asinh","atanh","sinc","ax","asinc","hypot","eulerMatrix","z","theta","zeta","R","Array","cosdZ","sindZ","cosdTheta","cosdZeta","sindZeta","displayMatrix","m","nbrows","nbcols","i","str","j","toString","Projection","lon0","lat0","PROJECTION","PROJ_TAN","ROT","tr_oR","longitudeIsReversed","PROJ_TAN2","PROJ_STG","PROJ_SIN","PROJ_SIN2","PROJ_ZEA","PROJ_ARC","PROJ_SCHMIDT","PROJ_AITOFF","PROJ_AIT","PROJ_GLS","PROJ_MERCATOR","PROJ_MER","PROJ_LAM","PROJ_LAMBERT","PROJ_TSC","PROJ_QSC","PROJ_MOLLWEIDE","PROJ_LIST","PROJ_NAME","setCenter","reverseLongitude","b","setProjection","p","project","alpha","delta","u1","tr_ou","u2","tr_uu","P","tr_up","X","Y","unproject","tr_pu","tr_uu1","o","tr_uo","ra","dec","proj","u","r","den","pp","s","lon","lat","cosdec","r2","ProjectionEnum","SIN","AITOFF","MERCATOR","ARC","TAN","MOL","longitude","latitude","prec","frame","computeDirCos","Tokenizer","sep","string","Strings","trim","pos","Numbers","factor","setFrame","astroframe","coslat","computeLonLat","dist2","distance","convertTo","new_frame","equals","toICRS","coo","fromICRS","rotate","Z","Umatrix3","rotate_1","parse","indexOf","strlon","substring","strlat","parseLon","parseLat","replace","parseFloat","stok","l","pr","hasMore","tok","nextToken","charAt","format","options","isNaN","hlon","toSexagesimal","p0","p1","c","pow10","rndval","num","round","nbdec","substr","plus","n","n1","n2","n3","n4","CooFrameEnum","SYSTEMS","systems","J2000","GAL","label","system","J2000d","fromString","defaultValue","toLowerCase","AladinUtils","xyToView","width","height","largestDim","zoomFactor","undefined","myRound","viewToXy","radecToViewXy","aladin","webglAPI","worldToScreen","a","isInsideViewXy","isHpxPixVisible","pixCorners","viewWidth","viewHeight","ipixToIpix","npixIn","norderIn","norderOut","counterClockwiseTriangle","x1","y1","x2","y2","x3","y3","grow2","val","b1","push","d","g","angle","chouilla","SVG_ICONS","CATALOG","MOC","OVERLAY","Constants","C_PR","VLEV","EPS","LN10","PIOVER2","TWOPI","TWOTHIRD","ARCSECOND_RADIAN","Utils","radecToPolar","polarToRadec","castToInt","nb","ceil","LongRangeSetBuilder","items","appendRange","lo","hi","HealpixIndex","nside","NS_MAX","ORDER_MAX","NSIDELIST","JRLL","JPLL","XOFFSET","YOFFSET","FACEARRAY","SWAPARRAY","Z0","init","ctab","utab","nl2","nl3","nl4","npface","ncap","npix","fact2","fact1","order","nside2order","calculateNSide","pixsize","res","pixelArea","degrad","skyArea","nsidesq","nside_req","mindiff","indmin","console","log2","ang2pix_nest","za","tt","tp","ifp","ifm","ntt","face_num","ix","iy","name","message","jp","temp1","temp2","jm","tmp","min","xyf2nest","nest2xyf","ret","pix","raw","pix2ang_nest","nr","kshift","jr","nside2Npix","xyf2ring","n_before","nest2ring","ipnest","xyf","corners_nest","step","pixr","corners_ring","pix2ang_ring","iring","iphi","ip","ipix1","fodd","hip","fihip","pow","ring","integration_limits_in_costh","i_th","ab","r_n_side","pixel_boundaries","i_phi","i_zone","cos_theta","jd","ju","ku","kd","phi_l","phi_r","max","cth34","cth34_1","modfactor","ns2","vector","SpatialVector","nPoints","points","ringno","i_phi_count","phifac","spoint","nms","ntheta","stheta","philr","mtheta","cosThetaStep","vec2Ang","v","queryDisc","radius","do_nest","do_inclusive","irmin","irmax","iz","ang","z0","cosang","ysq","dth1","dth2","dphi","rlat1","rlat2","zmin","zmax","xa","radius_eff","ringAbove","inRing","items_nest","nestIdx","ring2nest","phi0","conservative","shift","ipix2","take_all","to_top","epsilon","ir","ip_low","ip_hi","phi_low","phi_hi","phi_hi_mod","az","ipring","ring2xyf","ire","irm","irt","ipt","utils","ra_","dec_","okRaDec_","setXYZ","lengthSquared","normalized","set","updateXYZ","v1","xx","yy","zz","cross","dot","get","equal","mult","add","sub","updateRaDec","cd","toRaRadians","toDeRadians","z2","HealpixCache","corners","nside8","hpxIdx","staticCache","hpxIdxCache","lastNside","Tile","img","url","isImageOk","allSkyTexture","src","complete","naturalWidth","TileBuffer","pointer","tilesMap","tilesArray","Image","addTile","getTile","curTile","Downloader","nbDownloads","dlQueue","urlsInQueue","emptyQueue","requestDownload","cors","tryDownload","startDownloadNext","next","downloaderRef","onload","completeDownload","onerror","e","crossOrigin","success","requestRedraw","dlError","Stats","f","bg","fg","B","q","E","t","Date","getTime","F","A","C","D","fps","ms","mb","document","createElement","cursor","opacity","zIndex","addEventListener","display","backgroundColor","padding","appendChild","fontFamily","textAlign","fontSize","color","margin","innerHTML","marginLeft","getContext","fillStyle","fillRect","getImageData","performance","memory","totalJSHeapSize","G","domElement","update","data","putImageData","usedJSHeapSize","ColorMap","reversed","mapName","sig","signature","MAPS","MAPS_NAMES","concat","MAPS_CUSTOM","reverse","apply","cmSig","cmImg","canvas","drawImage","imageData","pixelData","switchCase","Footprint","polygons","overlay","id","isShowing","isSelected","setOverlay","reportChange","dispatchClickEvent","aladinDiv","dispatchEvent","CustomEvent","detail","footprintId","overlayName","select","deselect","Circle","centerRaDec","radiusDegrees","setRadius","draw","projection","noStroke","centerXyview","circlePtXyView","dx","dy","radiusInPix","baseColor","Overlay","increaseBrightness","arc","CooConversion","radec","matrix","r0","s0","result","cosaa","sinaa","Transform","GALACTIC_TO_J2000","J2000_TO_GALACTIC","requestAnimFrame","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","shaders","content","loadShadersWebGL1","ImageSurveyLayer","surveys","Map","addImageSurvey","async","rootUrlOrId","survey","HpxImageSurvey","removeImageSurvey","remove","clear","getSurveys","values","View","location","fovDiv","cooFrame","zoom","createCanvases","webGL2Supported","resources","kernel","colormaps","Aladin","wasmLibs","webgl","WebClient","alert","mustRedrawReticle","imageSurveysToSet","mode","PAN","minFOV","maxFOV","fov_limit","healpixGrid","imageCanvas","projectionMethod","prev","getClipZoomFactor","viewCenter","GALCooSys","setCooSystem","ICRSJ2000","ICRSJ2000CooSys","setZoom","imageSurveys","catalogs","shape","setView","overlays","mocs","allOverlayLayers","tileBuffer","fixLayoutDimensions","firstHiPS","curNorder","realNorder","curOverlayNorder","dragging","dragx","dragy","needRedraw","pinchZoomParameters","isPinching","initialFov","initialDistance","fingersRotationParameters","initialViewAngleFromCenter","initialFingerAngle","rotationInitiated","downloader","flagForceRedraw","fadingLatestUpdate","dateRequestRedraw","showGrid","resizeTimer","resize","clearTimeout","setTimeout","computedWidth","computedHeight","updateZoomState","SELECT","TOOL_SIMBAD_POINTER","DRAW_SOURCES_WHILE_DRAGGING","DRAW_MOCS_WHILE_DRAGGING","CALLBACKS_THROTTLE_TIME_MS","gridCanvas","catalogCanvas","reticleCanvas","cx","cy","smallestDim","ratio","mouseMoveIncrement","imageCtx","catalogCtx","reticleCtx","gridCtx","pixelateCanvasContext","pixelateCanvas","logoDiv","removeClass","addClass","css","computeNorder","pixelateFlag","enableSmoothing","imageSmoothingEnabled","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","msImageSmoothingEnabled","oImageSmoothingEnabled","setMode","setCursor","getCanvasDataURL","imgType","toDataURL","createListeners","hasTouchEvents","lastHoveredObject","dblclick","xymouse","relMouseCoords","posOnUi","lonlat","screenToWorld","err","pointTo","forceAnimation","bind","type","originalEvent","targetTouches","getFieldOfView","clientX","clientY","getRotationAroundCenter","selectStartCoo","pressLeftMouseButton","wasDragging","realDragging","selectionHasEnded","posChangedFn","callbacksByEventName","pix2world","fire","getObjectsInBBox","updateLocation","SimbadPointer","objs","closestObjects","marker","popupTitle","popupDesc","lastClickedObject","actionOtherObjectClicked","actionClicked","objClickedFunction","measurementTable","onClickFunction","isDragging","refreshProgressiveCats","releaseLeftButtonMouse","lastMouseMovePos","preventDefault","s1","s2","touches","currentFingerAngle","fingerAngleDiff","setRotationAroundCenter","dist","onMouseMoveFunction","objHoveredFunction","closest","goFromTo","getCenter","onselectstart","on","event","stopPropagation","deltaY","hasOwnProperty","registerWheelEvent","debounceProgCatOnZoom","stats","executeCallbacksThrottled","old_fov","fovChangedFn","displayHpxGrid","displaySurvey","displayCatalog","displayReticle","isViewCenterPosition","cooSystem","J20002Gal","requestRedrawAtDate","date","dateRequestDraw","getBackgroundColor","black","imageSurvey","cm","getColorMap","idx","getViewParams","resolution","setGridColor","fovStr","saveNeedRedraw","now","dt","ready","isReady","setImageSurveys","warn","error","isCatalogLoaded","callbackFn","render","cornersXYViewMapHighres","overlayImageSurvey","cornersXYViewMapAllsky","getVisibleCells","clearRect","catalogCanvasCleared","sources","overlayCtx","mocCtx","reticleCache","reticleSize","reticleColor","updateObjectsLookup","forceRedraw","loadNeededTiles","getVisiblePixList","frameSurvey","pixList","spatialVector","pos_world","polar","ipixCenter","unshift","setAngleRotation","cells","cornersXY","spVec","GalacticToJ2000","J2000ToGalactic","ipixIdx","getPositionsInView","xy","fovDegrees","setFieldOfView","increaseZoom","decreaseZoom","setShowGrid","enableGrid","disableGrid","minOrder","overlayNorder","maxOrder","untaintCanvases","setOverlayImageSurvey","idOrUrl","overlaySurvey","setOverlayHiPS","setUnknownSurveyIfNeeded","unknownSurveyId","setImageSurvey","layer","properties","setHiPS","setImageSurveysLayer","forEach","removeImageSurveysLayer","delete","moveImageSurveysLayerForward","changeProjection","projectionName","changeFrame","oldCooFrame","lb","showHealpixGrid","showSurvey","showCatalog","showReticle","moveToLocation","makeUniqLayerName","layerNameExists","newName","removeLayers","addCatalog","addOverlay","addMOC","moc","cat","objList","getSources","xRounded","yRounded","objLookup","maxRadius","footprint","pointXY","isPointInStroke","overlay_items","astro","Base","BinaryTable","CompressedImage","DataUnit","Decompress","FITS","HDU","Header","HeaderVerify","ImageUtils","Parser","Table","Tabular","__hasProp","__extends","child","parent","key","call","ctor","constructor","__super__","__slice","slice","include","obj","value","extend","proxy","func","_this","arguments","invoke","callback","opts","context","_super","arg","xhr","hdus","blockCount","begin","end","BLOCKLENGTH","offset","headerStorage","Uint8Array","readNextBlock","_readBlockFromBuffer","XMLHttpRequest","open","responseType","status","response","byteLength","readFromBuffer","send","size","_readBlockFromFile","readFromFile","LINEWIDTH","File","webkitSlice","Blob","block","readBlock","reader","FileReader","onloadend","target","readAsArrayBuffer","arr","dataLength","dataunit","header","rowIndex","rows","_i","_len","_ref","String","fromCharCode","start","getDataLength","hasDataUnit","createDataUnit","excessBytes","blob","getDataType","isEOF","parser","fits","getHDU","index","hdu","hasData","getHeader","getDataUnit","version","ArrayBuffer","buffer","swapEndian","I","J","verifyOrder","keyword","cardIndex","verifyBetween","lower","upper","verifyBoolean","VerifyFns","SIMPLE","primary","XTENSION","extension","extensionType","BITPIX","parseInt","NAXIS","required","isExtension","PCOUNT","GCOUNT","EXTEND","isPrimary","BSCALE","BZERO","BLANK","DATAMIN","DATAMAX","EXTVER","EXTLEVEL","TFIELDS","TBCOL","ZIMAGE","ZCMPTYPE","ZBITPIX","ZNAXIS","ZTILE","ZSIMPLE","ZPCOUNT","ZGCOUNT","ZDITHER0","method","verifyCard","cards","arrayPattern","maxLines","contains","comment","readLine","indicator","split","validate","baseKey","isArray","test","exec","line","nLines","_results","naxis","reduce","getExtent","NaN","getPixel","_j","bitpix","depth","bzero","bscale","bytes","frameOffsets","frameLength","nBuffers","buffers","allocationSize","_getFrame","nPixels","Uint16Array","Int16Array","Int32Array","Float32Array","Uint32Array","_getFrameAsync","URL","blobGetFrame","blobOnMessage","fn1","fn2","mime","msg","pixels","urlGetFrame","urlOnMessage","worker","importScripts","postMessage","webkitURL","createObjectURL","Worker","onmessage","revokeObjectURL","terminate","getFrame","blobFrame","blobs","bytesPerBuffer","frameInfo","getFrames","number","cb","isDataCube","rowByteSize","cols","heapLength","columns","getColumns","rowsInMemory","_rowsInMemoryBuffer","heap","_rowsInMemoryBlob","firstRowInBuffer","lastRowInBuffer","nRowsInBuffer","maxMemory","accessors","descriptors","elementByteLengths","setAccessors","firstRow","lastRow","getColumn","accessor","column","descriptor","elementByteOffset","iterations","rowsPerIteration","typedArray","nRows","startRow","DataView","getTableBuffer","map","getRows","row","blobRows","_getRows","dataAccessors","form","pattern","_ref1","subarray","_k","_len1","_ref2","Float64Array","offsets","L","K","M","getInt8","getUint8","getInt16","getInt32","highByte","mod","getFloat32","getFloat64","val1","toBits","byte","getFromHeap","heapOffset","heapSlice","count","match","nBytes","_ref3","algorithmParameters","ztile","Rice","RiceSetup","bits","array","lastpix","blocksize","bytepix","nx","setup","bbits","diff","fs","fsbits","fsmax","imax","nbits","nonzeroCount","nzero","zcmptype","zbitpix","znaxis","zblank","blank","zdither","zmaskcmp","zquantiz","randomGenerator","random","seed","temp","randomSequence","nTile","rIndex","scale","seed1","zero","nFrame","heapBlob","Color","getNextColor","adaptativeDisplay","proxyCalled","_highResIndexOrder3","_lowResIndexOrder3","nbCellsDeepestLevel","MAX_NORDER","LOWRES_MAXORDER","HIGHRES_MAXORDER","PIVOT_FOV","_removeDuplicatesFromIndexes","aDedup","uniq","_addPix","ipixOrder3","degradedOrder","degradedIpix","degradedIpixOrder3","skyFraction","dataFromJSON","jsonMOC","orderStr","dataFromFITSURL","mocURL","successCallback","hdr0","proxiedURL","JSONP_PROXY","encodeURIComponent","dataURL","hdr1","colName","LN2","viewFrame","mocCells","_drawCells","mocCellsIdxOrder3","surveyFrame","globalAlpha","orderedKeys","sort","xyCorners","norderMax","potentialVisibleHpxCellsOrder3","visibleHpxCellsOrder3","getXYCorners","startIpix","drawCorners","fill","seen","out","item","hpx","nestedVertices","ipixMapByOrder","curOrder","Line","isInsideView","rw","rh","intersectLine","right","bottom","x4","y4","uA","uB","parseSTCS","stcs","footprints","parts","curPolygon","circle","addFootprints","overlaysToAdd","getFootprint","removeAll","xyviews","drawFootprint","drawFootprintSelected","hex","percent","radecArray","pts","projectLine","xyview","xyviewArray","Ellipse","rayonXDegrees","rayonYDegrees","rotationDegrees","setRadiuses","setRotation","rotation","radiusXDegrees","radiusYDegrees","circlePtXyViewRa","circlePtXyViewDec","dxRa","dyRa","radiusInPixX","dxDec","dyDec","radiusInPixY","origin","toNorth","originScreen","toNorthScreen","toNorthVec","norm","toWestVec","westToNorthAngle","ellipse","Polyline","Logger","action","params","paramStr","JSON","stringify","ajax","href","referrer","dataType","Source","useMarkerDefaultIcon","setCatalog","onClick","showMeasurement","colors","curIdx","rgbBkgdColor","darkLabel","rgb","Catalog","markerSize","maxNbSources","limit","raField","decField","indexationNorder","displayLabel","labelColor","labelFont","labelColumn","HTMLCanvasElement","_shapeIsFunction","isFunction","selectionColor","updateShape","cacheMarkerCanvas","cacheMarkerCtx","half","findRADecFields","fields","raFieldIdx","decFieldIdx","field","ID","ucd","createShape","shapeName","parseVOTable","useProxy","done","xml","attributes","$xml","parseXML","prefix","first","prop","getPrefix","each","attribute","attr","raDecFieldIdxes","mesures","keyRa","keyDec","doParseVOTable","selectSize","cacheCanvas","cacheSelectCanvas","addSources","sourcesToAdd","addSourcesAsArray","columnNames","colIdx","dataDict","newSources","rowIdx","selectAll","deselectAll","getSource","splice","save","sourcesInView","drawSource","restore","drawSourceSelection","font","drawSourceLabel","catalogInstance","fillText","ProgressiveCat","rootUrl","frameStr","filterFn","filter","sourcesCache","maxOrderAllsky","getFields","instance","csv","lines","mesureKeys","newSource","readProperties","errorCallback","propertiesURL","propertiesTxt","props","propName","propValue","_loadMetadata","_loadAllskyNewMethod","_loadAllskyOldMethod","tsv","order1Sources","order2Sources","_finishInitWhenReady","_loadLevel2Sources","_loadLevel3Sources","order3Sources","drawSources","tilesInView","keys","getTileURL","dirIdx","ipixList","Sesame","resolve","Target","Resolver","jradeg","jdedeg","Coo","objectName","callbackFunctionSuccess","callbackFunctionError","sesameUrl","SESAME_URL","MeasurementTable","aladinLiteDiv","divEl","append","empty","Location","locationDiv","$div","toggleClass","URLBuilder","object","vizCatId","epoch","queryOptions","requestedOptions","getOptionsFromQueryString","fovValue","DEFAULT_OPTIONS","reduceDeformations","showFrame","showZoomControl","showFullscreenControl","fullScreenBtn","toggleFullscreen","realFullscreen","fullscreenElt","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","fullScreenToggledFn","isInFullscreen","hasClass","boxes","showCooGrid","showLayersControl","layerBox","hideBoxes","showLayerBox","showGotoControl","gotoBox","input","focus","showSimbadPointerControl","showShareControl","shareBox","getShareURL","execCommand","gotoObject","VERSION","catalogUrls","createCatalogFromVOTable","createImageSurvey","change","submit","zoomPlus","zoomMinus","fullScreen","allowFullZoomout","showAllskyRing","allskyRingColor","allskyRingWidth","Boolean","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","updateSurveysDropdownList","isCurSurvey","requestedTarget","urlParam","requestedFrame","requestedSurveyId","requestedZoom","requestedShowreticle","requestedCooFrame","requestedFullscreen","setFoV","setFov","adjustFovForObject","getFovForObject","galdimMajAxis","magV","frameName","newFrame","targetName","callbackOptions","getRaDec","Gal2J2000","gotoPosition","doAnimation","animationParams","gotoRaDec","fraction","curPos","lng1","lat1","lng2","lat2","degToRad","radToDeg","intermediatePoint","curRa","curDec","stopAnimation","zoomAnimationParams","animateToRaDec","duration","raDec","doZoomAnimation","curFov","zoomToFoV","fovArray","getFov","layerName","setOpacityLayer","setBaseImageSurveysLayer","setBaseImageSurvey","createProgressiveCatalog","createOverlay","AVAILABLE_CALLBACKS","what","myFunction","updateCM","projectionElt","layers","checked","tooltipText","iconSvg","nbSources","toFixed","rgbColor","btoa","reticleCb","is","hpxGridCb","equatorialGridCb","isChecked","exportBtn","exportAsPNG","layerByName","imgFormat","write","getViewDataURL","getViewWCS","NAXIS1","NAXIS2","RADECSYS","CRPIX1","CRPIX2","CRVAL1","CRVAL2","CTYPE1","CTYPE2","CD1_1","CD1_2","CD2_1","CD2_2","setFovRange","setFOVRange","world2pix","getFovCorners","nbSteps","fovX","getSize","fovY","getParentDiv","divSelector","raDecArray","radiusDeg","radiusRaDeg","radiusDecDeg","rotationDeg","rootURL","box","Box","$parentDiv","showPopup","hidePopup","getBaseImageLayer","getEmbedCode","displayFITS","outputFormat","nocache","meta","transparency","executeDefaultSuccessAction","displayJPG","displayPNG","setReduceDeformations","footprintsFromSTCS","MOCFromURL","MOCFromJSON","catalogFromURL","catalogFromSimbad","catalogFromNED","catalogFromVizieR","catalogFromSkyBot","hipsDefinitionFromURL","HiPSDefinition","Promise","all","then","hpxAPI","getID","obsTitle","clientSortKey","tileFormats","urls","clientApplications","getServiceURLs","httpsOnly","AL_CACHE_CLASS_LEVEL","listHipsProperties","LOCAL_STORAGE_KEY","LAST_URL_KEY","getLocalStorageDefinitions","defs","localStorage","getItem","storeInLocalStorage","setItem","MOCSERVER_MIRRORS_HTTP","MOCSERVER_MIRRORS_HTTPS","getRemoteDefinitions","successCallbackFn","failureCallbackFn","client_application","onSuccess","onFailure","timeout","merge","baseList","newList","updatedList","newListById","itemToAdd","CACHE_RETENTION_TIME_SECONDS","localDefs","indicesToRemove","def","dataproduct_type","remoteDefs","getALDefaultHiPSDefinitions","getDefinitions","parseHiPSProperties","propertiesStr","propertiesDict","findByID","candidates","findByIDLocal","findByIDRemote","id2search","findHiPSRemote","searchOptions","fromURL","hipsUrl","propertiesUrl","callbackWhenPropertiesLoaded","hipsPropertiesDict","fail","fromProperties","rootURLOrId","isUrl","includes","metadata","fetch","parseSurveyProperties","MOCServerUrl","json","request","ids","hips_order","hipsTileFormat","hips_tile_format","tileFormat","FITSImage","hips_pixel_bitpix","Grayscale2Color","transfer","cuts","hips_pixel_cut","tileSize","hips_tile_width","hipsTileWidth","hips_service_url","startsWith","minCutout","maxCutout","create","idOrRootUrl","MIRRORS","query","aladinInstance","Ident","SR","loadFromMirrors","objCoo","objName","magnitude","isNumber","offsetX","offsetY","cssScale","st","getComputedStyle","body","matches","getPropertyValue","srcElement","currentStyle","borderLeftWidth","borderTopWidth","rect","getBoundingClientRect","changedTouches","Function","TypeError","args","nop","bound","queryString","search","decodeURIComponent","RegExp","isFinite","isInt","debounce","fn","delay","timer","throttle","threshhold","scope","last","deferTimer","LRUCache","maxsize","_keys","_items","_expires","_size","_maxsize","expires","ajaxOptions","getAjaxObject","urlToRequest","isHttpsContext","protocol","getAbsoluteURL","uuidv4","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","getter","__esModule","definition","Object","defineProperty","enumerable","chunkId","promises","globalThis","hmd","children","Error","script","needAttach","scripts","getElementsByTagName","getAttribute","charset","nc","setAttribute","onScriptComplete","doneFns","parentNode","removeChild","head","Symbol","toStringTag","scriptUrl","currentScript","installedChunks","installedChunkData","promise","reject","errorType","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","chunkIds","moreModules","runtime","chunkLoadingGlobal","p0i32","p1i32","p2i32","p3i32","p4i32","p5i32","p6i32","p7i32","p8i32","p9i32","p10i32","p1f32","p2f32","p3f32","p4f32","p5f32","wasm","wasmModuleId","installedWasmModuleData","importObject","req","WebAssembly","compileStreaming","instantiate","instantiateStreaming","arrayBuffer"],"mappingslOAC,GAmOAC,GA24BAC,G,aC/mCJC,EAAOC,QAAU,i/I,SCAjBD,EAAOC,QAAU,u9I,SCAjBD,EAAOC,QAAU,kT,SCAjBD,EAAOC,QAAU,u+I,SCAjBD,EAAOC,QAAU,q9I,SCAjBD,EAAOC,QAAU,4W,SCAjBD,EAAOC,QAAU,g+I,SCAjBD,EAAOC,QAAU,89I,QCAjBD,EAAOC,QAAU,uqB,SCAjBD,EAAOC,QAAU,+M,SCAjBD,EAAOC,QAAU,mgP,SCAjBD,EAAOC,QAAU,m6N,SCAjBD,EAAOC,QAAU,sP,SCAjBD,EAAOC,QAAU,+F,SCAjBD,EAAOC,QAAU,oH,QCAjBD,EAAOC,QAAU,gmN,SCAjBD,EAAOC,QAAU,q/O,SCAjBD,EAAOC,QAAU,imN,SCAjBD,EAAOC,QAAU,u/N,SCAjBD,EAAOC,QAAU,stJ,OCAjBD,EAAOC,QAAU,mtJ,QCAjBD,EAAOC,QAAU,y8H,SCAjBD,EAAOC,QAAU,wtJ,SCAjBD,EAAOC,QAAU,olI,SCAjBD,EAAOC,QAAU,kmI,SCAjBD,EAAOC,QAAU,wtJ,SCAjBD,EAAOC,QAAU,ytJ,SCAjBD,EAAOC,QAAU,4tJ,SCAjBD,EAAOC,QAAU,k1M,SCAjBD,EAAOC,QAAU,o9L,SCAjBD,EAAOC,QAAU,s/L,SCAjBD,EAAOC,QAAU,gS,SCAjBD,EAAOC,QAAU,o9I,OCAjBD,EAAOC,QAAU,47I,SCAjBD,EAAOC,QAAU,iZ,SCAjBD,EAAOC,QAAU,i8I,SCAjBD,EAAOC,QAAU,k8I,SCAjBD,EAAOC,QAAU,sc,SCAjBD,EAAOC,QAAU,u8I,QCAjBD,EAAOC,QAAU,i8I,SCAjBD,EAAOC,QAAU,+pB,SCAjBD,EAAOC,QAAU,0P,SCAjBD,EAAOC,QAAU,8yO,SCAjBD,EAAOC,QAAU,uuN,QCAjBD,EAAOC,QAAU,gR,SCAjBD,EAAOC,QAAU,sM,SCAjBD,EAAOC,QAAU,oJ,SCAjBD,EAAOC,QAAU,o2M,QCAjBD,EAAOC,QAAU,yzO,SCAjBD,EAAOC,QAAU,i6M,SCAjBD,EAAOC,QAAU,izN,SCAjBD,EAAOC,QAAU,kxJ,SCAjBD,EAAOC,QAAU,0zJ,SCAjBD,EAAOC,QAA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,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACtE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IACnE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAC5D8H,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAClE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,IAAI,IAAI,IAClE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GACrE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACrE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACtE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACxErJ,EAAG,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAChC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EACtE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACtE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACtE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACtE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE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AAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IACpE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KACpCrJ,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAChC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GACrE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,G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","file":"aladin.js","sourcesContent":["var inProgress = {};\nvar dataWebpackPrefix = \"hips_webgl_renderer:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// object to store loaded and loading wasm modules\nvar installedWasmModules = {};\n\nfunction promiseResolve() { return Promise.resolve(); }\n\nvar wasmImportedFuncCache0;\nvar wasmImportedFuncCache1;\nvar wasmImportedFuncCache2;\nvar wasmImportedFuncCache3;\nvar wasmImportedFuncCache4;\nvar wasmImportedFuncCache5;\nvar wasmImportedFuncCache6;\nvar wasmImportedFuncCache7;\nvar wasmImportedFuncCache8;\nvar wasmImportedFuncCache9;\nvar wasmImportedFuncCache10;\nvar wasmImportedFuncCache11;\nvar wasmImportedFuncCache12;\nvar wasmImportedFuncCache13;\nvar wasmImportedFuncCache14;\nvar wasmImportedFuncCache15;\nvar wasmImportedFuncCache16;\nvar wasmImportedFuncCache17;\nvar wasmImportedFuncCache18;\nvar wasmImportedFuncCache19;\nvar wasmImportedFuncCache20;\nvar wasmImportedFuncCache21;\nvar wasmImportedFuncCache22;\nvar wasmImportedFuncCache23;\nvar wasmImportedFuncCache24;\nvar wasmImportedFuncCache25;\nvar wasmImportedFuncCache26;\nvar wasmImportedFuncCache27;\nvar wasmImportedFuncCache28;\nvar wasmImportedFuncCache29;\nvar wasmImportedFuncCache30;\nvar wasmImportedFuncCache31;\nvar wasmImportedFuncCache32;\nvar wasmImportedFuncCache33;\nvar wasmImportedFuncCache34;\nvar wasmImportedFuncCache35;\nvar wasmImportedFuncCache36;\nvar wasmImportedFuncCache37;\nvar wasmImportedFuncCache38;\nvar wasmImportedFuncCache39;\nvar wasmImportedFuncCache40;\nvar wasmImportedFuncCache41;\nvar wasmImportedFuncCache42;\nvar wasmImportedFuncCache43;\nvar wasmImportedFuncCache44;\nvar wasmImportedFuncCache45;\nvar wasmImportedFuncCache46;\nvar wasmImportedFuncCache47;\nvar wasmImportedFuncCache48;\nvar wasmImportedFuncCache49;\nvar wasmImportedFuncCache50;\nvar wasmImportedFuncCache51;\nvar wasmImportedFuncCache52;\nvar wasmImportedFuncCache53;\nvar wasmImportedFuncCache54;\nvar wasmImportedFuncCache55;\nvar wasmImportedFuncCache56;\nvar wasmImportedFuncCache57;\nvar wasmImportedFuncCache58;\nvar wasmImportedFuncCache59;\nvar wasmImportedFuncCache60;\nvar wasmImportedFuncCache61;\nvar wasmImportedFuncCache62;\nvar wasmImportedFuncCache63;\nvar wasmImportedFuncCache64;\nvar wasmImportedFuncCache65;\nvar wasmImportedFuncCache66;\nvar wasmImportedFuncCache67;\nvar wasmImportedFuncCache68;\nvar wasmImportedFuncCache69;\nvar wasmImportedFuncCache70;\nvar wasmImportedFuncCache71;\nvar wasmImportedFuncCache72;\nvar wasmImportedFuncCache73;\nvar wasmImportedFuncCache74;\nvar wasmImportedFuncCache75;\nvar wasmImportedFuncCache76;\nvar wasmImportedFuncCache77;\nvar wasmImportedFuncCache78;\nvar wasmImportedFuncCache79;\nvar wasmImportedFuncCache80;\nvar wasmImportedFuncCache81;\nvar wasmImportedFuncCache82;\nvar wasmImportedFuncCache83;\nvar wasmImportedFuncCache84;\nvar wasmImportedFuncCache85;\nvar wasmImportedFuncCache86;\nvar wasmImportedFuncCache87;\nvar wasmImportedFuncCache88;\nvar wasmImportedFuncCache89;\nvar wasmImportedFuncCache90;\nvar wasmImportedFuncCache91;\nvar wasmImportedFuncCache92;\nvar wasmImportedFuncCache93;\nvar wasmImportedFuncCache94;\nvar wasmImportedFuncCache95;\nvar wasmImportedFuncCache96;\nvar wasmImportedFuncCache97;\nvar wasmImportedFuncCache98;\nvar wasmImportedFuncCache99;\nvar wasmImportedFuncCache100;\nvar wasmImportedFuncCache101;\nvar wasmImportedFuncCache102;\nvar wasmImportedFuncCache103;\nvar wasmImportedFuncCache104;\nvar wasmImportedFuncCache105;\nvar wasmImportedFuncCache106;\nvar wasmImportedFuncCache107;\nvar wasmImportedFuncCache108;\nvar wasmImportedFuncCache109;\nvar wasmImportedFuncCache110;\nvar wasmImportedFuncCache111;\nvar wasmImportedFuncCache112;\nvar wasmImportedFuncCache113;\nvar wasmImportedFuncCache114;\nvar wasmImportedFuncCache115;\nvar wasmImportedFuncCache116;\nvar wasmImportedFuncCache117;\nvar wasmImportedFuncCache118;\nvar wasmImportedFuncCache119;\nvar wasmImportedFuncCache120;\nvar wasmImportedFuncCache121;\nvar wasmImportedFuncCache122;\nvar wasmImportedFuncCache123;\nvar wasmImportedFuncCache124;\nvar wasmImportedFuncCache125;\nvar wasmImportedFuncCache126;\nvar wasmImportedFuncCache127;\nvar wasmImportedFuncCache128;\nvar wasmImportedFuncCache129;\nvar wasmImportedFuncCache130;\nvar wasmImportedFuncCache131;\nvar wasmImportedFuncCache132;\nvar wasmImportedFuncCache133;\nvar wasmImportedFuncCache134;\nvar wasmImportedFuncCache135;\nvar wasmImportedFuncCache136;\nvar wasmImportedFuncCache137;\nvar wasmImportedFuncCache138;\nvar wasmImportedFuncCache139;\nvar wasmImportedFuncCache140;\nvar wasmImportedFuncCache141;\nvar wasmImportedFuncCache142;\nvar wasmImportedFuncCache143;\nvar wasmImportedFuncCache144;\nvar wasmImportedFuncCache145;\nvar wasmImportedFuncCache146;\nvar wasmImportedFuncCache147;\nvar wasmImportedFuncCache148;\nvar wasmImportedFuncCache149;\nvar wasmImportedFuncCache150;\nvar wasmImportedFuncCache151;\nvar wasmImportedFuncCache152;\nvar wasmImportedFuncCache153;\nvar wasmImportedFuncCache154;\nvar wasmImportedFuncCache155;\nvar wasmImportedFuncCache156;\nvar wasmImportedFuncCache157;\nvar wasmImportedFuncCache158;\nvar wasmImportedFuncCache159;\nvar wasmImportedFuncCache160;\nvar wasmImportedFuncCache161;\nvar wasmImportedFuncCache162;\nvar wasmImportedFuncCache163;\nvar wasmImportedFuncCache164;\nvar wasmImportedFuncCache165;\nvar wasmImportedFuncCache166;\nvar wasmImportedFuncCache167;\nvar wasmImportedFuncCache168;\nvar wasmImportedFuncCache169;\nvar wasmImportedFuncCache170;\nvar wasmImportedFuncCache171;\nvar wasmImportedFuncCache172;\nvar wasmImportedFuncCache173;\nvar wasmImportedFuncCache174;\nvar wasmImportedFuncCache175;\nvar wasmImportedFuncCache176;\nvar wasmImportedFuncCache177;\nvar wasmImportedFuncCache178;\nvar wasmImportedFuncCache179;\nvar wasmImportedFuncCache180;\nvar wasmImportedFuncCache181;\nvar wasmImportedFuncCache182;\nvar wasmImportedFuncCache183;\nvar wasmImportedFuncCache184;\nvar wasmImportedFuncCache185;\nvar wasmImportedFuncCache186;\nvar wasmImportedFuncCache187;\nvar wasmImportedFuncCache188;\nvar wasmImportedFuncCache189;\nvar wasmImportedFuncCache190;\nvar wasmImportedFuncCache191;\nvar wasmImportedFuncCache192;\nvar wasmImportedFuncCache193;\nvar wasmImportedFuncCache194;\nvar wasmImportedFuncCache195;\nvar wasmImportedFuncCache196;\nvar wasmImportedFuncCache197;\nvar wasmImportedFuncCache198;\nvar wasmImportedFuncCache199;\nvar wasmImportedFuncCache200;\nvar wasmImportedFuncCache201;\nvar wasmImportedFuncCache202;\nvar wasmImportedFuncCache203;\nvar wasmImportedFuncCache204;\nvar wasmImportedFuncCache205;\nvar wasmImportedFuncCache206;\nvar wasmImportedFuncCache207;\nvar wasmImportedFuncCache208;\nvar wasmImportedFuncCache209;\nvar wasmImportedFuncCache210;\nvar wasmImportedFuncCache211;\nvar wasmImportedFuncCache212;\nvar wasmImportedFuncCache213;\nvar wasmImportedFuncCache214;\nvar wasmImportedFuncCache215;\nvar wasmImportedFuncCache216;\nvar wasmImportedFuncCache217;\nvar wasmImportedFuncCache218;\nvar wasmImportedFuncCache219;\nvar wasmImportedFuncCache220;\nvar wasmImportedFuncCache221;\nvar wasmImportedFuncCache222;\nvar wasmImportObjects = {\n\t6516: function() {\n\t\treturn {\n\t\t\t\"./healpix_bg.js\": {\n\t\t\t\t\"__wbindgen_throw\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache0 === undefined) wasmImportedFuncCache0 = __webpack_require__.c[821].exports;\n\t\t\t\t\treturn wasmImportedFuncCache0[\"Or\"](p0i32,p1i32);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t},\n\t182: function() {\n\t\treturn {\n\t\t\t\"./index_bg.js\": {\n\t\t\t\t\"__wbindgen_object_drop_ref\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache1 === undefined) wasmImportedFuncCache1 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache1[\"ug$\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_object_clone_ref\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache2 === undefined) wasmImportedFuncCache2 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache2[\"m_1\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_string_new\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache3 === undefined) wasmImportedFuncCache3 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache3[\"h4u\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_number_get\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache4 === undefined) wasmImportedFuncCache4 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache4[\"M19\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_json_parse\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache5 === undefined) wasmImportedFuncCache5 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache5[\"t$0\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_json_serialize\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache6 === undefined) wasmImportedFuncCache6 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache6[\"r1T\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_cb_drop\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache7 === undefined) wasmImportedFuncCache7 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache7[\"G6U\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_fetchSurveyMetadata_3d518f6be78ba7d4\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache8 === undefined) wasmImportedFuncCache8 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache8[\"N6q\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_boolean_get\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache9 === undefined) wasmImportedFuncCache9 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache9[\"HT5\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_log_a39f164b49616cb0\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache10 === undefined) wasmImportedFuncCache10 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache10[\"TkU\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_instanceof_Window_434ce1849eb4e0fc\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache11 === undefined) wasmImportedFuncCache11 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache11[\"xAF\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_document_5edd43643d1060d9\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache12 === undefined) wasmImportedFuncCache12 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache12[\"p$7\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_navigator_0e0588c949560476\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache13 === undefined) wasmImportedFuncCache13 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache13[\"NMF\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_innerWidth_405786923c1d2641\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache14 === undefined) wasmImportedFuncCache14 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache14[\"Z5l\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_innerHeight_25d3be0d129329c3\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache15 === undefined) wasmImportedFuncCache15 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache15[\"jPO\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_devicePixelRatio_9632545370d525ae\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache16 === undefined) wasmImportedFuncCache16 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache16[\"$Ur\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_performance_bbca4ccfaef860b2\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache17 === undefined) wasmImportedFuncCache17 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache17[\"uVe\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_open_67fbcd7373a90ddc\": function(p0i32,p1i32,p2i32,p3i32,p4i32) {\n\t\t\t\t\tif(wasmImportedFuncCache18 === undefined) wasmImportedFuncCache18 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache18[\"c1U\"](p0i32,p1i32,p2i32,p3i32,p4i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_requestAnimationFrame_0c71cd3c6779a371\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache19 === undefined) wasmImportedFuncCache19 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache19[\"VQB\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_setTimeout_1c75092906446b91\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache20 === undefined) wasmImportedFuncCache20 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache20[\"tZN\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_size_20c167ba9040b895\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache21 === undefined) wasmImportedFuncCache21 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache21[\"VeP\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_arrayBuffer_8b5364ee9b393098\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache22 === undefined) wasmImportedFuncCache22 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache22[\"JD0\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_appendChild_3fe5090c665d3bb4\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache23 === undefined) wasmImportedFuncCache23 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache23[\"Azg\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_setonerror_d665b35adb3552fb\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache24 === undefined) wasmImportedFuncCache24 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache24[\"wBc\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_setonload_18033df8ec5db791\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache25 === undefined) wasmImportedFuncCache25 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache25[\"vsC\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_data_9562112603a9aa89\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache26 === undefined) wasmImportedFuncCache26 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache26[\"RL2\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_getPropertyValue_fd6ae3726bda9d7f\": function(p0i32,p1i32,p2i32,p3i32) {\n\t\t\t\t\tif(wasmImportedFuncCache27 === undefined) wasmImportedFuncCache27 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache27[\"CB1\"](p0i32,p1i32,p2i32,p3i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_setProperty_ebb06e7fa941d6a8\": function(p0i32,p1i32,p2i32,p3i32,p4i32) {\n\t\t\t\t\tif(wasmImportedFuncCache28 === undefined) wasmImportedFuncCache28 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache28[\"IYe\"](p0i32,p1i32,p2i32,p3i32,p4i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_clientX_849ccdf456d662ac\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache29 === undefined) wasmImportedFuncCache29 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache29[\"bZ0\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_clientY_1aaff30fe0cd0876\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache30 === undefined) wasmImportedFuncCache30 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache30[\"aKY\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_ctrlKey_4e536bedb069129f\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache31 === undefined) wasmImportedFuncCache31 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache31[\"CX\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_metaKey_0b396e35a4941247\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache32 === undefined) wasmImportedFuncCache32 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache32[\"DO3\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_button_a18f33eb55774d89\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache33 === undefined) wasmImportedFuncCache33 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache33[\"HIE\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_type_8bc3e57acd2158c9\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache34 === undefined) wasmImportedFuncCache34 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache34[\"wF\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_addEventListener_6bdba88519fdc1c9\": function(p0i32,p1i32,p2i32,p3i32) {\n\t\t\t\t\tif(wasmImportedFuncCache35 === undefined) wasmImportedFuncCache35 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache35[\"jGd\"](p0i32,p1i32,p2i32,p3i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_getwithindex_5caaba1b5b3e6e18\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache36 === undefined) wasmImportedFuncCache36 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache36[\"KUf\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_deltaX_df228181f4d1a561\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache37 === undefined) wasmImportedFuncCache37 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache37[\"$Ov\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_deltaY_afa6edde136e1500\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache38 === undefined) wasmImportedFuncCache38 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache38[\"XP1\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_deltaMode_ed9d7974a0c11323\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache39 === undefined) wasmImportedFuncCache39 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache39[\"uhW\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_dataTransfer_bc4c0501385a0c8e\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache40 === undefined) wasmImportedFuncCache40 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache40[\"T3e\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_now_5fa0ca001e042f8a\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache41 === undefined) wasmImportedFuncCache41 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache41[\"xbI\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_instanceof_HtmlInputElement_8969541a2a0bded0\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache42 === undefined) wasmImportedFuncCache42 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache42[\"K5C\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_setautofocus_a2ae37091dfbe4af\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache43 === undefined) wasmImportedFuncCache43 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache43[\"hhb\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_setsize_90d1034a7a757a50\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache44 === undefined) wasmImportedFuncCache44 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache44[\"VNV\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_value_fc1c354d1a0e9714\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache45 === undefined) wasmImportedFuncCache45 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache45[\"ZDS\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_setvalue_ce4a23f487065c07\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache46 === undefined) wasmImportedFuncCache46 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache46[\"XgU\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_items_d571f433ef73ee49\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache47 === undefined) wasmImportedFuncCache47 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache47[\"gDA\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_files_a4192b4f5967317b\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache48 === undefined) wasmImportedFuncCache48 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache48[\"ALE\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_length_41b205f6892bf9d9\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache49 === undefined) wasmImportedFuncCache49 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache49[\"va1\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_get_bdec89fd60d07530\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache50 === undefined) wasmImportedFuncCache50 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache50[\"W8f\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_length_a2882c668bdf6488\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache51 === undefined) wasmImportedFuncCache51 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache51[\"pv_\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_get_1c01a7682a9775bb\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache52 === undefined) wasmImportedFuncCache52 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache52[\"xq6\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_identifier_afa8b01d4d901685\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache53 === undefined) wasmImportedFuncCache53 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache53[\"gvr\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_pageX_e0c8221ecfdb73d0\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache54 === undefined) wasmImportedFuncCache54 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache54[\"vb7\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_pageY_32100ad7039a744e\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache55 === undefined) wasmImportedFuncCache55 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache55[\"P01\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_force_8e51e1fec066aade\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache56 === undefined) wasmImportedFuncCache56 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache56[\"Auf\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_length_01a613025b5ffd74\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache57 === undefined) wasmImportedFuncCache57 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache57[\"Lxw\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_item_b192ab411bbfbb09\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache58 === undefined) wasmImportedFuncCache58 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache58[\"PzC\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_get_a765dab923455e0d\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache59 === undefined) wasmImportedFuncCache59 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache59[\"A2l\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_responseURL_a3e549a88db1c1f7\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache60 === undefined) wasmImportedFuncCache60 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache60[\"nwD\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_setresponseType_e5326d926ee8e787\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache61 === undefined) wasmImportedFuncCache61 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache61[\"Ugc\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_response_8b12ac238727ae0e\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache62 === undefined) wasmImportedFuncCache62 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache62[\"yB0\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_new_08dfde0f90155eb7\": function() {\n\t\t\t\t\tif(wasmImportedFuncCache63 === undefined) wasmImportedFuncCache63 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache63[\"wae\"]();\n\t\t\t\t},\n\t\t\t\t\"__wbg_open_7190f43b39e7f488\": function(p0i32,p1i32,p2i32,p3i32,p4i32,p5i32) {\n\t\t\t\t\tif(wasmImportedFuncCache64 === undefined) wasmImportedFuncCache64 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache64[\"tAG\"](p0i32,p1i32,p2i32,p3i32,p4i32,p5i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_send_84c8dd943b775f78\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache65 === undefined) wasmImportedFuncCache65 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache65[\"iTe\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_body_7538539844356c1c\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache66 === undefined) wasmImportedFuncCache66 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache66[\"Gnz\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_createElement_d017b8d2af99bab9\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache67 === undefined) wasmImportedFuncCache67 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache67[\"cMj\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_getElementById_b30e88aff96f66a1\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache68 === undefined) wasmImportedFuncCache68 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache68[\"zGh\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_id_79dca31d8297faf1\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache69 === undefined) wasmImportedFuncCache69 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache69[\"JN4\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_setid_73be37238eaa05be\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache70 === undefined) wasmImportedFuncCache70 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache70[\"epO\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_scrollLeft_e8aba47a94d12290\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache71 === undefined) wasmImportedFuncCache71 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache71[\"TS\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_getBoundingClientRect_534c1b96b6e612d3\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache72 === undefined) wasmImportedFuncCache72 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache72[\"AJd\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_getElementsByClassName_8a7d00ed3eaf1522\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache73 === undefined) wasmImportedFuncCache73 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache73[\"GzJ\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_instanceof_WebGlRenderingContext_2be4c068bf5f8362\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache74 === undefined) wasmImportedFuncCache74 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache74[\"I76\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_canvas_d0b58be124e596e3\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache75 === undefined) wasmImportedFuncCache75 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache75[\"vg1\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_bufferData_85d635f32a990208\": function(p0i32,p1i32,p2i32,p3i32) {\n\t\t\t\t\tif(wasmImportedFuncCache76 === undefined) wasmImportedFuncCache76 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache76[\"$Vr\"](p0i32,p1i32,p2i32,p3i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_bufferSubData_3a944e1fdad0cd9a\": function(p0i32,p1i32,p2i32,p3i32) {\n\t\t\t\t\tif(wasmImportedFuncCache77 === undefined) wasmImportedFuncCache77 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache77[\"I5w\"](p0i32,p1i32,p2i32,p3i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_readPixels_3692eaca9dfc7c0c\": function(p0i32,p1i32,p2i32,p3i32,p4i32,p5i32,p6i32,p7i32) {\n\t\t\t\t\tif(wasmImportedFuncCache78 === undefined) wasmImportedFuncCache78 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache78[\"kOd\"](p0i32,p1i32,p2i32,p3i32,p4i32,p5i32,p6i32,p7i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_texImage2D_d26bd916ff0956a1\": function(p0i32,p1i32,p2i32,p3i32,p4i32,p5i32,p6i32,p7i32,p8i32,p9i32,p10i32) {\n\t\t\t\t\tif(wasmImportedFuncCache79 === undefined) wasmImportedFuncCache79 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache79[\"VMe\"](p0i32,p1i32,p2i32,p3i32,p4i32,p5i32,p6i32,p7i32,p8i32,p9i32,p10i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_texImage2D_b46a9b691e69d90b\": function(p0i32,p1i32,p2i32,p3i32,p4i32,p5i32,p6i32) {\n\t\t\t\t\tif(wasmImportedFuncCache80 === undefined) wasmImportedFuncCache80 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache80[\"kll\"](p0i32,p1i32,p2i32,p3i32,p4i32,p5i32,p6i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_texSubImage2D_d907a4c940fd6e41\": function(p0i32,p1i32,p2i32,p3i32,p4i32,p5i32,p6i32,p7i32,p8i32,p9i32) {\n\t\t\t\t\tif(wasmImportedFuncCache81 === undefined) wasmImportedFuncCache81 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache81[\"R4G\"](p0i32,p1i32,p2i32,p3i32,p4i32,p5i32,p6i32,p7i32,p8i32,p9i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_texSubImage2D_d9dc0ffd91998f0d\": function(p0i32,p1i32,p2i32,p3i32,p4i32,p5i32,p6i32,p7i32) {\n\t\t\t\t\tif(wasmImportedFuncCache82 === undefined) wasmImportedFuncCache82 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache82[\"RsM\"](p0i32,p1i32,p2i32,p3i32,p4i32,p5i32,p6i32,p7i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_uniform1fv_e6a2134edff4f2e9\": function(p0i32,p1i32,p2i32,p3i32) {\n\t\t\t\t\tif(wasmImportedFuncCache83 === undefined) wasmImportedFuncCache83 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache83[\"RLh\"](p0i32,p1i32,p2i32,p3i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_uniformMatrix2fv_aaa4e0f7c15bca04\": function(p0i32,p1i32,p2i32,p3i32,p4i32) {\n\t\t\t\t\tif(wasmImportedFuncCache84 === undefined) wasmImportedFuncCache84 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache84[\"a64\"](p0i32,p1i32,p2i32,p3i32,p4i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_uniformMatrix4fv_f07c6caf5a563616\": function(p0i32,p1i32,p2i32,p3i32,p4i32) {\n\t\t\t\t\tif(wasmImportedFuncCache85 === undefined) wasmImportedFuncCache85 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache85[\"zw$\"](p0i32,p1i32,p2i32,p3i32,p4i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_activeTexture_74ed11a5c5d5af90\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache86 === undefined) wasmImportedFuncCache86 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache86[\"pDF\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_attachShader_55dbe770f3ee32ca\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache87 === undefined) wasmImportedFuncCache87 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache87[\"y1d\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_bindBuffer_29d52e7bc48650c3\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache88 === undefined) wasmImportedFuncCache88 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache88[\"ros\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_bindFramebuffer_bd35ddd23765c7b6\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache89 === undefined) wasmImportedFuncCache89 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache89[\"DKE\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_bindTexture_198c816345baca83\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache90 === undefined) wasmImportedFuncCache90 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache90[\"lvN\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_blendEquation_09d56f3be6f914f5\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache91 === undefined) wasmImportedFuncCache91 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache91[\"uOU\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_blendFunc_c8f1e0fb4467f57c\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache92 === undefined) wasmImportedFuncCache92 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache92[\"un$\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_blendFuncSeparate_494b1dae028cb9a9\": function(p0i32,p1i32,p2i32,p3i32,p4i32) {\n\t\t\t\t\tif(wasmImportedFuncCache93 === undefined) wasmImportedFuncCache93 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache93[\"yub\"](p0i32,p1i32,p2i32,p3i32,p4i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_clear_2af1271959ec83d7\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache94 === undefined) wasmImportedFuncCache94 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache94[\"Dr9\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_clearColor_51c4f69c743c3252\": function(p0i32,p1f32,p2f32,p3f32,p4f32) {\n\t\t\t\t\tif(wasmImportedFuncCache95 === undefined) wasmImportedFuncCache95 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache95[\"jNe\"](p0i32,p1f32,p2f32,p3f32,p4f32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_compileShader_3b5f9ef4c67a0777\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache96 === undefined) wasmImportedFuncCache96 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache96[\"IhY\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_createBuffer_c40f37e1348bb91f\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache97 === undefined) wasmImportedFuncCache97 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache97[\"AFF\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_createFramebuffer_410b12a5cc5a8f13\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache98 === undefined) wasmImportedFuncCache98 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache98[\"G1q\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_createProgram_245520da1fb9e47b\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache99 === undefined) wasmImportedFuncCache99 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache99[\"E8L\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_createShader_4d8818a13cb825b3\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache100 === undefined) wasmImportedFuncCache100 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache100[\"wnC\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_createTexture_f3a6a715d6bada45\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache101 === undefined) wasmImportedFuncCache101 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache101[\"u$u\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_cullFace_c6fb8a7309c36a38\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache102 === undefined) wasmImportedFuncCache102 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache102[\"_27\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_deleteBuffer_c708688b9e1b3518\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache103 === undefined) wasmImportedFuncCache103 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache103[\"hWq\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_deleteFramebuffer_ca006f8649d4550a\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache104 === undefined) wasmImportedFuncCache104 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache104[\"bDQ\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_deleteTexture_9159fb5927ed32c0\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache105 === undefined) wasmImportedFuncCache105 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache105[\"AsT\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_disable_2b63b75dc6c27537\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache106 === undefined) wasmImportedFuncCache106 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache106[\"TL1\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_disableVertexAttribArray_aa8458b40dd08914\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache107 === undefined) wasmImportedFuncCache107 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache107[\"BFq\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_drawArrays_22c88d644a33fd59\": function(p0i32,p1i32,p2i32,p3i32) {\n\t\t\t\t\tif(wasmImportedFuncCache108 === undefined) wasmImportedFuncCache108 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache108[\"XRw\"](p0i32,p1i32,p2i32,p3i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_drawElements_6e26500a25ecf478\": function(p0i32,p1i32,p2i32,p3i32,p4i32) {\n\t\t\t\t\tif(wasmImportedFuncCache109 === undefined) wasmImportedFuncCache109 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache109[\"HyA\"](p0i32,p1i32,p2i32,p3i32,p4i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_enable_8f6dd779ccb8e1de\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache110 === undefined) wasmImportedFuncCache110 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache110[\"kmw\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_enableVertexAttribArray_4ed5f91d0718bee1\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache111 === undefined) wasmImportedFuncCache111 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache111[\"RhP\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_framebufferTexture2D_31643260e5b0b294\": function(p0i32,p1i32,p2i32,p3i32,p4i32,p5i32) {\n\t\t\t\t\tif(wasmImportedFuncCache112 === undefined) wasmImportedFuncCache112 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache112[\"UYF\"](p0i32,p1i32,p2i32,p3i32,p4i32,p5i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_getActiveUniform_3851244f8fc5db53\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache113 === undefined) wasmImportedFuncCache113 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache113[\"zv9\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_getAttribLocation_da5df7094096113d\": function(p0i32,p1i32,p2i32,p3i32) {\n\t\t\t\t\tif(wasmImportedFuncCache114 === undefined) wasmImportedFuncCache114 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache114[\"Ux5\"](p0i32,p1i32,p2i32,p3i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_getExtension_c6ceee3244ee7f20\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache115 === undefined) wasmImportedFuncCache115 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache115[\"TPd\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_getProgramInfoLog_c253042b64e86027\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache116 === undefined) wasmImportedFuncCache116 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache116[\"Woc\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_getProgramParameter_4f698af0dda0a2d4\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache117 === undefined) wasmImportedFuncCache117 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache117[\"Dd9\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_getShaderInfoLog_584794e3bcf1e19b\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache118 === undefined) wasmImportedFuncCache118 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache118[\"HMS\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_getShaderParameter_64b1ffe576e5fa25\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache119 === undefined) wasmImportedFuncCache119 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache119[\"dVB\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_getUniformLocation_703972f150a46500\": function(p0i32,p1i32,p2i32,p3i32) {\n\t\t\t\t\tif(wasmImportedFuncCache120 === undefined) wasmImportedFuncCache120 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache120[\"hNQ\"](p0i32,p1i32,p2i32,p3i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_linkProgram_5fdd57237c761833\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache121 === undefined) wasmImportedFuncCache121 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache121[\"Xb5\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_scissor_fb094c7db856e2a7\": function(p0i32,p1i32,p2i32,p3i32,p4i32) {\n\t\t\t\t\tif(wasmImportedFuncCache122 === undefined) wasmImportedFuncCache122 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache122[\"zAt\"](p0i32,p1i32,p2i32,p3i32,p4i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_shaderSource_173ab97288934a60\": function(p0i32,p1i32,p2i32,p3i32) {\n\t\t\t\t\tif(wasmImportedFuncCache123 === undefined) wasmImportedFuncCache123 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache123[\"BIh\"](p0i32,p1i32,p2i32,p3i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_texParameteri_caec5468f2a850c3\": function(p0i32,p1i32,p2i32,p3i32) {\n\t\t\t\t\tif(wasmImportedFuncCache124 === undefined) wasmImportedFuncCache124 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache124[\"KcO\"](p0i32,p1i32,p2i32,p3i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_uniform1f_258478814234cf9c\": function(p0i32,p1i32,p2f32) {\n\t\t\t\t\tif(wasmImportedFuncCache125 === undefined) wasmImportedFuncCache125 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache125[\"ERh\"](p0i32,p1i32,p2f32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_uniform1i_a0275676828a22b6\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache126 === undefined) wasmImportedFuncCache126 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache126[\"U4n\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_uniform2f_b0af46ba675f2c0d\": function(p0i32,p1i32,p2f32,p3f32) {\n\t\t\t\t\tif(wasmImportedFuncCache127 === undefined) wasmImportedFuncCache127 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache127[\"kV8\"](p0i32,p1i32,p2f32,p3f32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_uniform3f_65416973a351fbab\": function(p0i32,p1i32,p2f32,p3f32,p4f32) {\n\t\t\t\t\tif(wasmImportedFuncCache128 === undefined) wasmImportedFuncCache128 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache128[\"Uzm\"](p0i32,p1i32,p2f32,p3f32,p4f32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_uniform4f_e5d0a91bf98b35ad\": function(p0i32,p1i32,p2f32,p3f32,p4f32,p5f32) {\n\t\t\t\t\tif(wasmImportedFuncCache129 === undefined) wasmImportedFuncCache129 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache129[\"YXT\"](p0i32,p1i32,p2f32,p3f32,p4f32,p5f32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_useProgram_d5898a40ebe88916\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache130 === undefined) wasmImportedFuncCache130 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache130[\"lVh\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_vertexAttribPointer_0d097efa33e3f45f\": function(p0i32,p1i32,p2i32,p3i32,p4i32,p5i32,p6i32) {\n\t\t\t\t\tif(wasmImportedFuncCache131 === undefined) wasmImportedFuncCache131 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache131[\"sbi\"](p0i32,p1i32,p2i32,p3i32,p4i32,p5i32,p6i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_viewport_19577064127daf83\": function(p0i32,p1i32,p2i32,p3i32,p4i32) {\n\t\t\t\t\tif(wasmImportedFuncCache132 === undefined) wasmImportedFuncCache132 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache132[\"N_v\"](p0i32,p1i32,p2i32,p3i32,p4i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_error_ca520cb687b085a1\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache133 === undefined) wasmImportedFuncCache133 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache133[\"q5V\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_log_fbd13631356d44e4\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache134 === undefined) wasmImportedFuncCache134 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache134[\"r2_\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_warn_97f10a6b0dbb8c5c\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache135 === undefined) wasmImportedFuncCache135 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache135[\"WV6\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_scrollTop_5ebd5c6591748d6e\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache136 === undefined) wasmImportedFuncCache136 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache136[\"ejV\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_hidden_f7a620ec4ab18ce5\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache137 === undefined) wasmImportedFuncCache137 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache137[\"l7F\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_sethidden_fdaefd7e7da7e4c0\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache138 === undefined) wasmImportedFuncCache138 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache138[\"UOw\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_style_16f5dd9624687c8f\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache139 === undefined) wasmImportedFuncCache139 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache139[\"cE3\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_offsetTop_45111254e7b26a1f\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache140 === undefined) wasmImportedFuncCache140 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache140[\"x_Z\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_offsetLeft_be5393bf9eec5766\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache141 === undefined) wasmImportedFuncCache141 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache141[\"B9D\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_offsetWidth_bc683e2f57ea2d6b\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache142 === undefined) wasmImportedFuncCache142 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache142[\"MAo\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_setonload_9235de4503eb82c8\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache143 === undefined) wasmImportedFuncCache143 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache143[\"s76\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_setonerror_939f617c2b40758c\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache144 === undefined) wasmImportedFuncCache144 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache144[\"Qyx\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_blur_2156876090506146\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache145 === undefined) wasmImportedFuncCache145 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache145[\"kW7\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_focus_4434360545ac99cf\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache146 === undefined) wasmImportedFuncCache146 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache146[\"W47\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_drawElementsInstancedANGLE_e184bb1bad14df88\": function(p0i32,p1i32,p2i32,p3i32,p4i32,p5i32) {\n\t\t\t\t\tif(wasmImportedFuncCache147 === undefined) wasmImportedFuncCache147 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache147[\"rBg\"](p0i32,p1i32,p2i32,p3i32,p4i32,p5i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_vertexAttribDivisorANGLE_2dc41a79843a435c\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache148 === undefined) wasmImportedFuncCache148 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache148[\"lKQ\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_type_e32f387f5584c765\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache149 === undefined) wasmImportedFuncCache149 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache149[\"_dw\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_preventDefault_fa00541ff125b78c\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache150 === undefined) wasmImportedFuncCache150 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache150[\"fPX\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_stopPropagation_da586180676fa914\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache151 === undefined) wasmImportedFuncCache151 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache151[\"HP8\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_name_9a61dbbdbfb2d0de\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache152 === undefined) wasmImportedFuncCache152 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache152[\"RDw\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_lastModified_0de23a8c5214f2fb\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache153 === undefined) wasmImportedFuncCache153 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache153[\"tP6\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_instanceof_HtmlCanvasElement_a6157e470d06b638\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache154 === undefined) wasmImportedFuncCache154 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache154[\"CUx\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_width_cfa982e2a6ad6297\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache155 === undefined) wasmImportedFuncCache155 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache155[\"OWO\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_setwidth_362e8db8cbadbe96\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache156 === undefined) wasmImportedFuncCache156 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache156[\"RAI\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_height_1b399500ca683487\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache157 === undefined) wasmImportedFuncCache157 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache157[\"T2i\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_setheight_28f53831182cc410\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache158 === undefined) wasmImportedFuncCache158 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache158[\"Si\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_getContext_10d5c2a4cc0737c8\": function(p0i32,p1i32,p2i32,p3i32) {\n\t\t\t\t\tif(wasmImportedFuncCache159 === undefined) wasmImportedFuncCache159 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache159[\"hW7\"](p0i32,p1i32,p2i32,p3i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_setsrc_b0a1ac4dd261ae2d\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache160 === undefined) wasmImportedFuncCache160 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache160[\"BKi\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_setcrossOrigin_07e0e4935571a4c5\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache161 === undefined) wasmImportedFuncCache161 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache161[\"C7I\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_width_6c4cad65073b3852\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache162 === undefined) wasmImportedFuncCache162 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache162[\"zV7\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_height_133772b066cfc559\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache163 === undefined) wasmImportedFuncCache163 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache163[\"LNH\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_new_da67f111e299956e\": function() {\n\t\t\t\t\tif(wasmImportedFuncCache164 === undefined) wasmImportedFuncCache164 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache164[\"BBY\"]();\n\t\t\t\t},\n\t\t\t\t\"__wbg_keyCode_8a05b1390fced3c8\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache165 === undefined) wasmImportedFuncCache165 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache165[\"Aqq\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_altKey_773e7f8151c49bb1\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache166 === undefined) wasmImportedFuncCache166 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache166[\"mjq\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_ctrlKey_8c7ff99be598479e\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache167 === undefined) wasmImportedFuncCache167 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache167[\"Jw8\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_shiftKey_894b631364d8db13\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache168 === undefined) wasmImportedFuncCache168 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache168[\"X9z\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_metaKey_99a7d3732e1b7856\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache169 === undefined) wasmImportedFuncCache169 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache169[\"pBw\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_isComposing_b892666abf384da9\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache170 === undefined) wasmImportedFuncCache170 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache170[\"fLR\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_key_7f10b1291a923361\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache171 === undefined) wasmImportedFuncCache171 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache171[\"KRE\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_name_4ada8b70ffadb5c0\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache172 === undefined) wasmImportedFuncCache172 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache172[\"GWB\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_top_a24b8b81afea659b\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache173 === undefined) wasmImportedFuncCache173 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache173[\"qX0\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_left_0e681cb8fd277739\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache174 === undefined) wasmImportedFuncCache174 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache174[\"F_1\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_userAgent_3f63af8b4fe2331c\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache175 === undefined) wasmImportedFuncCache175 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache175[\"Kdd\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_touches_7397ce4df4dceded\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache176 === undefined) wasmImportedFuncCache176 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache176[\"b$n\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_changedTouches_363278e8a9a95419\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache177 === undefined) wasmImportedFuncCache177 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache177[\"nrY\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_is_undefined\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache178 === undefined) wasmImportedFuncCache178 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache178[\"XP4\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_newnoargs_f579424187aa1717\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache179 === undefined) wasmImportedFuncCache179 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache179[\"bfV\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_get_f45dff51f52d7222\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache180 === undefined) wasmImportedFuncCache180 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache180[\"cUx\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_isArray_8480ed76e5369634\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache181 === undefined) wasmImportedFuncCache181 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache181[\"YPQ\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_length_7b60f47bde714631\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache182 === undefined) wasmImportedFuncCache182 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache182[\"W4u\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_call_89558c3e96703ca1\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache183 === undefined) wasmImportedFuncCache183 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache183[\"Z4J\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_resolve_4f8f547f26b30b27\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache184 === undefined) wasmImportedFuncCache184 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache184[\"YpQ\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_then_a6860c82b90816ca\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache185 === undefined) wasmImportedFuncCache185 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache185[\"wW8\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_then_58a04e42527f52c6\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache186 === undefined) wasmImportedFuncCache186 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache186[\"YIx\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_self_e23d74ae45fb17d1\": function() {\n\t\t\t\t\tif(wasmImportedFuncCache187 === undefined) wasmImportedFuncCache187 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache187[\"tL0\"]();\n\t\t\t\t},\n\t\t\t\t\"__wbg_window_b4be7f48b24ac56e\": function() {\n\t\t\t\t\tif(wasmImportedFuncCache188 === undefined) wasmImportedFuncCache188 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache188[\"QuW\"]();\n\t\t\t\t},\n\t\t\t\t\"__wbg_globalThis_d61b1f48a57191ae\": function() {\n\t\t\t\t\tif(wasmImportedFuncCache189 === undefined) wasmImportedFuncCache189 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache189[\"EBX\"]();\n\t\t\t\t},\n\t\t\t\t\"__wbg_global_e7669da72fd7f239\": function() {\n\t\t\t\t\tif(wasmImportedFuncCache190 === undefined) wasmImportedFuncCache190 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache190[\"Ycj\"]();\n\t\t\t\t},\n\t\t\t\t\"__wbg_buffer_5e74a88a1424a2e0\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache191 === undefined) wasmImportedFuncCache191 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache191[\"rfx\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_newwithbyteoffsetandlength_278ec7532799393a\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache192 === undefined) wasmImportedFuncCache192 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache192[\"S7W\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_new_e3b800e570795b3c\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache193 === undefined) wasmImportedFuncCache193 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache193[\"TsK\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_newwithbyteoffsetandlength_bdb885cfc5e9bc43\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache194 === undefined) wasmImportedFuncCache194 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache194[\"UX\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_newwithbyteoffsetandlength_ad2916c6fa7d4c6f\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache195 === undefined) wasmImportedFuncCache195 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache195[\"HKx\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_new_f5438c0cea22a3aa\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache196 === undefined) wasmImportedFuncCache196 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache196[\"drm\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_newwithlength_5f4ce114a24dfe1e\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache197 === undefined) wasmImportedFuncCache197 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache197[\"_G0\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_length_30803400a8f15c59\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache198 === undefined) wasmImportedFuncCache198 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache198[\"Zu\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_set_5b8081e9d002f0df\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache199 === undefined) wasmImportedFuncCache199 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache199[\"Mzi\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_newwithlength_747b31c525d823ec\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache200 === undefined) wasmImportedFuncCache200 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache200[\"Zqg\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_subarray_e729e242fb317565\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache201 === undefined) wasmImportedFuncCache201 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache201[\"$hL\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_length_44449d3b5928d07c\": function(p0i32) {\n\t\t\t\t\tif(wasmImportedFuncCache202 === undefined) wasmImportedFuncCache202 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache202[\"xSW\"](p0i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_set_7cb6639737aebb39\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache203 === undefined) wasmImportedFuncCache203 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache203[\"x3e\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_parse_e3e7e590474b89d2\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache204 === undefined) wasmImportedFuncCache204 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache204[\"Zp3\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_new_59cb74e423758ede\": function() {\n\t\t\t\t\tif(wasmImportedFuncCache205 === undefined) wasmImportedFuncCache205 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache205[\"h9\"]();\n\t\t\t\t},\n\t\t\t\t\"__wbg_stack_558ba5917b466edd\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache206 === undefined) wasmImportedFuncCache206 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache206[\"Dze\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbg_error_4bb6c2a97407129a\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache207 === undefined) wasmImportedFuncCache207 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache207[\"kFF\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_debug_string\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache208 === undefined) wasmImportedFuncCache208 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache208[\"fYP\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_throw\": function(p0i32,p1i32) {\n\t\t\t\t\tif(wasmImportedFuncCache209 === undefined) wasmImportedFuncCache209 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache209[\"Or8\"](p0i32,p1i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_memory\": function() {\n\t\t\t\t\tif(wasmImportedFuncCache210 === undefined) wasmImportedFuncCache210 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache210[\"oHO\"]();\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_closure_wrapper1802\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache211 === undefined) wasmImportedFuncCache211 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache211[\"NmI\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_closure_wrapper1804\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache212 === undefined) wasmImportedFuncCache212 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache212[\"gTC\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_closure_wrapper3248\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache213 === undefined) wasmImportedFuncCache213 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache213[\"NQs\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_closure_wrapper3250\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache214 === undefined) wasmImportedFuncCache214 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache214[\"Pj7\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_closure_wrapper3252\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache215 === undefined) wasmImportedFuncCache215 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache215[\"Zxd\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_closure_wrapper3254\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache216 === undefined) wasmImportedFuncCache216 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache216[\"xc6\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_closure_wrapper3256\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache217 === undefined) wasmImportedFuncCache217 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache217[\"_oe\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_closure_wrapper3258\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache218 === undefined) wasmImportedFuncCache218 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache218[\"Of5\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_closure_wrapper3260\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache219 === undefined) wasmImportedFuncCache219 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache219[\"c3L\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_closure_wrapper3262\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache220 === undefined) wasmImportedFuncCache220 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache220[\"quA\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_closure_wrapper3264\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache221 === undefined) wasmImportedFuncCache221 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache221[\"SlT\"](p0i32,p1i32,p2i32);\n\t\t\t\t},\n\t\t\t\t\"__wbindgen_closure_wrapper3434\": function(p0i32,p1i32,p2i32) {\n\t\t\t\t\tif(wasmImportedFuncCache222 === undefined) wasmImportedFuncCache222 = __webpack_require__.c[2333].exports;\n\t\t\t\t\treturn wasmImportedFuncCache222[\"ehv\"](p0i32,p1i32,p2i32);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t},\n};\n\nvar wasmModuleMap = {\n\t\"846\": [\n\t\t182\n\t],\n\t\"995\": [\n\t\t6516\n\t]\n};\n\n// object with all WebAssembly.instance exports\n__webpack_require__.w = {};\n\n// Fetch + compile chunk loading for webassembly\n__webpack_require__.f.wasm = function(chunkId, promises) {\n\n\tvar wasmModules = wasmModuleMap[chunkId] || [];\n\n\twasmModules.forEach(function(wasmModuleId, idx) {\n\t\tvar installedWasmModuleData = installedWasmModules[wasmModuleId];\n\n\t\t// a Promise means \"currently loading\" or \"already loaded\".\n\t\tif(installedWasmModuleData)\n\t\t\tpromises.push(installedWasmModuleData);\n\t\telse {\n\t\t\tvar importObject = wasmImportObjects[wasmModuleId]();\n\t\t\tvar req = fetch(__webpack_require__.p + \"\" + {\"846\":{\"182\":\"f6ed028ddccac64cf3bf\"},\"995\":{\"6516\":\"e46a20eb9bcc54f52125\"}}[chunkId][wasmModuleId] + \".module.wasm\");\n\t\t\tvar promise;\n\t\t\tif(importObject && typeof importObject.then === 'function' && typeof WebAssembly.compileStreaming === 'function') {\n\t\t\t\tpromise = Promise.all([WebAssembly.compileStreaming(req), importObject]).then(function(items) {\n\t\t\t\t\treturn WebAssembly.instantiate(items[0], items[1]);\n\t\t\t\t});\n\t\t\t} else if(typeof WebAssembly.instantiateStreaming === 'function') {\n\t\t\t\tpromise = WebAssembly.instantiateStreaming(req, importObject);\n\t\t\t} else {\n\t\t\t\tvar bytesPromise = req.then(function(x) { return x.arrayBuffer(); });\n\t\t\t\tpromise = bytesPromise.then(function(bytes) {\n\t\t\t\t\treturn WebAssembly.instantiate(bytes, importObject);\n\t\t\t\t});\n\t\t\t}\n\t\t\tpromises.push(installedWasmModules[wasmModuleId] = promise.then(function(res) {\n\t\t\t\treturn __webpack_require__.w[wasmModuleId] = (res.instance || res).exports;\n\t\t\t}));\n\t\t}\n\t});\n};","module.exports = \"precision lowp float;\\n\\nattribute vec2 offset;\\nattribute vec2 uv;\\nattribute vec3 center;\\nattribute vec2 center_lonlat;\\n\\nuniform float current_time;\\nuniform mat4 model;\\nuniform mat4 inv_model;\\n\\nuniform vec2 ndc_to_clip;\\nuniform float czf;\\nuniform vec2 kernel_size;\\n\\nvarying vec2 out_uv;\\nvarying vec3 out_p;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    vec3 p = vec3(inv_model * vec4(center, 1.0));\\n    p = check_inversed_longitude(p);\\n\\n    vec2 center_pos_clip_space = world2clip_aitoff(p);\\n\\n    vec2 pos_clip_space = center_pos_clip_space;\\n    gl_Position = vec4((pos_clip_space / (ndc_to_clip * czf)) + offset * kernel_size , 0.0, 1.0);\\n\\n    out_uv = uv;\\n    out_p = p;\\n}\"","module.exports = \"precision lowp float;\\nattribute vec2 offset;\\nattribute vec2 uv;\\nattribute vec3 center;\\nattribute vec2 center_lonlat;\\n\\nuniform float current_time;\\nuniform mat4 inv_model;\\n\\nuniform vec2 ndc_to_clip;\\nuniform float czf;\\nuniform vec2 kernel_size;\\n\\nvarying vec2 out_uv;\\nvarying vec3 out_p;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    vec3 p = vec3(inv_model * vec4(center, 1.0));\\n    p = check_inversed_longitude(p);\\n\\n    vec2 center_pos_clip_space = world2clip_arc(p);\\n\\n    vec2 pos_clip_space = center_pos_clip_space;\\n    gl_Position = vec4((pos_clip_space / (ndc_to_clip * czf)) + offset * kernel_size , 0.0, 1.0);\\n\\n    out_uv = uv;\\n    out_p = p;\\n}\"","module.exports = \"precision lowp float;\\n\\nvarying vec2 out_uv;\\nvarying vec3 out_p;\\n\\nuniform sampler2D kernel_texture;\\nuniform float fov;\\nuniform float strength;\\nvoid main() {\\n    vec4 color = texture2D(kernel_texture, out_uv) / max(log2(fov*100.0), 1.0);\\n    color.r *= strength;\\n\\n    gl_FragColor = color;\\n}\"","module.exports = \"precision lowp float;\\n\\nattribute vec2 offset;\\nattribute in vec2 uv;\\nattribute in vec3 center;\\nattribute in vec2 center_lonlat;\\n\\nuniform float current_time;\\nuniform mat4 inv_model;\\n\\nuniform vec2 ndc_to_clip;\\nuniform float czf;\\nuniform vec2 kernel_size;\\n\\nvarying vec2 out_uv;\\nvarying vec3 out_p;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    vec3 p = vec3(inv_model * vec4(center, 1.0));\\n    p = check_inversed_longitude(p);\\n\\n    vec2 center_pos_clip_space = world2clip_mercator(p);\\n\\n    vec2 pos_clip_space = center_pos_clip_space;\\n    gl_Position = vec4((pos_clip_space / (ndc_to_clip * czf)) + offset * kernel_size , 0.0, 1.0);\\n\\n    out_uv = uv;\\n    out_p = p;\\n}\"","module.exports = \"precision lowp float;\\nattribute vec2 offset;\\nattribute vec2 uv;\\nattribute vec3 center;\\nattribute vec2 center_lonlat;\\n\\nuniform float current_time;\\nuniform mat4 inv_model;\\n\\nuniform vec2 ndc_to_clip;\\nuniform float czf;\\nuniform vec2 kernel_size;\\n\\nout vec2 out_uv;\\nout vec3 out_p;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    vec3 p = vec3(inv_model * vec4(center, 1.0));\\n    p = check_inversed_longitude(p);\\n\\n    vec2 center_pos_clip_space = world2clip_mollweide(p);\\n\\n    vec2 pos_clip_space = center_pos_clip_space;\\n    gl_Position = vec4((pos_clip_space / (ndc_to_clip * czf)) + offset * kernel_size , 0.0, 1.0);\\n\\n    out_uv = uv;\\n    out_p = p;\\n}\"","module.exports = \"precision lowp float;\\n\\nvarying vec2 out_uv;\\nvarying vec3 out_p;\\n\\nuniform sampler2D kernel_texture;\\nuniform float fov;\\nuniform float strength;\\nvoid main() {\\n    if (out_p.z < 0.0) {\\n        discard;\\n    }\\n\\n    vec4 color = texture2D(kernel_texture, out_uv).rgba / max(log2(fov*100.0), 1.0);\\n    color.r *= strength;\\n\\n    gl_FragColor = color;\\n}\"","module.exports = \"precision lowp float;\\nattribute vec2 offset;\\nattribute vec2 uv;\\nattribute vec3 center;\\nattribute vec2 center_lonlat;\\n\\nuniform float current_time;\\nuniform mat4 inv_model;\\n\\nuniform vec2 ndc_to_clip;\\nuniform float czf;\\nuniform vec2 kernel_size;\\n\\nvarying vec2 out_uv;\\nvarying vec3 out_p;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    vec3 p = vec3(inv_model * vec4(center, 1.0));\\n    p = check_inversed_longitude(p);\\n\\n    vec2 center_pos_clip_space = world2clip_orthographic(p);\\n\\n    vec2 pos_clip_space = center_pos_clip_space;\\n    gl_Position = vec4((pos_clip_space / (ndc_to_clip * czf)) + offset * kernel_size , 0.0, 1.0);\\n\\n    out_uv = uv;\\n    out_p = p;\\n}\"","module.exports = \"precision lowp float;\\n\\nattribute vec2 offset;\\nattribute vec2 uv;\\nattribute vec3 center;\\nattribute vec2 center_lonlat;\\n\\nuniform float current_time;\\nuniform mat4 inv_model;\\n\\nuniform vec2 ndc_to_clip;\\nuniform float czf;\\nuniform vec2 kernel_size;\\n\\nvarying vec2 out_uv;\\nvarying vec3 out_p;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    vec3 p = vec3(inv_model * vec4(center, 1.0));\\n    p = check_inversed_longitude(p);\\n\\n    vec2 center_pos_clip_space = world2clip_gnomonic(p);\\n\\n    vec2 pos_clip_space = center_pos_clip_space;\\n    gl_Position = vec4((pos_clip_space / (ndc_to_clip * czf)) + offset * kernel_size , 0.0, 1.0);\\n\\n    out_uv = uv;\\n    out_p = p;\\n}\"","module.exports = \"precision lowp float;\\nprecision lowp sampler2D;\\n\\nvarying vec2 out_uv;\\n\\nuniform sampler2D texture_fbo;\\nuniform float alpha;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture2D(colormaps, vec2(x, id));\\n}\\n\\n\\nvoid main() {\\n    float opacity = texture2D(texture_fbo, out_uv).r;\\n\\n    float o = smoothstep(0.0, 0.1, opacity);\\n\\n    vec4 color = colormap_f(opacity);\\n    color.a = o * alpha;\\n\\n    gl_FragColor = color;\\n}\"","module.exports = \"precision lowp float;\\nprecision lowp sampler2D;\\n\\nattribute vec2 position;\\nattribute vec2 uv;\\n\\nvarying vec2 out_uv;\\n\\nvoid main() {\\n    gl_Position = vec4(position, 0.0, 1.0);\\n    out_uv = uv;\\n}\"","module.exports = \"precision mediump float;\\n\\nvarying vec2 pos_clip;\\n\\nuniform vec4 color;\\nuniform mat4 model;\\nuniform mat4 to_icrs;\\nuniform mat4 to_galactic;\\nuniform mat4 inv_model;\\nuniform float czf;\\n\\nuniform float meridians[20];\\nuniform int num_meridians;\\nuniform float parallels[10];\\nuniform int num_parallels;\\n\\nuniform vec2 window_size;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\n\\nbool is_included_inside_projection(vec2 pos_clip_space) {\\n    float px2 = pos_clip_space.x * pos_clip_space.x;\\n    float py2 = pos_clip_space.y * pos_clip_space.y;\\n\\n    return (px2 * 0.25 + py2) <= 0.25;\\n}\\n\\n/// View to world space transformation\\n/// \\n/// This returns a normalized vector along its first 3 dimensions.\\n/// Its fourth component is set to 1.\\n/// \\n/// The Aitoff projection maps screen coordinates from [-pi; pi] x [-pi/2; pi/2]\\n/// \\n/// # Arguments\\n/// \\n/// * `x` - in normalized device coordinates between [-1; 1]\\n/// * `y` - in normalized device coordinates between [-1; 1]\\nvec3 clip2world_aitoff(vec2 pos_clip_space) {\\n    if(!is_included_inside_projection(pos_clip_space)) {\\n        discard;\\n    }\\n\\n    vec2 uv = vec2(pos_clip_space.x * PI * 0.5, pos_clip_space.y * PI);\\n    //da uv a lat/lon\\n    float c = length(uv);\\n\\n    float phi = asin(uv.y * sin(c) / c);\\n    float theta = atan(uv.x * sin(c), c * cos(c)) * 2.0;\\n\\n    vec3 world = vec3(\\n        sin(theta) * cos(phi),\\n        sin(phi),\\n        cos(theta) * cos(phi)\\n    );\\n    return world;\\n}\\n\\nfloat d_isolon(vec3 pos_model, float theta) {\\n    vec3 posmodel = pos_model;\\n    vec3 n = vec3(cos(theta), 0.0, -sin(theta));\\n    // Discard the (theta + PI) meridian\\n    vec3 e_xz = vec3(-n.z, 0.0, n.x);\\n    if (dot(posmodel, e_xz) < 0.0) {\\n        return 1e3;\\n    }\\n\\n    float d = abs(dot(n, posmodel));\\n\\n    vec3 h_model = normalize(posmodel - n*d);\\n    vec3 h_world = vec3(inv_model * to_icrs * vec4(h_model, 1.0));\\n    h_world = check_inversed_longitude(h_world);\\n\\n    // Project to screen x and h and compute the distance\\n    // between the two\\n    vec2 h_clip = world2clip_aitoff(h_world);\\n    \\n    return length(pos_clip - h_clip) * 2.0;\\n}\\nfloat d_isolat(vec3 pos_model, float delta) {\\n    vec3 posmodel = pos_model;\\n    float y = atan(posmodel.y, length(pos_model.xz));\\n    float d = abs(y - delta);\\n    return d;\\n}\\n\\nfloat grid_alpha(vec3 p) {\\n    float v = 1e10;\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float m = 0.0;\\n    float mdist = 10.0;\\n    for (int i = 0; i < 20; i++) {\\n        float tmp = meridians[i];\\n        if (tmp > PI) {\\n            tmp -= 2.0 * PI;\\n        }\\n        float d = abs(theta - tmp);\\n        if (d < mdist) {\\n            mdist = d;\\n            m = tmp;\\n        }\\n        if(i == num_meridians - 1) {\\n            break;\\n        }\\n    }\\n\\n    float par = 0.0;\\n    float pdist = 10.0;\\n    for (int i = 0; i < 10; i++) {\\n        float d = abs(delta - parallels[i]);\\n        if (d < pdist) {\\n            pdist = d;\\n            par = parallels[i];\\n        }\\n        if(i == num_parallels - 1) {\\n            break;\\n        }\\n    }\\n\\n    /*float a = 0.0;\\n    if (mdist < pdist) {\\n        a = d_isolon(p, m);\\n    } else {\\n        a = d_isolat(p, par);\\n    }\\n    v = min(a, v);*/\\n    v = min(d_isolon(p, m), v);\\n    v = min(d_isolat(p, par), v);\\n\\n    float eps = 3.0 * czf / window_size.x;\\n    return smoothstep(eps, 2.0*eps, v);\\n}\\n\\nvoid main() {\\n    vec4 transparency = vec4(0.0);\\n\\n    vec3 pos_world = clip2world_aitoff(pos_clip);\\n    pos_world = check_inversed_longitude(pos_world);\\n\\n    vec3 pos_model = vec3(to_galactic * model * vec4(pos_world, 1.0));\\n\\n    float alpha = grid_alpha(pos_model);\\n    vec4 color = mix(color, transparency, alpha);\\n    gl_FragColor = color;\\n}\"","module.exports = \"precision mediump float;\\n\\nvarying vec2 pos_clip;\\n\\nuniform vec4 color;\\nuniform mat4 model;\\nuniform mat4 inv_model;\\nuniform mat4 to_icrs;\\nuniform mat4 to_galactic;\\nuniform float czf;\\n\\nuniform float meridians[20];\\nuniform int num_meridians;\\nuniform float parallels[10];\\nuniform int num_parallels;\\n\\nuniform vec2 window_size;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nfloat sinc_positive(float x) {\\n    if (x > 1.0e-4) {\\n        return sin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        x = x*x;\\n        return 1.0 - x * (1.0 - x / 20.0) / 6.0;\\n    }\\n}\\n\\nvec3 clip2world_arc(vec2 pos_clip_space) {\\n    // r <= pi\\n    float x = pos_clip_space.x * PI;\\n    float y = pos_clip_space.y * PI;\\n    float r = length(vec2(x, y));\\n    if (r <= PI) {\\n        float z = cos(r);\\n        r = sinc_positive(r);\\n\\n        return vec3(x * r, y * r, z);\\n    }\\n    discard;\\n}\\n\\nfloat d_isolon(vec3 pos_model, float theta) {\\n    vec3 n = vec3(cos(theta), 0.0, -sin(theta));\\n    // Discard the (theta + PI) meridian\\n    vec3 e_xz = vec3(-n.z, 0.0, n.x);\\n    if (dot(pos_model, e_xz) < 0.0) {\\n        return 1e3;\\n    }\\n\\n    float d = abs(dot(n, pos_model));\\n\\n    vec3 h_model = normalize(pos_model - n*d);\\n    vec3 h_world = vec3(inv_model * to_icrs * vec4(h_model, 1.0));\\n\\n    // Project to screen x and h and compute the distance\\n    // between the two\\n    h_world = check_inversed_longitude(h_world);\\n    vec2 h_clip = world2clip_arc(h_world);\\n    \\n    return length(pos_clip - h_clip) * 2.0;\\n}\\nfloat d_isolat(vec3 pos_model, float delta) {\\n    float y = atan(pos_model.y, length(pos_model.xz));\\n    float d = abs(y - delta);\\n    return d;\\n}\\n\\nfloat grid_alpha(vec3 p) {\\n    float v = 1e10;\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float m = 0.0;\\n    float mdist = 10.0;\\n    for (int i = 0; i < 20; i++) {\\n        float tmp = meridians[i];\\n        if (tmp > PI) {\\n            tmp -= 2.0 * PI;\\n        }\\n        float d = abs(theta - tmp);\\n        if (d < mdist) {\\n            mdist = d;\\n            m = tmp;\\n        }\\n        if(i == num_meridians - 1) {\\n            break;\\n        }\\n    }\\n\\n    float par = 0.0;\\n    float pdist = 10.0;\\n    for (int i = 0; i < 10; i++) {\\n        float d = abs(delta - parallels[i]);\\n        if (d < pdist) {\\n            pdist = d;\\n            par = parallels[i];\\n        }\\n        if(i == num_parallels - 1) {\\n            break;\\n        }\\n    }\\n\\n    /*float a = 0.0;\\n    if (mdist < pdist) {\\n        a = d_isolon(p, m);\\n    } else {\\n        a = d_isolat(p, par);\\n    }\\n    v = min(a, v);*/\\n    v = min(d_isolon(p, m), v);\\n    v = min(d_isolat(p, par), v);\\n\\n    float eps = 3.0 * czf / window_size.x;\\n    return smoothstep(eps, 2.0*eps, v);\\n}\\n\\nvoid main() {\\n    vec4 transparency = vec4(0.0);\\n\\n    vec3 pos_world = clip2world_arc(pos_clip);\\n    pos_world = check_inversed_longitude(pos_world);\\n\\n    vec3 pos_model = vec3(to_galactic * model * vec4(pos_world, 1.0));\\n    float alpha = grid_alpha(pos_model);\\n    gl_FragColor = mix(color, transparency, alpha);\\n}\"","module.exports = \"precision mediump float;\\n\\nattribute vec2 position;\\n\\nvarying vec2 pos_clip;\\n\\nuniform vec2 ndc_to_clip;\\nuniform float czf;\\n\\nvoid main() {\\n    pos_clip = position * (ndc_to_clip * czf);\\n\\n    gl_Position = vec4(position, 0.0, 1.0);\\n}\"","module.exports = \"precision lowp float;\\n\\nuniform vec4 color;\\n\\nvoid main() {\\n    gl_FragColor = color;\\n}\"","module.exports = \"precision lowp float;\\n\\nattribute vec2 ndc_pos;\\n\\nvoid main() {\\n    gl_Position = vec4(ndc_pos, 0.0, 1.0);\\n}\"","module.exports = \"precision mediump float;\\n\\nvarying vec2 pos_clip;\\n\\nuniform vec4 color;\\nuniform mat4 model;\\nuniform mat4 inv_model;\\nuniform mat4 to_icrs;\\nuniform mat4 to_galactic;\\nuniform float czf;\\n\\nuniform float meridians[20];\\nuniform int num_meridians;\\nuniform float parallels[10];\\nuniform int num_parallels;\\n\\nuniform vec2 window_size;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nfloat sinh(float x) {\\n    return 0.5*(exp(x) - exp(-x));\\n}\\n\\nvec3 clip2world_mercator(vec2 p) {\\n    float theta = p.x * PI;\\n    float delta = atan(sinh(p.y)) * PI;\\n\\n    return vec3(sin(theta) * cos(delta), sin(delta), cos(theta) * cos(delta));\\n}\\n\\nfloat d_isolon(vec3 pos_model, float theta) {\\n    vec3 n = vec3(cos(theta), 0.0, -sin(theta));\\n    // Discard the (theta + PI) meridian\\n    vec3 e_xz = vec3(-n.z, 0.0, n.x);\\n    if (dot(pos_model, e_xz) < 0.0) {\\n        return 1e3;\\n    }\\n\\n    float d = abs(dot(n, pos_model));\\n\\n    vec3 h_model = normalize(pos_model - n*d);\\n    vec3 h_world = vec3(inv_model * to_icrs * vec4(h_model, 1.0));\\n    h_world = check_inversed_longitude(h_world);\\n\\n    // Project to screen x and h and compute the distance\\n    // between the two\\n    vec2 h_clip = world2clip_mercator(h_world);\\n    \\n    return length(pos_clip - h_clip) * 2.0;\\n}\\nfloat d_isolat(vec3 pos_model, float delta) {\\n    float y = atan(pos_model.y, length(pos_model.xz));\\n    float d = abs(y - delta);\\n    return d;\\n}\\n\\nfloat grid_alpha(vec3 p) {\\n    float v = 1e10;\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float m = 0.0;\\n    float mdist = 10.0;\\n    for (int i = 0; i < 20; i++) {\\n        float tmp = meridians[i];\\n        if (tmp > PI) {\\n            tmp -= 2.0 * PI;\\n        }\\n        float d = abs(theta - tmp);\\n        if (d < mdist) {\\n            mdist = d;\\n            m = tmp;\\n        }\\n        if(i == num_meridians - 1) {\\n            break;\\n        }\\n    }\\n\\n    float par = 0.0;\\n    float pdist = 10.0;\\n    for (int i = 0; i < 10; i++) {\\n        float d = abs(delta - parallels[i]);\\n        if (d < pdist) {\\n            pdist = d;\\n            par = parallels[i];\\n        }\\n        if(i == num_parallels - 1) {\\n            break;\\n        }\\n    }\\n\\n    /*float a = 0.0;\\n    if (mdist < pdist) {\\n        a = d_isolon(p, m);\\n    } else {\\n        a = d_isolat(p, par);\\n    }\\n    v = min(a, v);*/\\n    v = min(d_isolon(p, m), v);\\n    v = min(d_isolat(p, par), v);\\n\\n    float eps = 3.0 * czf / window_size.x;\\n    return smoothstep(eps, 2.0*eps, v);\\n}\\n\\nvoid main() {\\n    vec4 transparency = vec4(0.0);\\n\\n    vec3 pos_world = clip2world_mercator(pos_clip);\\n    pos_world = check_inversed_longitude(pos_world);\\n\\n    vec3 pos_model = vec3(to_galactic * model * vec4(pos_world, 1.0));\\n\\n    float alpha = grid_alpha(pos_model);\\n    gl_FragColor = mix(color, transparency, alpha);\\n}\"","module.exports = \"precision mediump float;\\n\\nvarying vec2 pos_clip;\\n\\nuniform vec4 color;\\nuniform mat4 model;\\nuniform mat4 inv_model;\\nuniform mat4 to_icrs;\\nuniform mat4 to_galactic;\\nuniform float czf;\\n\\nuniform float meridians[20];\\nuniform int num_meridians;\\nuniform float parallels[10];\\nuniform int num_parallels;\\n\\nuniform vec2 window_size;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nbool is_included_inside_projection(vec2 pos_clip_space) {\\n    float px2 = pos_clip_space.x * pos_clip_space.x;\\n    float py2 = pos_clip_space.y * pos_clip_space.y;\\n\\n    return (px2 * 0.25 + py2) <= 0.25;\\n}\\n\\n/// View to world space transformation\\n/// \\n/// This returns a normalized vector along its first 3 dimensions.\\n/// Its fourth component is set to 1.\\n/// \\n/// The Aitoff projection maps screen coordinates from [-pi; pi] x [-pi/2; pi/2]\\n/// \\n/// # Arguments\\n/// \\n/// * `x` - in normalized device coordinates between [-1; 1]\\n/// * `y` - in normalized device coordinates between [-1; 1]\\nvec3 clip2world_mollweide(vec2 pos_clip_space) {\\n    if (!is_included_inside_projection(pos_clip_space)) {\\n        discard;\\n    }\\n\\n    float y2 = pos_clip_space.y * pos_clip_space.y;\\n    float k = sqrt(1.0 - 4.0 * y2);\\n\\n    float theta = PI * pos_clip_space.x / k;\\n    float delta = asin((2.0 * asin(2.0 * pos_clip_space.y) + 4.0 * pos_clip_space.y * k) / PI);\\n    \\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    return vec3(sin(theta) * cos(delta), sin(delta), cos(theta) * cos(delta));\\n}\\n\\nfloat d_isolon(vec3 pos_model, float theta) {\\n    vec3 n = vec3(cos(theta), 0.0, -sin(theta));\\n    // Discard the (theta + PI) meridian\\n    vec3 e_xz = vec3(-n.z, 0.0, n.x);\\n    if (dot(pos_model, e_xz) < 0.0) {\\n        return 1e3;\\n    }\\n\\n    float d = abs(dot(n, pos_model));\\n\\n    vec3 h_model = normalize(pos_model - n*d);\\n    vec3 h_world = vec3(inv_model * to_icrs * vec4(h_model, 1.0));\\n    h_world = check_inversed_longitude(h_world);\\n\\n    // Project to screen x and h and compute the distance\\n    // between the two\\n    vec2 h_clip = world2clip_mollweide(h_world);\\n    \\n    return length(pos_clip - h_clip) * 2.0;\\n}\\nfloat d_isolat(vec3 pos_model, float delta) {\\n    float y = atan(pos_model.y, length(pos_model.xz));\\n    float d = abs(y - delta);\\n    return d;\\n}\\n\\nfloat grid_alpha(vec3 p) {\\n    float v = 1e10;\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float m = 0.0;\\n    float mdist = 10.0;\\n    for (int i = 0; i < 20; i++) {\\n        float tmp = meridians[i];\\n        if (tmp > PI) {\\n            tmp -= 2.0 * PI;\\n        }\\n        float d = abs(theta - tmp);\\n        if (d < mdist) {\\n            mdist = d;\\n            m = tmp;\\n        }\\n        if(i == num_meridians - 1) {\\n            break;\\n        }\\n    }\\n\\n    float par = 0.0;\\n    float pdist = 10.0;\\n    for (int i = 0; i < 10; i++) {\\n        float d = abs(delta - parallels[i]);\\n        if (d < pdist) {\\n            pdist = d;\\n            par = parallels[i];\\n        }\\n        if(i == num_parallels - 1) {\\n            break;\\n        }\\n    }\\n\\n    /*float a = 0.0;\\n    if (mdist < pdist) {\\n        a = d_isolon(p, m);\\n    } else {\\n        a = d_isolat(p, par);\\n    }\\n    v = min(a, v);*/\\n    v = min(d_isolon(p, m), v);\\n    v = min(d_isolat(p, par), v);\\n\\n    float eps = 3.0 * czf / window_size.x;\\n    return smoothstep(eps, 2.0*eps, v);\\n}\\n\\nvoid main() {\\n    vec4 transparency = vec4(0.0);\\n\\n    vec3 pos_world = clip2world_mollweide(pos_clip);\\n    pos_world = check_inversed_longitude(pos_world);\\n\\n    vec3 pos_model = vec3(to_galactic * model * vec4(pos_world, 1.0));\\n\\n    float alpha = grid_alpha(pos_model);\\n    gl_FragColor = mix(color, transparency, alpha);\\n}\"","module.exports = \"precision mediump float;\\n\\nvarying vec2 pos_clip;\\n\\nuniform vec4 color;\\nuniform mat4 model;\\nuniform mat4 inv_model;\\nuniform mat4 to_icrs;\\nuniform mat4 to_galactic;\\nuniform float czf;\\n\\nuniform float meridians[20];\\nuniform int num_meridians;\\nuniform float parallels[10];\\nuniform int num_parallels;\\n\\nuniform vec2 window_size;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvec3 clip2world_orthographic(vec2 pos_clip_space) {\\n    float z = 1.0 - dot(pos_clip_space, pos_clip_space);\\n    if (z > 0.0) {\\n        return vec3(pos_clip_space.x, pos_clip_space.y, sqrt(z));\\n    } else {\\n        discard;\\n    }\\n}\\n\\nfloat d_isolon(vec3 pos_model, float theta) {\\n    vec3 n = vec3(cos(theta), 0.0, -sin(theta));\\n    // Discard the (theta + PI) meridian\\n    vec3 e_xz = vec3(-n.z, 0.0, n.x);\\n    if (dot(pos_model, e_xz) < 0.0) {\\n        return 1e3;\\n    }\\n\\n    float d = abs(dot(n, pos_model));\\n\\n    vec3 h_model = normalize(pos_model - n*d);\\n    vec3 h_world = vec3(inv_model * to_icrs * vec4(h_model, 1.0));\\n    h_world = check_inversed_longitude(h_world);\\n\\n    // Project to screen x and h and compute the distance\\n    // between the two\\n    vec2 h_clip = world2clip_orthographic(h_world);\\n    \\n    return length(pos_clip - h_clip) * 2.0;\\n}\\nfloat d_isolat(vec3 pos_model, float delta) {\\n    float y = atan(pos_model.y, length(pos_model.xz));\\n    float d = abs(y - delta);\\n    return d*2.0;\\n}\\n\\nfloat grid_alpha(vec3 p) {\\n    float v = 1e10;\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float m = 0.0;\\n    float mdist = 10.0;\\n    for (int i = 0; i < 20; i++) {\\n        float tmp = meridians[i];\\n        if (tmp > PI) {\\n            tmp -= 2.0 * PI;\\n        }\\n        float d = abs(theta - tmp);\\n        if (d < mdist) {\\n            mdist = d;\\n            m = tmp;\\n        }\\n\\n        if(i == num_meridians - 1) {\\n            break;\\n        }\\n    }\\n\\n    float par = 0.0;\\n    float pdist = 10.0;\\n    for (int i = 0; i < 10; i++) {\\n        float d = abs(delta - parallels[i]);\\n        if (d < pdist) {\\n            pdist = d;\\n            par = parallels[i];\\n        }\\n\\n        if(i == num_parallels - 1) {\\n            break;\\n        }\\n    }\\n\\n    /*float a = 0.0;\\n    if (mdist < pdist) {\\n        a = d_isolon(p, m);\\n    } else {\\n        a = d_isolat(p, par);\\n    }\\n    v = min(a, v);*/\\n    v = min(d_isolon(p, m), v);\\n    v = min(d_isolat(p, par), v);\\n\\n    float eps = 3.0 * czf / window_size.x;\\n    return smoothstep(eps, 2.0*eps, v);\\n}\\n\\nvoid main() {\\n    vec4 transparency = vec4(0.0);\\n\\n    vec3 pos_world = clip2world_orthographic(pos_clip);\\n    pos_world = check_inversed_longitude(pos_world);\\n\\n    vec3 pos_model = vec3(to_galactic * model * vec4(pos_world, 1.0));\\n\\n    float alpha = grid_alpha(pos_model);\\n    gl_FragColor = mix(color, transparency, alpha);\\n}\"","module.exports = \"precision mediump float;\\n\\nvarying vec2 pos_clip;\\n\\nuniform vec4 color;\\nuniform mat4 model;\\nuniform mat4 inv_model;\\nuniform mat4 to_icrs;\\nuniform mat4 to_galactic;\\nuniform float czf;\\n\\nuniform float meridians[20];\\nuniform int num_meridians;\\nuniform float parallels[10];\\nuniform int num_parallels;\\n\\nuniform vec2 window_size;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\n/// View to world space transformation\\n/// \\n/// This returns a normalized vector along its first 3 dimensions.\\n/// Its fourth component is set to 1.\\n/// \\n/// The Aitoff projection maps screen coordinates from [-pi; pi] x [-pi/2; pi/2]\\n/// \\n/// # Arguments\\n/// \\n/// * `x` - in normalized device coordinates between [-1; 1]\\n/// * `y` - in normalized device coordinates between [-1; 1]\\nvec3 clip2world_gnomonic(vec2 pos_clip_space) {\\n    float x_2d = pos_clip_space.x * PI;\\n    float y_2d = pos_clip_space.y * PI;\\n    float r = x_2d * x_2d + y_2d * y_2d;\\n\\n    float z = sqrt(1.0 + r);\\n    return vec3(z * x_2d, z * y_2d, z);\\n}\\n\\nfloat d_isolon(vec3 pos_model, float theta) {\\n    vec3 n = vec3(cos(theta), 0.0, -sin(theta));\\n    // Discard the (theta + PI) meridian\\n    vec3 e_xz = vec3(-n.z, 0.0, n.x);\\n    if (dot(pos_model, e_xz) < 0.0) {\\n        return 1e3;\\n    }\\n\\n    float d = abs(dot(n, pos_model));\\n\\n    vec3 h_model = normalize(pos_model - n*d);\\n    vec3 h_world = vec3(inv_model * to_icrs * vec4(h_model, 1.0));\\n    h_world = check_inversed_longitude(h_world);\\n\\n    // Project to screen x and h and compute the distance\\n    // between the two\\n    vec2 h_clip = world2clip_gnomonic(h_world);\\n    \\n    return length(pos_clip - h_clip) * 2.0;\\n}\\nfloat d_isolat(vec3 pos_model, float delta) {\\n    float y = atan(pos_model.y, length(pos_model.xz));\\n    float d = abs(y - delta);\\n    return d;\\n}\\n\\nfloat grid_alpha(vec3 p) {\\n    float v = 1e10;\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float m = 0.0;\\n    float mdist = 10.0;\\n    for (int i = 0; i < 20; i++) {\\n        float tmp = meridians[i];\\n        if (tmp > PI) {\\n            tmp -= 2.0 * PI;\\n        }\\n        float d = abs(theta - tmp);\\n        if (d < mdist) {\\n            mdist = d;\\n            m = tmp;\\n        }\\n        if(i == num_meridians - 1) {\\n            break;\\n        }\\n    }\\n\\n    float par = 0.0;\\n    float pdist = 10.0;\\n    for (int i = 0; i < 10; i++) {\\n        float d = abs(delta - parallels[i]);\\n        if (d < pdist) {\\n            pdist = d;\\n            par = parallels[i];\\n        }\\n        \\n        if(i == num_parallels - 1) {\\n            break;\\n        }\\n    }\\n\\n    /*float a = 0.0;\\n    if (mdist < pdist) {\\n        a = d_isolon(p, m);\\n    } else {\\n        a = d_isolat(p, par);\\n    }\\n    v = min(a, v);*/\\n    v = min(d_isolon(p, m), v);\\n    v = min(d_isolat(p, par), v);\\n\\n    float eps = 3.0 * czf / window_size.x;\\n    return smoothstep(eps, 2.0*eps, v);\\n}\\n\\nvoid main() {\\n    vec4 transparency = vec4(0.0);\\n\\n    vec3 pos_world = clip2world_gnomonic(pos_clip);\\n    pos_world = check_inversed_longitude(pos_world);\\n\\n    vec3 pos_model = normalize(vec3(to_galactic * model * vec4(pos_world, 1.0)));\\n    float alpha = grid_alpha(pos_model);\\n    gl_FragColor = mix(color, transparency, alpha);\\n}\"","module.exports = \"precision mediump float;\\nprecision mediump int;\\n\\nattribute vec2 ndc_pos;\\nattribute vec3 uv_start;\\nattribute vec3 uv_end;\\nattribute float time_tile_received;\\nattribute float m0;\\nattribute float m1;\\n\\nvarying vec3 frag_uv_start;\\nvarying vec3 frag_uv_end;\\nvarying float frag_blending_factor;\\nvarying float m_start;\\nvarying float m_end;\\n\\nuniform mat4 inv_model;\\nuniform vec2 ndc_to_clip;\\n\\n// current time in ms\\nuniform float current_time;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    /*\\n    vec3 world_pos = vec3(inv_model * vec4(position, 1.f));\\n    world_pos = check_inversed_longitude(world_pos);\\n\\n    vec2 ndc_pos = world2clip_aitoff(world_pos) / (ndc_to_clip * czf);\\n    */\\n    gl_Position = vec4(ndc_pos, 0.0, 1.0);\\n\\n    frag_uv_start = uv_start;\\n    frag_uv_end = uv_end;\\n\\n    frag_blending_factor = min((current_time - time_tile_received) / 500.0, 1.0);\\n    m_start = m0;\\n    m_end = m1;\\n}\"","module.exports = \"precision mediump float;\\nprecision mediump int;\\n\\nattribute vec2 ndc_pos;\\nattribute vec3 uv_start;\\nattribute vec3 uv_end;\\nattribute float time_tile_received;\\nattribute float m0;\\nattribute float m1;\\n\\nvarying vec3 frag_uv_start;\\nvarying vec3 frag_uv_end;\\nvarying float frag_blending_factor;\\nvarying float m_start;\\nvarying float m_end;\\n\\nuniform mat4 inv_model;\\nuniform vec2 ndc_to_clip;\\n\\n// current time in ms\\nuniform float current_time;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    /*\\n    vec3 world_pos = vec3(inv_model * vec4(position, 1.f));\\n    world_pos = check_inversed_longitude(world_pos);\\n\\n    vec2 ndc_pos = world2clip_arc(world_pos) / (ndc_to_clip * czf);\\n    */\\n    gl_Position = vec4(ndc_pos, 0.0, 1.0);\\n\\n    frag_uv_start = uv_start;\\n    frag_uv_end = uv_end;\\n\\n    frag_blending_factor = min((current_time - time_tile_received) / 500.0, 1.0);\\n    m_start = m0;\\n    m_end = m1;\\n}\"","module.exports = \"precision mediump float;\\nprecision mediump sampler2D;\\nprecision mediump int;\\n\\nvarying vec3 frag_uv_start;\\nvarying vec3 frag_uv_end;\\nvarying float frag_blending_factor;\\nvarying float m_start;\\nvarying float m_end;\\n\\nuniform float opacity;\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform sampler2D tex1;\\nuniform sampler2D tex2;\\nuniform sampler2D tex3;\\n\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture2D(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nvec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture2D(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture2D(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture2D(tex3, uv.xy);\\n    } else {\\n        return vec4(0.0, 1.0, 1.0, 1.0);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_color_from_texture(vec3 UV) {\\n    return get_pixels(UV);\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    vec3 uv = UV;\\n    // FITS data pixels are reversed along the y axis\\n    if (tex_storing_fits == 1) {\\n        uv = reverse_uv(uv);\\n    }\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    vec3 uv = UV;\\n    // FITS data pixels are reversed along the y axis\\n    if (tex_storing_fits == 1) {\\n        uv = reverse_uv(uv);\\n    }\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nvoid main() {\\n    vec4 color_start = get_color_from_texture(frag_uv_start);\\n    vec4 color_end = get_color_from_texture(frag_uv_end);\\n\\n    vec4 out_frag_color = mix(color_start, color_end, frag_blending_factor);\\n    out_frag_color.a = opacity * out_frag_color.a;\\n\\n    gl_FragColor = out_frag_color;\\n}\"","module.exports = \"precision mediump float;\\nprecision mediump int;\\n\\nattribute vec2 ndc_pos;\\nattribute vec3 uv_start;\\nattribute vec3 uv_end;\\nattribute float time_tile_received;\\nattribute float m0;\\nattribute float m1;\\n\\nvarying vec3 frag_uv_start;\\nvarying vec3 frag_uv_end;\\nvarying float frag_blending_factor;\\nvarying float m_start;\\nvarying float m_end;\\n\\nuniform mat4 inv_model;\\nuniform vec2 ndc_to_clip;\\n\\n// current time in ms\\nuniform float current_time;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    /*\\n    vec3 world_pos = vec3(inv_model * vec4(position, 1.f));\\n    world_pos = check_inversed_longitude(world_pos);\\n\\n    vec2 ndc_pos = world2clip_gnomonic(world_pos) / (ndc_to_clip * czf);\\n    */\\n    gl_Position = vec4(ndc_pos, 0.0, 1.0);\\n\\n    frag_uv_start = uv_start;\\n    frag_uv_end = uv_end;\\n\\n    frag_blending_factor = min((current_time - time_tile_received) / 500.0, 1.0);\\n    m_start = m0;\\n    m_end = m1;\\n}\"","module.exports = \"precision mediump float;\\nprecision mediump sampler2D;\\nprecision mediump int;\\n\\n\\nvarying vec3 frag_uv_start;\\nvarying vec3 frag_uv_end;\\nvarying float frag_blending_factor;\\nvarying float m_start;\\nvarying float m_end;\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform sampler2D tex1;\\nuniform sampler2D tex2;\\nuniform sampler2D tex3;\\n\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture2D(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nvec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture2D(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture2D(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture2D(tex3, uv.xy);\\n    } else {\\n        return vec4(0.0, 1.0, 1.0, 1.0);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_color_from_texture(vec3 UV) {\\n    return get_pixels(UV);\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    vec3 uv = UV;\\n    // FITS data pixels are reversed along the y axis\\n    if (tex_storing_fits == 1) {\\n        uv = reverse_uv(uv);\\n    }\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    vec3 uv = UV;\\n    // FITS data pixels are reversed along the y axis\\n    if (tex_storing_fits == 1) {\\n        uv = reverse_uv(uv);\\n    }\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform float opacity;\\n\\nvec4 get_color(vec3 uv, float empty) {\\n    vec4 color = mix(get_color_from_grayscale_texture(uv), vec4(0.0), empty);\\n    return color;\\n}\\n\\nvoid main() {\\n    vec4 color_start = get_color(frag_uv_start, m_start);\\n    vec4 color_end = get_color(frag_uv_end, m_end);\\n\\n    vec4 out_frag_color = mix(color_start, color_end, frag_blending_factor);\\n    out_frag_color.a = out_frag_color.a * opacity;\\n\\n    gl_FragColor = out_frag_color;\\n}\\n\\n\"","module.exports = \"precision mediump float;\\nprecision mediump sampler2D;\\nprecision mediump int;\\n\\nvarying vec3 frag_uv_start;\\nvarying vec3 frag_uv_end;\\nvarying float frag_blending_factor;\\nvarying float m_start;\\nvarying float m_end;\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform sampler2D tex1;\\nuniform sampler2D tex2;\\nuniform sampler2D tex3;\\n\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture2D(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nvec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture2D(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture2D(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture2D(tex3, uv.xy);\\n    } else {\\n        return vec4(0.0, 1.0, 1.0, 1.0);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_color_from_texture(vec3 UV) {\\n    return get_pixels(UV);\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    vec3 uv = UV;\\n    // FITS data pixels are reversed along the y axis\\n    if (tex_storing_fits == 1) {\\n        uv = reverse_uv(uv);\\n    }\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    vec3 uv = UV;\\n    // FITS data pixels are reversed along the y axis\\n    if (tex_storing_fits == 1) {\\n        uv = reverse_uv(uv);\\n    }\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform float opacity;\\n\\nvec4 get_color(vec3 uv, float empty) {\\n    vec4 c = get_colormap_from_grayscale_texture(uv);\\n    vec4 color = mix(c, vec4(0.0), empty);\\n    return color;\\n}\\n\\nvoid main() {\\n    vec4 color_start = get_color(frag_uv_start, m_start);\\n    vec4 color_end = get_color(frag_uv_end, m_end);\\n\\n    vec4 out_frag_color = mix(color_start, color_end, frag_blending_factor);\\n    out_frag_color.a = out_frag_color.a * opacity;\\n\\n    gl_FragColor = out_frag_color;\\n}\"","module.exports = \"precision mediump float;\\nprecision mediump int;\\n\\nattribute vec2 ndc_pos;\\nattribute vec3 uv_start;\\nattribute vec3 uv_end;\\nattribute float time_tile_received;\\nattribute float m0;\\nattribute float m1;\\n\\nvarying vec3 frag_uv_start;\\nvarying vec3 frag_uv_end;\\nvarying float frag_blending_factor;\\nvarying float m_start;\\nvarying float m_end;\\n\\nuniform mat4 inv_model;\\nuniform vec2 ndc_to_clip;\\n\\n// current time in ms\\nuniform float current_time;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    /*\\n    vec3 world_pos = vec3(inv_model * vec4(position, 1.f));\\n    world_pos = check_inversed_longitude(world_pos);\\n\\n    vec2 ndc_pos = world2clip_mercator(world_pos) / (ndc_to_clip * czf);\\n    */\\n    gl_Position = vec4(ndc_pos, 0.0, 1.0);\\n\\n    frag_uv_start = uv_start;\\n    frag_uv_end = uv_end;\\n\\n    frag_blending_factor = min((current_time - time_tile_received) / 500.0, 1.0);\\n    m_start = m0;\\n    m_end = m1;\\n}\"","module.exports = \"precision mediump float;\\nprecision mediump int;\\n\\nattribute vec2 ndc_pos;\\nattribute vec3 uv_start;\\nattribute vec3 uv_end;\\nattribute float time_tile_received;\\nattribute float m0;\\nattribute float m1;\\n\\nvarying vec3 frag_uv_start;\\nvarying vec3 frag_uv_end;\\nvarying float frag_blending_factor;\\nvarying float m_start;\\nvarying float m_end;\\n\\nuniform mat4 inv_model;\\nuniform vec2 ndc_to_clip;\\n\\n// current time in ms\\nuniform float current_time;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    /*\\n    vec3 world_pos = vec3(inv_model * vec4(position, 1.f));\\n    world_pos = check_inversed_longitude(world_pos);\\n\\n    vec2 ndc_pos = world2clip_mollweide(world_pos) / (ndc_to_clip * czf);\\n    */\\n    gl_Position = vec4(ndc_pos, 0.0, 1.0);\\n\\n    frag_uv_start = uv_start;\\n    frag_uv_end = uv_end;\\n\\n    frag_blending_factor = min((current_time - time_tile_received) / 500.0, 1.0);\\n    m_start = m0;\\n    m_end = m1;\\n}\"","module.exports = \"precision mediump float;\\nprecision mediump int;\\n\\nattribute vec2 ndc_pos;\\nattribute vec3 uv_start;\\nattribute vec3 uv_end;\\nattribute float time_tile_received;\\nattribute float m0;\\nattribute float m1;\\n\\nvarying vec3 frag_uv_start;\\nvarying vec3 frag_uv_end;\\nvarying float frag_blending_factor;\\nvarying float m_start;\\nvarying float m_end;\\n\\nuniform mat4 inv_model;\\nuniform vec2 ndc_to_clip;\\n\\n// current time in ms\\nuniform float current_time;\\n\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.0;\\n    if (alpha > 1e-3) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.0 * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nconst int max_iter = 10;\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    for (int k = 0; k < max_iter; k++) {\\n        phi = phi - f / (1.0 + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        if (abs(f) <= 1e-6) {\\n            break;\\n        }\\n    }\\n\\n    phi = phi * 0.5;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5 * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    /*\\n    vec3 world_pos = vec3(inv_model * vec4(position, 1.f));\\n    world_pos = check_inversed_longitude(world_pos);\\n\\n    vec2 ndc_pos = world2clip_orthographic(world_pos) / (ndc_to_clip * czf);\\n    */\\n    gl_Position = vec4(ndc_pos, 0.0, 1.0);\\n\\n    frag_uv_start = uv_start;\\n    frag_uv_end = uv_end;\\n\\n    frag_blending_factor = min((current_time - time_tile_received) / 500.0, 1.0);\\n    m_start = m0;\\n    m_end = m1;\\n}\"","module.exports = \"precision highp float;\\nprecision highp sampler2D;\\nprecision highp int;\\n\\nvarying vec3 out_vert_pos;\\nvarying vec2 out_clip_pos;\\n\\nuniform int user_action;\\n\\nstruct Tile {\\n    int uniq; // Healpix cell\\n    int texture_idx; // Index in the texture buffer\\n    float start_time; // Absolute time that the load has been done in ms\\n    float empty;\\n};\\n\\nuniform int current_depth;\\nuniform Tile textures_tiles[192];\\nuniform int num_tiles;\\n\\nuniform float current_time; // current time in ms\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform sampler2D tex1;\\nuniform sampler2D tex2;\\nuniform sampler2D tex3;\\n\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture2D(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nvec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture2D(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture2D(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture2D(tex3, uv.xy);\\n    } else {\\n        return vec4(0.0, 1.0, 1.0, 1.0);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_color_from_texture(vec3 UV) {\\n    return get_pixels(UV);\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    vec3 uv = UV;\\n    // FITS data pixels are reversed along the y axis\\n    if (tex_storing_fits == 1) {\\n        uv = reverse_uv(uv);\\n    }\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    vec3 uv = UV;\\n    // FITS data pixels are reversed along the y axis\\n    if (tex_storing_fits == 1) {\\n        uv = reverse_uv(uv);\\n    }\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\nconst float TWICE_PI = 6.28318530718;\\nconst float PI = 3.141592653589793;\\n\\nstruct HashDxDy {\\n    int idx;\\n    float dx;\\n    float dy;\\n};\\n\\nuniform sampler2D u_ang2pixd;\\nHashDxDy hash_with_dxdy(vec2 radec) {\\n    vec2 uv = vec2(radec.x/TWICE_PI, radec.y/PI) + 0.5;\\n    vec3 v = texture2D(u_ang2pixd, uv).rgb;\\n\\n    return HashDxDy(\\n        int(v.x),\\n        v.y,\\n        v.z\\n    );\\n}\\n\\nuniform float opacity;\\n\\nTile get_tile(int idx) {\\n    for(int i = 0; i < 12; i++) {\\n        if( i == idx ) {\\n            return textures_tiles[i];\\n        }\\n    }\\n}\\n\\nTile binary_search_tile(int uniq) {\\n    int l = 0;\\n    int r = 11;\\n    for (int v = 0; v <= 5; v++) {\\n        int mid = (l + r) / 2;\\n\\n        Tile tile = get_tile(mid);\\n        if(tile.uniq == uniq) {\\n            return tile;\\n        } else if(tile.uniq < uniq) {\\n            l = mid + 1;\\n        } else {\\n            r = mid - 1;\\n        }\\n\\n        // before exiting the loop\\n        if (l >= r) {\\n            return get_tile(l);\\n        }\\n    }\\n}\\n\\nvec4 get_tile_color(vec3 pos) {\\n    float delta = asin(pos.y);\\n    float theta = atan(pos.x, pos.z);\\n    HashDxDy result = hash_with_dxdy(vec2(theta, delta));\\n\\n    int idx = result.idx;\\n    vec2 uv = vec2(result.dy, result.dx);\\n    //return vec4(uv, 1.0, 1.0);\\n\\n    int uniq = 16 + idx; \\n    Tile tile = binary_search_tile(uniq);\\n\\n    int idx_texture = tile.texture_idx / 64;\\n    int off = tile.texture_idx - idx_texture * 64;\\n\\n    int idx_row = off / 8; // in [0; 7]\\n    int idx_col = off - idx_row * 8; // in [0; 7]\\n\\n    vec2 offset = (vec2(idx_col, idx_row) + uv) * 0.125;\\n    vec3 UV = vec3(offset.x, offset.y, 0.0);\\n    \\n    vec4 color = get_color_from_texture(UV);\\n    color.a *= (1.0 - float(tile.empty));\\n    return color;\\n}\\n\\nuniform sampler2D position_tex;\\nuniform mat4 model;\\nvoid main() {\\n    //if(current_depth < 2) {\\n    vec2 uv = out_clip_pos * 0.5 + 0.5;\\n    vec3 n = texture2D(position_tex, uv).rgb;\\n    /*} else {\\n        float x = out_clip_pos.x;\\n        float y = out_clip_pos.y;\\n        float x2 = x*x;\\n        float y2 = y*y;\\n        float x4 = x2*x2;\\n        float y4 = y2*y2;\\n\\n        n = vec3(\\n            -x,\\n            y,\\n            -0.5*x2 - 0.5*y2 + 1.0\\n        );\\n    }*/\\n\\n    vec3 frag_pos = vec3(model * vec4(n, 1.0));\\n\\n    // Get the HEALPix cell idx and the uv in the texture\\n    vec4 c = get_tile_color(frag_pos);\\n    gl_FragColor = vec4(c.rgb, c.a * opacity);\\n}\"","module.exports = \"precision mediump float;\\nprecision mediump sampler2D;\\nprecision mediump int;\\n\\nvarying vec3 out_vert_pos;\\nvarying vec2 out_clip_pos;\\n\\nuniform int user_action;\\n\\nstruct Tile {\\n    int uniq; // Healpix cell\\n    int texture_idx; // Index in the texture buffer\\n    float start_time; // Absolute time that the load has been done in ms\\n    float empty;\\n};\\n\\nuniform int current_depth;\\nuniform Tile textures_tiles[192];\\nuniform int num_tiles;\\n\\nuniform float current_time; // current time in ms\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform sampler2D tex1;\\nuniform sampler2D tex2;\\nuniform sampler2D tex3;\\n\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture2D(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nvec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture2D(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture2D(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture2D(tex3, uv.xy);\\n    } else {\\n        return vec4(0.0, 1.0, 1.0, 1.0);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_color_from_texture(vec3 UV) {\\n    return get_pixels(UV);\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    vec3 uv = UV;\\n    // FITS data pixels are reversed along the y axis\\n    if (tex_storing_fits == 1) {\\n        uv = reverse_uv(uv);\\n    }\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    vec3 uv = UV;\\n    // FITS data pixels are reversed along the y axis\\n    if (tex_storing_fits == 1) {\\n        uv = reverse_uv(uv);\\n    }\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\nconst float TWICE_PI = 6.28318530718;\\nconst float PI = 3.141592653589793;\\n\\nstruct HashDxDy {\\n    int idx;\\n    float dx;\\n    float dy;\\n};\\n\\nuniform sampler2D u_ang2pixd;\\nHashDxDy hash_with_dxdy(vec2 radec) {\\n    vec2 uv = vec2(radec.x/TWICE_PI, radec.y/PI) + 0.5;\\n    vec3 v = texture2D(u_ang2pixd, uv).rgb;\\n\\n    return HashDxDy(\\n        int(v.x),\\n        v.y,\\n        v.z\\n    );\\n}\\n\\nuniform float opacity;\\n\\nTile get_tile(int idx) {\\n    for(int i = 0; i < 12; i++) {\\n        if( i == idx ) {\\n            return textures_tiles[i];\\n        }\\n    }\\n}\\n\\nTile binary_search_tile(int uniq) {\\n    int l = 0;\\n    int r = 11;\\n    for (int v = 0; v <= 5; v++) {\\n        int mid = (l + r) / 2;\\n\\n        Tile tile = get_tile(mid);\\n        if(tile.uniq == uniq) {\\n            return tile;\\n        } else if(tile.uniq < uniq) {\\n            l = mid + 1;\\n        } else {\\n            r = mid - 1;\\n        }\\n\\n        // before exiting the loop\\n        if (l >= r) {\\n            return get_tile(l);\\n        }\\n    }\\n}\\n\\nvec4 get_tile_color(vec3 pos) {\\n    float delta = asin(pos.y);\\n    float theta = atan(pos.x, pos.z);\\n    HashDxDy result = hash_with_dxdy(vec2(theta, delta));\\n\\n    int idx = result.idx;\\n    vec2 uv = vec2(clamp(result.dy, 0.0, 1.0), result.dx);\\n    int uniq = 16 + idx; \\n    Tile tile = binary_search_tile(uniq);\\n\\n    int idx_texture = tile.texture_idx / 64;\\n    int off = tile.texture_idx - idx_texture * 64;\\n\\n    int idx_row = off / 8; // in [0; 7]\\n    int idx_col = off - idx_row * 8; // in [0; 7]\\n\\n    vec2 offset = (vec2(float(idx_col), float(idx_row)) + uv)*0.125;\\n    vec3 UV = vec3(offset, float(idx_texture));\\n\\n    vec4 color = get_color_from_grayscale_texture(UV);\\n    color.a *= (1.0 - float(tile.empty));\\n    return color;\\n}\\n\\nuniform sampler2D position_tex;\\nuniform mat4 model;\\nvoid main() {\\n    vec2 uv = out_clip_pos * 0.5 + 0.5;\\n    vec3 n = texture2D(position_tex, uv).rgb;\\n\\n    vec3 frag_pos = vec3(model * vec4(n, 1.0));\\n\\n    vec4 c = get_tile_color(frag_pos);\\n    c.a = c.a * opacity;\\n    gl_FragColor = c;\\n}\"","module.exports = \"precision mediump float;\\nprecision mediump sampler2D;\\nprecision mediump int;\\n\\nvarying vec3 out_vert_pos;\\nvarying vec2 out_clip_pos;\\n\\nuniform int user_action;\\n\\nstruct Tile {\\n    int uniq; // Healpix cell\\n    int texture_idx; // Index in the texture buffer\\n    float start_time; // Absolute time that the load has been done in ms\\n    float empty;\\n};\\n\\nuniform int current_depth;\\nuniform Tile textures_tiles[192];\\nuniform int num_tiles;\\n\\nuniform float current_time; // current time in ms\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform sampler2D tex1;\\nuniform sampler2D tex2;\\nuniform sampler2D tex3;\\n\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture2D(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh(float x) {\\n    return log(x + sqrt(x*x + 1.0));\\n}\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nvec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture2D(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture2D(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture2D(tex3, uv.xy);\\n    } else {\\n        return vec4(0.0, 1.0, 1.0, 1.0);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_color_from_texture(vec3 UV) {\\n    return get_pixels(UV);\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    vec3 uv = UV;\\n    // FITS data pixels are reversed along the y axis\\n    if (tex_storing_fits == 1) {\\n        uv = reverse_uv(uv);\\n    }\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    vec3 uv = UV;\\n    // FITS data pixels are reversed along the y axis\\n    if (tex_storing_fits == 1) {\\n        uv = reverse_uv(uv);\\n    }\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\nconst float TWICE_PI = 6.28318530718;\\nconst float PI = 3.141592653589793;\\n\\nstruct HashDxDy {\\n    int idx;\\n    float dx;\\n    float dy;\\n};\\n\\nuniform sampler2D u_ang2pixd;\\nHashDxDy hash_with_dxdy(vec2 radec) {\\n    vec2 uv = vec2(radec.x/TWICE_PI, radec.y/PI) + 0.5;\\n    vec3 v = texture2D(u_ang2pixd, uv).rgb;\\n\\n    return HashDxDy(\\n        int(v.x),\\n        v.y,\\n        v.z\\n    );\\n}\\n\\nuniform float opacity;\\n\\nTile get_tile(int idx) {\\n    for(int i = 0; i < 12; i++) {\\n        if( i == idx ) {\\n            return textures_tiles[i];\\n        }\\n    }\\n}\\n\\nTile binary_search_tile(int uniq) {\\n    int l = 0;\\n    int r = 11;\\n    for (int v = 0; v <= 5; v++) {\\n        int mid = (l + r) / 2;\\n\\n        Tile tile = get_tile(mid);\\n        if(tile.uniq == uniq) {\\n            return tile;\\n        } else if(tile.uniq < uniq) {\\n            l = mid + 1;\\n        } else {\\n            r = mid - 1;\\n        }\\n\\n        // before exiting the loop\\n        if (l >= r) {\\n            return get_tile(l);\\n        }\\n    }\\n}\\n\\nvec4 get_tile_color(vec3 pos) {\\n    float delta = asin(pos.y);\\n    float theta = atan(pos.x, pos.z);\\n    HashDxDy result = hash_with_dxdy(vec2(theta, delta));\\n\\n    int idx = result.idx;\\n    vec2 uv = vec2(clamp(result.dy, 0.0, 1.0), result.dx);\\n    int uniq = 16 + idx; \\n    Tile tile = binary_search_tile(uniq);\\n\\n    int idx_texture = tile.texture_idx / 64;\\n    int off = tile.texture_idx - idx_texture * 64;\\n\\n    int idx_row = off / 8; // in [0; 7]\\n    int idx_col = off - idx_row * 8; // in [0; 7]\\n\\n    vec2 offset = (vec2(float(idx_col), float(idx_row)) + uv)*0.125;\\n    vec3 UV = vec3(offset, float(idx_texture));\\n\\n    vec4 c = get_colormap_from_grayscale_texture(UV);\\n    // handle empty tiles\\n    vec4 color = mix(c, vec4(0.0), tile.empty);\\n    return color;\\n}\\n\\nuniform sampler2D position_tex;\\nuniform mat4 model;\\nvoid main() {\\n    vec2 uv = out_clip_pos * 0.5 + 0.5;\\n    vec3 n = texture2D(position_tex, uv).rgb;\\n\\n    vec3 frag_pos = vec3(model * vec4(n, 1.0));\\n\\n    vec4 c = get_tile_color(frag_pos);\\n    c.a = c.a * opacity;\\n\\n    gl_FragColor = c;\\n}\"","module.exports = \"precision highp float;\\nprecision highp int;\\n\\nattribute vec2 pos_clip_space;\\nvarying vec2 out_clip_pos;\\n\\nuniform vec2 ndc_to_clip;\\nuniform float czf;\\n\\nvoid main() {\\n    gl_Position = vec4(pos_clip_space / (ndc_to_clip * czf), 0.0, 1.0);\\n    out_clip_pos = pos_clip_space;\\n}\"","module.exports = \"#version 300 es\\nprecision lowp float;\\nlayout (location = 0) in vec2 offset;\\nlayout (location = 1) in vec2 uv;\\n\\nlayout (location = 2) in vec3 center;\\nlayout (location = 3) in vec2 center_lonlat;\\n\\nuniform float current_time;\\nuniform mat4 model;\\nuniform mat4 inv_model;\\n\\nuniform vec2 ndc_to_clip;\\nuniform float czf;\\nuniform vec2 kernel_size;\\n\\nout vec2 out_uv;\\nout vec3 out_p;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    vec3 p = vec3(inv_model * vec4(center, 1.0f));\\n    p = check_inversed_longitude(p);\\n\\n    vec2 center_pos_clip_space = world2clip_aitoff(p);\\n\\n    vec2 pos_clip_space = center_pos_clip_space;\\n    gl_Position = vec4((pos_clip_space / (ndc_to_clip * czf)) + offset * kernel_size , 0.f, 1.f);\\n\\n    out_uv = uv;\\n    out_p = p;\\n}\"","module.exports = \"#version 300 es\\nprecision lowp float;\\nlayout (location = 0) in vec2 offset;\\nlayout (location = 1) in vec2 uv;\\n\\nlayout (location = 2) in vec3 center;\\nlayout (location = 3) in vec2 center_lonlat;\\n\\nuniform float current_time;\\nuniform mat4 inv_model;\\n\\nuniform vec2 ndc_to_clip;\\nuniform float czf;\\nuniform vec2 kernel_size;\\n\\nout vec2 out_uv;\\nout vec3 out_p;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    vec3 p = vec3(inv_model * vec4(center, 1.0f));\\n    p = check_inversed_longitude(p);\\n\\n    vec2 center_pos_clip_space = world2clip_arc(p);\\n\\n    vec2 pos_clip_space = center_pos_clip_space;\\n    gl_Position = vec4((pos_clip_space / (ndc_to_clip * czf)) + offset * kernel_size , 0.f, 1.f);\\n\\n    out_uv = uv;\\n    out_p = p;\\n}\"","module.exports = \"#version 300 es\\nprecision lowp float;\\n\\nin vec2 out_uv;\\nin vec3 out_p;\\n\\nout vec4 color;\\n\\nuniform sampler2D kernel_texture;\\nuniform float max_density; // max number of sources in a kernel sized HEALPix cell at the current depth\\nuniform float fov;\\nuniform float strength;\\nvoid main() {\\n    color = texture(kernel_texture, out_uv) / max(log2(fov*100.0), 1.0);\\n    color.r *= strength;\\n}\"","module.exports = \"#version 300 es\\nprecision lowp float;\\nlayout (location = 0) in vec2 offset;\\nlayout (location = 1) in vec2 uv;\\n\\nlayout (location = 2) in vec3 center;\\nlayout (location = 3) in vec2 center_lonlat;\\n\\nuniform float current_time;\\nuniform mat4 inv_model;\\n\\nuniform vec2 ndc_to_clip;\\nuniform float czf;\\nuniform vec2 kernel_size;\\n\\nout vec2 out_uv;\\nout vec3 out_p;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    vec3 p = vec3(inv_model * vec4(center, 1.0f));\\n    p = check_inversed_longitude(p);\\n\\n    vec2 center_pos_clip_space = world2clip_mercator(p);\\n\\n    vec2 pos_clip_space = center_pos_clip_space;\\n    gl_Position = vec4((pos_clip_space / (ndc_to_clip * czf)) + offset * kernel_size , 0.f, 1.f);\\n\\n    out_uv = uv;\\n    out_p = p;\\n}\"","module.exports = \"#version 300 es\\nprecision lowp float;\\nlayout (location = 0) in vec2 offset;\\nlayout (location = 1) in vec2 uv;\\n\\nlayout (location = 2) in vec3 center;\\nlayout (location = 3) in vec2 center_lonlat;\\n\\nuniform float current_time;\\nuniform mat4 inv_model;\\n\\nuniform vec2 ndc_to_clip;\\nuniform float czf;\\nuniform vec2 kernel_size;\\n\\nout vec2 out_uv;\\nout vec3 out_p;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    vec3 p = vec3(inv_model * vec4(center, 1.0f));\\n    p = check_inversed_longitude(p);\\n\\n    vec2 center_pos_clip_space = world2clip_mollweide(p);\\n\\n    vec2 pos_clip_space = center_pos_clip_space;\\n    gl_Position = vec4((pos_clip_space / (ndc_to_clip * czf)) + offset * kernel_size , 0.f, 1.f);\\n\\n    out_uv = uv;\\n    out_p = p;\\n}\"","module.exports = \"#version 300 es\\nprecision lowp float;\\n\\nin vec2 out_uv;\\nin vec3 out_p;\\n\\nout vec4 color;\\n\\nuniform sampler2D kernel_texture;\\nuniform float max_density; // max number of sources in a kernel sized HEALPix cell at the current depth\\nuniform float fov;\\nuniform float strength;\\nvoid main() {\\n    if (out_p.z < 0.f) {\\n        discard;\\n    }\\n\\n    color = texture(kernel_texture, out_uv) / max(log2(fov*100.0), 1.0);\\n    color.r *= strength;\\n}\"","module.exports = \"#version 300 es\\nprecision lowp float;\\nlayout (location = 0) in vec2 offset;\\nlayout (location = 1) in vec2 uv;\\n\\nlayout (location = 2) in vec3 center;\\nlayout (location = 3) in vec2 center_lonlat;\\n\\n\\nuniform float current_time;\\nuniform mat4 inv_model;\\n\\nuniform vec2 ndc_to_clip;\\nuniform float czf;\\nuniform vec2 kernel_size;\\n\\nout vec2 out_uv;\\nout vec3 out_p;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    vec3 p = vec3(inv_model * vec4(center, 1.0f));\\n    p = check_inversed_longitude(p);\\n\\n    vec2 center_pos_clip_space = world2clip_orthographic(p);\\n\\n    vec2 pos_clip_space = center_pos_clip_space;\\n    gl_Position = vec4((pos_clip_space / (ndc_to_clip * czf)) + offset * kernel_size , 0.f, 1.f);\\n\\n    out_uv = uv;\\n    out_p = p;\\n}\"","module.exports = \"#version 300 es\\nprecision lowp float;\\n\\nlayout (location = 0) in vec2 offset;\\nlayout (location = 1) in vec2 uv;\\nlayout (location = 2) in vec3 center;\\nlayout (location = 3) in vec2 center_lonlat;\\n\\nuniform float current_time;\\nuniform mat4 inv_model;\\n\\nuniform vec2 ndc_to_clip;\\nuniform float czf;\\nuniform vec2 kernel_size;\\n\\nout vec2 out_uv;\\nout vec3 out_p;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    vec3 p = vec3(inv_model * vec4(center, 1.0f));\\n    p = check_inversed_longitude(p);\\n\\n    vec2 center_pos_clip_space = world2clip_gnomonic(p);\\n\\n    vec2 pos_clip_space = center_pos_clip_space;\\n    gl_Position = vec4((pos_clip_space / (ndc_to_clip * czf)) + offset * kernel_size , 0.f, 1.f);\\n\\n    out_uv = uv;\\n    out_p = p;\\n}\"","module.exports = \"#version 300 es\\nprecision lowp float;\\nprecision lowp sampler2D;\\n\\nin vec2 out_uv;\\nout vec4 color;\\n\\nuniform sampler2D texture_fbo;\\nuniform float alpha;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture(colormaps, vec2(x, id));\\n}\\n\\n\\nvoid main() {\\n    float opacity = texture(texture_fbo, out_uv).r;\\n\\n    float o = smoothstep(0.f, 0.1f, opacity);\\n\\n    color = colormap_f(opacity);\\n    color.a = o * alpha;\\n}\"","module.exports = \"#version 300 es\\nprecision lowp float;\\nprecision lowp sampler2D;\\n\\nlayout (location = 0) in vec2 position;\\nlayout (location = 1) in vec2 uv;\\n\\nout vec2 out_uv;\\n\\nvoid main() {\\n    gl_Position = vec4(position, 0.f, 1.f);\\n    out_uv = uv;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\n\\nout vec4 c;\\nin vec2 pos_clip;\\n\\nuniform vec4 color;\\nuniform mat4 model;\\nuniform mat4 to_icrs;\\nuniform mat4 to_galactic;\\nuniform mat4 inv_model;\\nuniform float czf;\\n\\nuniform float meridians[20];\\nuniform int num_meridians;\\nuniform float parallels[10];\\nuniform int num_parallels;\\n\\nuniform vec2 window_size;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\n\\nbool is_included_inside_projection(vec2 pos_clip_space) {\\n    float px2 = pos_clip_space.x * pos_clip_space.x;\\n    float py2 = pos_clip_space.y * pos_clip_space.y;\\n\\n    return (px2 * 0.25 + py2) <= 0.25;\\n}\\n\\n/// View to world space transformation\\n/// \\n/// This returns a normalized vector along its first 3 dimensions.\\n/// Its fourth component is set to 1.\\n/// \\n/// The Aitoff projection maps screen coordinates from [-pi; pi] x [-pi/2; pi/2]\\n/// \\n/// # Arguments\\n/// \\n/// * `x` - in normalized device coordinates between [-1; 1]\\n/// * `y` - in normalized device coordinates between [-1; 1]\\nvec3 clip2world_aitoff(vec2 pos_clip_space) {\\n    if(!is_included_inside_projection(pos_clip_space)) {\\n        discard;\\n    }\\n\\n    vec2 uv = vec2(pos_clip_space.x * PI * 0.5, pos_clip_space.y * PI);\\n    //da uv a lat/lon\\n    float c = length(uv);\\n\\n    float phi = asin(uv.y * sin(c) / c);\\n    float theta = atan(uv.x * sin(c), c * cos(c)) * 2.0;\\n\\n    vec3 world = vec3(\\n        sin(theta) * cos(phi),\\n        sin(phi),\\n        cos(theta) * cos(phi)\\n    );\\n    return world;\\n}\\n\\nfloat d_isolon(vec3 pos_model, float theta) {\\n    vec3 posmodel = pos_model;\\n    vec3 n = vec3(cos(theta), 0.0, -sin(theta));\\n    // Discard the (theta + PI) meridian\\n    vec3 e_xz = vec3(-n.z, 0.0, n.x);\\n    if (dot(posmodel, e_xz) < 0.0) {\\n        return 1e3;\\n    }\\n\\n    float d = abs(dot(n, posmodel));\\n\\n    vec3 h_model = normalize(posmodel - n*d);\\n    vec3 h_world = vec3(inv_model * to_icrs * vec4(h_model, 1.f));\\n    h_world = check_inversed_longitude(h_world);\\n\\n    // Project to screen x and h and compute the distance\\n    // between the two\\n    vec2 h_clip = world2clip_aitoff(h_world);\\n    \\n    return length(pos_clip - h_clip) * 2.0;\\n}\\nfloat d_isolat(vec3 pos_model, float delta) {\\n    vec3 posmodel = pos_model;\\n    float y = atan(posmodel.y, length(pos_model.xz));\\n    float d = abs(y - delta);\\n    return d;\\n}\\n\\nfloat grid_alpha(vec3 p) {\\n    float v = 1e10;\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float m = 0.0;\\n    float mdist = 10.0;\\n    for (int i = 0; i < num_meridians; i++) {\\n        float tmp = meridians[i];\\n        if (tmp > PI) {\\n            tmp -= 2.0 * PI;\\n        }\\n        float d = abs(theta - tmp);\\n        if (d < mdist) {\\n            mdist = d;\\n            m = tmp;\\n        }\\n    }\\n\\n    float par = 0.0;\\n    float pdist = 10.0;\\n    for (int i = 0; i < num_parallels; i++) {\\n        float d = abs(delta - parallels[i]);\\n        if (d < pdist) {\\n            pdist = d;\\n            par = parallels[i];\\n        }\\n    }\\n\\n    /*float a = 0.0;\\n    if (mdist < pdist) {\\n        a = d_isolon(p, m);\\n    } else {\\n        a = d_isolat(p, par);\\n    }\\n    v = min(a, v);*/\\n    v = min(d_isolon(p, m), v);\\n    v = min(d_isolat(p, par), v);\\n\\n    float eps = 3.0 * czf / window_size.x;\\n    return smoothstep(eps, 2.0*eps, v);\\n}\\n\\nvoid main() {\\n    vec4 transparency = vec4(0.f, 0.f, 0.f, 0.f);\\n\\n    vec3 pos_world = clip2world_aitoff(pos_clip);\\n    pos_world = check_inversed_longitude(pos_world);\\n\\n    vec3 pos_model = vec3(to_galactic * model * vec4(pos_world, 1.f));\\n\\n    float alpha = grid_alpha(pos_model);\\n    c = mix(color, transparency, alpha);\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\n\\nout vec4 c;\\nin vec2 pos_clip;\\n\\nuniform vec4 color;\\nuniform mat4 model;\\nuniform mat4 inv_model;\\nuniform mat4 to_icrs;\\nuniform mat4 to_galactic;\\nuniform float czf;\\n\\nuniform float meridians[20];\\nuniform int num_meridians;\\nuniform float parallels[10];\\nuniform int num_parallels;\\n\\nuniform vec2 window_size;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nfloat sinc_positive(float x) {\\n    if (x > 1.0e-4) {\\n        return sin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        x = x*x;\\n        return 1.0 - x * (1.0 - x / 20.0) / 6.0;\\n    }\\n}\\n\\nvec3 clip2world_arc(vec2 pos_clip_space) {\\n    // r <= pi\\n    float x = pos_clip_space.x * PI;\\n    float y = pos_clip_space.y * PI;\\n    float r = length(vec2(x, y));\\n    if (r <= PI) {\\n        float z = cos(r);\\n        r = sinc_positive(r);\\n\\n        return vec3(x * r, y * r, z);\\n    }\\n    discard;\\n}\\n\\nfloat d_isolon(vec3 pos_model, float theta) {\\n    vec3 n = vec3(cos(theta), 0.0, -sin(theta));\\n    // Discard the (theta + PI) meridian\\n    vec3 e_xz = vec3(-n.z, 0.0, n.x);\\n    if (dot(pos_model, e_xz) < 0.0) {\\n        return 1e3;\\n    }\\n\\n    float d = abs(dot(n, pos_model));\\n\\n    vec3 h_model = normalize(pos_model - n*d);\\n    vec3 h_world = vec3(inv_model * to_icrs * vec4(h_model, 1.f));\\n\\n    // Project to screen x and h and compute the distance\\n    // between the two\\n    h_world = check_inversed_longitude(h_world);\\n    vec2 h_clip = world2clip_arc(h_world);\\n    \\n    return length(pos_clip - h_clip) * 2.0;\\n}\\nfloat d_isolat(vec3 pos_model, float delta) {\\n    float y = atan(pos_model.y, length(pos_model.xz));\\n    float d = abs(y - delta);\\n    return d;\\n}\\n\\nfloat grid_alpha(vec3 p) {\\n    float v = 1e10;\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float m = 0.0;\\n    float mdist = 10.0;\\n    for (int i = 0; i < num_meridians; i++) {\\n        float tmp = meridians[i];\\n        if (tmp > PI) {\\n            tmp -= 2.0 * PI;\\n        }\\n        float d = abs(theta - tmp);\\n        if (d < mdist) {\\n            mdist = d;\\n            m = tmp;\\n        }\\n    }\\n\\n    float par = 0.0;\\n    float pdist = 10.0;\\n    for (int i = 0; i < num_parallels; i++) {\\n        float d = abs(delta - parallels[i]);\\n        if (d < pdist) {\\n            pdist = d;\\n            par = parallels[i];\\n        }\\n    }\\n\\n    /*float a = 0.0;\\n    if (mdist < pdist) {\\n        a = d_isolon(p, m);\\n    } else {\\n        a = d_isolat(p, par);\\n    }\\n    v = min(a, v);*/\\n    v = min(d_isolon(p, m), v);\\n    v = min(d_isolat(p, par), v);\\n\\n    float eps = 3.0 * czf / window_size.x;\\n    return smoothstep(eps, 2.0*eps, v);\\n}\\n\\nvoid main() {\\n    vec4 transparency = vec4(0.f, 0.f, 0.f, 0.f);\\n\\n    vec3 pos_world = clip2world_arc(pos_clip);\\n    pos_world = check_inversed_longitude(pos_world);\\n\\n    vec3 pos_model = vec3(to_galactic * model * vec4(pos_world, 1.f));\\n    float alpha = grid_alpha(pos_model);\\n    c = mix(color, transparency, alpha);\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\n\\nlayout (location = 0) in vec2 position;\\n\\nout vec2 pos_clip;\\n\\nuniform vec2 ndc_to_clip;\\nuniform float czf;\\n\\nvoid main() {\\n    pos_clip = position * (ndc_to_clip * czf);\\n\\n    gl_Position = vec4(position, 0.0, 1.0);\\n}\"","module.exports = \"#version 300 es\\nprecision lowp float;\\n\\nout vec4 frag_color;\\n\\nuniform vec4 color;\\nuniform float opacity;\\n\\nconst float PI = 3.141592653589793f;\\n\\nvoid main() {\\n    frag_color = color;\\n}\"","module.exports = \"#version 300 es\\nprecision lowp float;\\n\\nlayout (location = 0) in vec2 ndc_pos;\\n\\nvoid main() {\\n    gl_Position = vec4(ndc_pos, 0.0, 1.0);\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\n\\nout vec4 c;\\nin vec2 pos_clip;\\n\\nuniform vec4 color;\\nuniform mat4 model;\\nuniform mat4 inv_model;\\nuniform mat4 to_icrs;\\nuniform mat4 to_galactic;\\nuniform float czf;\\n\\nuniform float meridians[20];\\nuniform int num_meridians;\\nuniform float parallels[10];\\nuniform int num_parallels;\\n\\nuniform vec2 window_size;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvec3 clip2world_mercator(vec2 p) {\\n    float theta = p.x * PI;\\n    float delta = atan(sinh(p.y)) * PI;\\n\\n    return vec3(sin(theta) * cos(delta), sin(delta), cos(theta) * cos(delta));\\n}\\n\\nfloat d_isolon(vec3 pos_model, float theta) {\\n    vec3 n = vec3(cos(theta), 0.0, -sin(theta));\\n    // Discard the (theta + PI) meridian\\n    vec3 e_xz = vec3(-n.z, 0.0, n.x);\\n    if (dot(pos_model, e_xz) < 0.0) {\\n        return 1e3;\\n    }\\n\\n    float d = abs(dot(n, pos_model));\\n\\n    vec3 h_model = normalize(pos_model - n*d);\\n    vec3 h_world = vec3(inv_model * to_icrs * vec4(h_model, 1.f));\\n    h_world = check_inversed_longitude(h_world);\\n\\n    // Project to screen x and h and compute the distance\\n    // between the two\\n    vec2 h_clip = world2clip_mercator(h_world);\\n    \\n    return length(pos_clip - h_clip) * 2.0;\\n}\\nfloat d_isolat(vec3 pos_model, float delta) {\\n    float y = atan(pos_model.y, length(pos_model.xz));\\n    float d = abs(y - delta);\\n    return d;\\n}\\n\\nfloat grid_alpha(vec3 p) {\\n    float v = 1e10;\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float m = 0.0;\\n    float mdist = 10.0;\\n    for (int i = 0; i < num_meridians; i++) {\\n        float tmp = meridians[i];\\n        if (tmp > PI) {\\n            tmp -= 2.0 * PI;\\n        }\\n        float d = abs(theta - tmp);\\n        if (d < mdist) {\\n            mdist = d;\\n            m = tmp;\\n        }\\n    }\\n\\n    float par = 0.0;\\n    float pdist = 10.0;\\n    for (int i = 0; i < num_parallels; i++) {\\n        float d = abs(delta - parallels[i]);\\n        if (d < pdist) {\\n            pdist = d;\\n            par = parallels[i];\\n        }\\n    }\\n\\n    /*float a = 0.0;\\n    if (mdist < pdist) {\\n        a = d_isolon(p, m);\\n    } else {\\n        a = d_isolat(p, par);\\n    }\\n    v = min(a, v);*/\\n    v = min(d_isolon(p, m), v);\\n    v = min(d_isolat(p, par), v);\\n\\n    float eps = 3.0 * czf / window_size.x;\\n    return smoothstep(eps, 2.0*eps, v);\\n}\\n\\nvoid main() {\\n    vec4 transparency = vec4(0.f, 0.f, 0.f, 0.f);\\n\\n    vec3 pos_world = clip2world_mercator(pos_clip);\\n    pos_world = check_inversed_longitude(pos_world);\\n\\n    vec3 pos_model = vec3(to_galactic * model * vec4(pos_world, 1.f));\\n\\n    float alpha = grid_alpha(pos_model);\\n    c = mix(color, transparency, alpha);\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\n\\nout vec4 c;\\nin vec2 pos_clip;\\n\\nuniform vec4 color;\\nuniform mat4 model;\\nuniform mat4 inv_model;\\nuniform mat4 to_icrs;\\nuniform mat4 to_galactic;\\nuniform float czf;\\n\\nuniform float meridians[20];\\nuniform int num_meridians;\\nuniform float parallels[10];\\nuniform int num_parallels;\\n\\nuniform vec2 window_size;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nbool is_included_inside_projection(vec2 pos_clip_space) {\\n    float px2 = pos_clip_space.x * pos_clip_space.x;\\n    float py2 = pos_clip_space.y * pos_clip_space.y;\\n\\n    return (px2 * 0.25 + py2) <= 0.25;\\n}\\n\\n/// View to world space transformation\\n/// \\n/// This returns a normalized vector along its first 3 dimensions.\\n/// Its fourth component is set to 1.\\n/// \\n/// The Aitoff projection maps screen coordinates from [-pi; pi] x [-pi/2; pi/2]\\n/// \\n/// # Arguments\\n/// \\n/// * `x` - in normalized device coordinates between [-1; 1]\\n/// * `y` - in normalized device coordinates between [-1; 1]\\nvec3 clip2world_mollweide(vec2 pos_clip_space) {\\n    if (!is_included_inside_projection(pos_clip_space)) {\\n        discard;\\n    }\\n\\n    float y2 = pos_clip_space.y * pos_clip_space.y;\\n    float k = sqrt(1.0 - 4.0 * y2);\\n\\n    float theta = PI * pos_clip_space.x / k;\\n    float delta = asin((2.0 * asin(2.0 * pos_clip_space.y) + 4.0 * pos_clip_space.y * k) / PI);\\n    \\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    return vec3(sin(theta) * cos(delta), sin(delta), cos(theta) * cos(delta));\\n}\\n\\nfloat d_isolon(vec3 pos_model, float theta) {\\n    vec3 n = vec3(cos(theta), 0.0, -sin(theta));\\n    // Discard the (theta + PI) meridian\\n    vec3 e_xz = vec3(-n.z, 0.0, n.x);\\n    if (dot(pos_model, e_xz) < 0.0) {\\n        return 1e3;\\n    }\\n\\n    float d = abs(dot(n, pos_model));\\n\\n    vec3 h_model = normalize(pos_model - n*d);\\n    vec3 h_world = vec3(inv_model * to_icrs * vec4(h_model, 1.f));\\n    h_world = check_inversed_longitude(h_world);\\n\\n    // Project to screen x and h and compute the distance\\n    // between the two\\n    vec2 h_clip = world2clip_mollweide(h_world);\\n    \\n    return length(pos_clip - h_clip) * 2.0;\\n}\\nfloat d_isolat(vec3 pos_model, float delta) {\\n    float y = atan(pos_model.y, length(pos_model.xz));\\n    float d = abs(y - delta);\\n    return d;\\n}\\n\\nfloat grid_alpha(vec3 p) {\\n    float v = 1e10;\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float m = 0.0;\\n    float mdist = 10.0;\\n    for (int i = 0; i < num_meridians; i++) {\\n        float tmp = meridians[i];\\n        if (tmp > PI) {\\n            tmp -= 2.0 * PI;\\n        }\\n        float d = abs(theta - tmp);\\n        if (d < mdist) {\\n            mdist = d;\\n            m = tmp;\\n        }\\n    }\\n\\n    float par = 0.0;\\n    float pdist = 10.0;\\n    for (int i = 0; i < num_parallels; i++) {\\n        float d = abs(delta - parallels[i]);\\n        if (d < pdist) {\\n            pdist = d;\\n            par = parallels[i];\\n        }\\n    }\\n\\n    /*float a = 0.0;\\n    if (mdist < pdist) {\\n        a = d_isolon(p, m);\\n    } else {\\n        a = d_isolat(p, par);\\n    }\\n    v = min(a, v);*/\\n    v = min(d_isolon(p, m), v);\\n    v = min(d_isolat(p, par), v);\\n\\n    float eps = 3.0 * czf / window_size.x;\\n    return smoothstep(eps, 2.0*eps, v);\\n}\\n\\nvoid main() {\\n    vec4 transparency = vec4(0.f, 0.f, 0.f, 0.f);\\n\\n    vec3 pos_world = clip2world_mollweide(pos_clip);\\n    pos_world = check_inversed_longitude(pos_world);\\n\\n    vec3 pos_model = vec3(to_galactic * model * vec4(pos_world, 1.f));\\n\\n    float alpha = grid_alpha(pos_model);\\n    c = mix(color, transparency, alpha);\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\n\\nout vec4 c;\\nin vec2 pos_clip;\\n\\nuniform vec4 color;\\nuniform mat4 model;\\nuniform mat4 inv_model;\\nuniform mat4 to_icrs;\\nuniform mat4 to_galactic;\\nuniform float czf;\\n\\nuniform float meridians[20];\\nuniform int num_meridians;\\nuniform float parallels[10];\\nuniform int num_parallels;\\n\\nuniform vec2 window_size;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvec3 clip2world_orthographic(vec2 pos_clip_space) {\\n    float z = 1.f - dot(pos_clip_space, pos_clip_space);\\n    if (z > 0.f) {\\n        return vec3(pos_clip_space.x, pos_clip_space.y, sqrt(z));\\n    } else {\\n        discard;\\n    }\\n}\\n\\nfloat d_isolon(vec3 pos_model, float theta) {\\n    vec3 n = vec3(cos(theta), 0.0, -sin(theta));\\n    // Discard the (theta + PI) meridian\\n    vec3 e_xz = vec3(-n.z, 0.0, n.x);\\n    if (dot(pos_model, e_xz) < 0.0) {\\n        return 1e3;\\n    }\\n\\n    float d = abs(dot(n, pos_model));\\n\\n    vec3 h_model = normalize(pos_model - n*d);\\n    vec3 h_world = vec3(inv_model * to_icrs * vec4(h_model, 1.f));\\n    h_world = check_inversed_longitude(h_world);\\n\\n    // Project to screen x and h and compute the distance\\n    // between the two\\n    vec2 h_clip = world2clip_orthographic(h_world);\\n    \\n    return length(pos_clip - h_clip) * 2.0;\\n}\\nfloat d_isolat(vec3 pos_model, float delta) {\\n    float y = atan(pos_model.y, length(pos_model.xz));\\n    float d = abs(y - delta);\\n    return d*2.0;\\n}\\n\\nfloat grid_alpha(vec3 p) {\\n    float v = 1e10;\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float m = 0.0;\\n    float mdist = 10.0;\\n    for (int i = 0; i < num_meridians; i++) {\\n        float tmp = meridians[i];\\n        if (tmp > PI) {\\n            tmp -= 2.0 * PI;\\n        }\\n        float d = abs(theta - tmp);\\n        if (d < mdist) {\\n            mdist = d;\\n            m = tmp;\\n        }\\n    }\\n\\n    float par = 0.0;\\n    float pdist = 10.0;\\n    for (int i = 0; i < num_parallels; i++) {\\n        float d = abs(delta - parallels[i]);\\n        if (d < pdist) {\\n            pdist = d;\\n            par = parallels[i];\\n        }\\n    }\\n\\n    /*float a = 0.0;\\n    if (mdist < pdist) {\\n        a = d_isolon(p, m);\\n    } else {\\n        a = d_isolat(p, par);\\n    }\\n    v = min(a, v);*/\\n    v = min(d_isolon(p, m), v);\\n    v = min(d_isolat(p, par), v);\\n\\n    float eps = 3.0 * czf / window_size.x;\\n    return smoothstep(eps, 2.0*eps, v);\\n}\\n\\nvoid main() {\\n    vec4 transparency = vec4(0.f, 0.f, 0.f, 0.f);\\n\\n    vec3 pos_world = clip2world_orthographic(pos_clip);\\n    pos_world = check_inversed_longitude(pos_world);\\n\\n    vec3 pos_model = vec3(to_galactic * model * vec4(pos_world, 1.f));\\n\\n    float alpha = grid_alpha(pos_model);\\n    c = mix(color, transparency, alpha);\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\n\\nout vec4 c;\\nin vec2 pos_clip;\\n\\nuniform vec4 color;\\nuniform mat4 model;\\nuniform mat4 inv_model;\\nuniform mat4 to_icrs;\\nuniform mat4 to_galactic;\\nuniform float czf;\\n\\nuniform float meridians[20];\\nuniform int num_meridians;\\nuniform float parallels[10];\\nuniform int num_parallels;\\n\\nuniform vec2 window_size;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\n/// View to world space transformation\\n/// \\n/// This returns a normalized vector along its first 3 dimensions.\\n/// Its fourth component is set to 1.\\n/// \\n/// The Aitoff projection maps screen coordinates from [-pi; pi] x [-pi/2; pi/2]\\n/// \\n/// # Arguments\\n/// \\n/// * `x` - in normalized device coordinates between [-1; 1]\\n/// * `y` - in normalized device coordinates between [-1; 1]\\nvec3 clip2world_gnomonic(vec2 pos_clip_space) {\\n    float x_2d = pos_clip_space.x * PI;\\n    float y_2d = pos_clip_space.y * PI;\\n    float r = x_2d * x_2d + y_2d * y_2d;\\n\\n    float z = sqrt(1.0 + r);\\n    return vec3(z * x_2d, z * y_2d, z);\\n}\\n\\nfloat d_isolon(vec3 pos_model, float theta) {\\n    vec3 n = vec3(cos(theta), 0.0, -sin(theta));\\n    // Discard the (theta + PI) meridian\\n    vec3 e_xz = vec3(-n.z, 0.0, n.x);\\n    if (dot(pos_model, e_xz) < 0.0) {\\n        return 1e3;\\n    }\\n\\n    float d = abs(dot(n, pos_model));\\n\\n    vec3 h_model = normalize(pos_model - n*d);\\n    vec3 h_world = vec3(inv_model * to_icrs * vec4(h_model, 1.f));\\n    h_world = check_inversed_longitude(h_world);\\n\\n    // Project to screen x and h and compute the distance\\n    // between the two\\n    vec2 h_clip = world2clip_gnomonic(h_world);\\n    \\n    return length(pos_clip - h_clip) * 2.0;\\n}\\nfloat d_isolat(vec3 pos_model, float delta) {\\n    float y = atan(pos_model.y, length(pos_model.xz));\\n    float d = abs(y - delta);\\n    return d;\\n}\\n\\nfloat grid_alpha(vec3 p) {\\n    float v = 1e10;\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float m = 0.0;\\n    float mdist = 10.0;\\n    for (int i = 0; i < num_meridians; i++) {\\n        float tmp = meridians[i];\\n        if (tmp > PI) {\\n            tmp -= 2.0 * PI;\\n        }\\n        float d = abs(theta - tmp);\\n        if (d < mdist) {\\n            mdist = d;\\n            m = tmp;\\n        }\\n    }\\n\\n    float par = 0.0;\\n    float pdist = 10.0;\\n    for (int i = 0; i < num_parallels; i++) {\\n        float d = abs(delta - parallels[i]);\\n        if (d < pdist) {\\n            pdist = d;\\n            par = parallels[i];\\n        }\\n    }\\n\\n    /*float a = 0.0;\\n    if (mdist < pdist) {\\n        a = d_isolon(p, m);\\n    } else {\\n        a = d_isolat(p, par);\\n    }\\n    v = min(a, v);*/\\n    v = min(d_isolon(p, m), v);\\n    v = min(d_isolat(p, par), v);\\n\\n    float eps = 3.0 * czf / window_size.x;\\n    return smoothstep(eps, 2.0*eps, v);\\n}\\n\\nvoid main() {\\n    vec4 transparency = vec4(0.f, 0.f, 0.f, 0.f);\\n\\n    vec3 pos_world = clip2world_gnomonic(pos_clip);\\n    pos_world = check_inversed_longitude(pos_world);\\n\\n    vec3 pos_model = normalize(vec3(to_galactic * model * vec4(pos_world, 1.f)));\\n    float alpha = grid_alpha(pos_model);\\n    c = mix(color, transparency, alpha);\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision mediump int;\\n\\nlayout (location = 0) in vec2 lonlat;\\nlayout (location = 1) in vec2 ndc_pos;\\nlayout (location = 2) in vec3 uv_start;\\nlayout (location = 3) in vec3 uv_end;\\nlayout (location = 4) in float time_tile_received;\\nlayout (location = 5) in float m0;\\nlayout (location = 6) in float m1;\\n\\nout vec3 frag_uv_start;\\nout vec3 frag_uv_end;\\nout float frag_blending_factor;\\nout float m_start;\\nout float m_end;\\n\\nuniform mat4 inv_model;\\nuniform vec2 ndc_to_clip;\\n//uniform float czf;\\n\\n// current time in ms\\nuniform float current_time;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    /*\\n    vec3 world_pos = vec3(inv_model * vec4(position, 1.f));\\n    world_pos = check_inversed_longitude(world_pos);\\n\\n    gl_Position = vec4(world2clip_aitoff(world_pos) / (ndc_to_clip * czf), 0.0, 1.0);\\n    */\\n    gl_Position = vec4(ndc_pos, 0.0, 1.0);\\n\\n    frag_uv_start = uv_start;\\n    frag_uv_end = uv_end;\\n    frag_blending_factor = min((current_time - time_tile_received) / 500.f, 1.f);\\n    m_start = m0;\\n    m_end = m1;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision mediump int;\\n\\nlayout (location = 0) in vec2 lonlat;\\n//layout (location = 1) in vec3 position;\\nlayout (location = 1) in vec2 ndc_pos;\\nlayout (location = 2) in vec3 uv_start;\\nlayout (location = 3) in vec3 uv_end;\\nlayout (location = 4) in float time_tile_received;\\nlayout (location = 5) in float m0;\\nlayout (location = 6) in float m1;\\n\\nout vec3 frag_uv_start;\\nout vec3 frag_uv_end;\\nout float frag_blending_factor;\\nout float m_start;\\nout float m_end;\\n\\nuniform mat4 inv_model;\\nuniform vec2 ndc_to_clip;\\n//uniform float czf;\\n\\n// current time in ms\\nuniform float current_time;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    /*\\n    vec3 world_pos = vec3(inv_model * vec4(position, 1.f));\\n    world_pos = check_inversed_longitude(world_pos);\\n\\n    gl_Position = vec4(world2clip_arc(world_pos) / (ndc_to_clip * czf), 0.0, 1.0);\\n    */\\n    gl_Position = vec4(ndc_pos, 0.0, 1.0);\\n\\n    frag_uv_start = uv_start;\\n    frag_uv_end = uv_end;\\n    frag_blending_factor = min((current_time - time_tile_received) / 500.f, 1.f);\\n    m_start = m0;\\n    m_end = m1;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision highp sampler2D;\\nprecision highp isampler2D;\\nprecision mediump int;\\n\\nin vec3 frag_uv_start;\\nin vec3 frag_uv_end;\\nin float frag_blending_factor;\\nin float m_start;\\nin float m_end;\\n\\nout vec4 out_frag_color;\\nuniform float opacity;\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform sampler2D tex1;\\nuniform sampler2D tex2;\\nuniform sampler2D tex3;\\n\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nvec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture(tex3, uv.xy);\\n    } else {\\n        return vec4(0.0, 0.0, 0.0, 1.0);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_color_from_texture(vec3 UV) {\\n    return get_pixels(UV);\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nvoid main() {\\n    vec4 color_start = get_color_from_texture(frag_uv_start);\\n    color_start.a *= (1.0 - m_start);\\n\\n    vec4 color_end = get_color_from_texture(frag_uv_end);\\n    color_end.a *= (1.0 - m_end);\\n\\n    out_frag_color = mix(color_start, color_end, frag_blending_factor);\\n    out_frag_color.a = opacity * out_frag_color.a;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision mediump int;\\n\\nlayout (location = 0) in vec2 lonlat;\\n//layout (location = 1) in vec3 position;\\nlayout (location = 1) in vec2 ndc_pos;\\nlayout (location = 2) in vec3 uv_start;\\nlayout (location = 3) in vec3 uv_end;\\nlayout (location = 4) in float time_tile_received;\\nlayout (location = 5) in float m0;\\nlayout (location = 6) in float m1;\\n\\nout vec3 frag_uv_start;\\nout vec3 frag_uv_end;\\nout float frag_blending_factor;\\nout float m_start;\\nout float m_end;\\n\\nuniform mat4 inv_model;\\nuniform vec2 ndc_to_clip;\\n//uniform float czf;\\n\\n// current time in ms\\nuniform float current_time;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    /*\\n    vec3 world_pos = vec3(inv_model * vec4(position, 1.f));\\n    world_pos = check_inversed_longitude(world_pos);\\n\\n    gl_Position = vec4(world2clip_gnomonic(world_pos) / (ndc_to_clip * czf), 0.0, 1.0);\\n    */\\n    gl_Position = vec4(ndc_pos, 0.0, 1.0);\\n\\n    frag_uv_start = uv_start;\\n    frag_uv_end = uv_end;\\n    frag_blending_factor = min((current_time - time_tile_received) / 500.f, 1.f);\\n    m_start = m0;\\n    m_end = m1;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision highp sampler2D;\\nprecision highp isampler2D;\\nprecision mediump int;\\n\\nin vec3 frag_uv_start;\\nin vec3 frag_uv_end;\\nin float frag_blending_factor;\\nin float m_start;\\nin float m_end;\\n\\nout vec4 out_frag_color;\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform sampler2D tex1;\\nuniform sampler2D tex2;\\nuniform sampler2D tex3;\\n\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nvec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture(tex3, uv.xy);\\n    } else {\\n        return vec4(0.0, 0.0, 0.0, 1.0);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_color_from_texture(vec3 UV) {\\n    return get_pixels(UV);\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform float opacity;\\n\\nvec4 get_color(vec3 uv, float empty) {\\n    vec4 color = mix(get_color_from_grayscale_texture(uv), vec4(0.0), empty);\\n    return color;\\n}\\n\\nvoid main() {\\n    vec4 color_start = get_color(frag_uv_start, m_start);\\n    vec4 color_end = get_color(frag_uv_end, m_end);\\n    /*vec4 color_start = get_color_from_grayscale_texture(frag_uv_start);\\n    color_start.a *= (1.0 - m_start);\\n    vec4 color_end = get_color_from_grayscale_texture(frag_uv_end);\\n    color_end.a *= (1.0 - m_end);*/\\n\\n    out_frag_color = mix(color_start, color_end, frag_blending_factor);\\n    out_frag_color.a = out_frag_color.a * opacity;\\n}\\n\\n\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision highp sampler2D;\\nprecision highp isampler2D;\\nprecision mediump int;\\n\\nin vec3 frag_uv_start;\\nin vec3 frag_uv_end;\\nin float frag_blending_factor;\\nin float m_start;\\nin float m_end;\\n\\nout vec4 out_frag_color;\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform isampler2D tex1;\\nuniform isampler2D tex2;\\nuniform isampler2D tex3;\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nivec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture(tex3, uv.xy);\\n    } else {\\n        return ivec4(0, 0, 0, 1);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = float(get_pixels(uv).r);\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = float(get_pixels(uv).r);\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform float opacity;\\n\\nvec4 get_color(vec3 uv, float empty) {\\n    vec4 color = mix(get_color_from_grayscale_texture(uv), vec4(0.0), empty);\\n    return color;\\n}\\n\\nvoid main() {\\n    vec4 color_start = get_color(frag_uv_start, m_start);\\n    vec4 color_end = get_color(frag_uv_end, m_end);\\n    /*vec4 color_start = get_color_from_grayscale_texture(frag_uv_start);\\n    color_start.a *= (1.0 - m_start);\\n    vec4 color_end = get_color_from_grayscale_texture(frag_uv_end);\\n    color_end.a *= (1.0 - m_end);*/\\n\\n    out_frag_color = mix(color_start, color_end, frag_blending_factor);\\n    out_frag_color.a = out_frag_color.a * opacity;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision highp sampler2D;\\nprecision highp isampler2D;\\nprecision highp usampler2D;\\nprecision mediump int;\\n\\nin vec3 frag_uv_start;\\nin vec3 frag_uv_end;\\nin float frag_blending_factor;\\nin float m_start;\\nin float m_end;\\n\\nout vec4 out_frag_color;\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform usampler2D tex1;\\nuniform usampler2D tex2;\\nuniform usampler2D tex3;\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nuvec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture(tex3, uv.xy);\\n    } else {\\n        return uvec4(0, 0, 0, 1);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = float(get_pixels(uv).r);\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = float(get_pixels(uv).r);\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform float opacity;\\n\\nvec4 get_color(vec3 uv, float empty) {\\n    vec4 color = mix(get_color_from_grayscale_texture(uv), vec4(0.0), empty);\\n    return color;\\n}\\n\\nvoid main() {\\n    vec4 color_start = get_color(frag_uv_start, m_start);\\n    vec4 color_end = get_color(frag_uv_end, m_end);\\n    /*vec4 color_start = get_color_from_grayscale_texture(frag_uv_start);\\n    color_start.a *= (1.0 - m_start);\\n    vec4 color_end = get_color_from_grayscale_texture(frag_uv_end);\\n    color_end.a *= (1.0 - m_end);*/\\n\\n    out_frag_color = mix(color_start, color_end, frag_blending_factor);\\n    out_frag_color.a = out_frag_color.a * opacity;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision highp sampler2D;\\nprecision highp isampler2D;\\nprecision mediump int;\\n\\nin vec3 frag_uv_start;\\nin vec3 frag_uv_end;\\nin float frag_blending_factor;\\nin float m_start;\\nin float m_end;\\n\\nout vec4 out_frag_color;\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform sampler2D tex1;\\nuniform sampler2D tex2;\\nuniform sampler2D tex3;\\n\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nvec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture(tex3, uv.xy);\\n    } else {\\n        return vec4(0.0, 0.0, 0.0, 1.0);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_color_from_texture(vec3 UV) {\\n    return get_pixels(UV);\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform float opacity;\\n\\nvec4 get_color(vec3 uv, float empty) {\\n    vec4 c = get_colormap_from_grayscale_texture(uv);\\n    vec4 color = mix(c, vec4(0.0), empty);\\n    return color;\\n}\\n\\nvoid main() {\\n    //vec4 color_start = get_color(frag_uv_start, m_start);\\n    //vec4 color_end = get_color(frag_uv_end, m_end);\\n    vec4 color_start = get_colormap_from_grayscale_texture(frag_uv_start);\\n    color_start.a *= (1.0 - m_start);\\n    vec4 color_end = get_colormap_from_grayscale_texture(frag_uv_end);\\n    color_end.a *= (1.0 - m_end);\\n\\n    out_frag_color = mix(color_start, color_end, frag_blending_factor);\\n    out_frag_color.a = out_frag_color.a * opacity;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision highp sampler2D;\\nprecision highp isampler2D;\\nprecision mediump int;\\n\\nin vec3 frag_uv_start;\\nin vec3 frag_uv_end;\\nin float frag_blending_factor;\\nin float m_start;\\nin float m_end;\\n\\nout vec4 out_frag_color;\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform isampler2D tex1;\\nuniform isampler2D tex2;\\nuniform isampler2D tex3;\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nivec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture(tex3, uv.xy);\\n    } else {\\n        return ivec4(0, 0, 0, 1);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = float(get_pixels(uv).r);\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = float(get_pixels(uv).r);\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform float opacity;\\n\\nvec4 get_color(vec3 uv, float empty) {\\n    vec4 c = get_colormap_from_grayscale_texture(uv);\\n    vec4 color = mix(c, vec4(0.0), empty);\\n    return color;\\n}\\n\\nvoid main() {\\n    vec4 color_start = get_color(frag_uv_start, m_start);\\n    vec4 color_end = get_color(frag_uv_end, m_end);\\n\\n    out_frag_color = mix(color_start, color_end, frag_blending_factor);\\n    out_frag_color.a = out_frag_color.a * opacity;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision highp sampler2D;\\nprecision highp isampler2D;\\nprecision highp usampler2D;\\nprecision mediump int;\\n\\nin vec3 frag_uv_start;\\nin vec3 frag_uv_end;\\nin float frag_blending_factor;\\nin float m_start;\\nin float m_end;\\n\\nout vec4 out_frag_color;\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform usampler2D tex1;\\nuniform usampler2D tex2;\\nuniform usampler2D tex3;\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nuvec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture(tex3, uv.xy);\\n    } else {\\n        return uvec4(0, 0, 0, 1);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = float(get_pixels(uv).r);\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = float(get_pixels(uv).r);\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform float opacity;\\n\\nvec4 get_color(vec3 uv, float empty) {\\n    vec4 c = get_colormap_from_grayscale_texture(uv);\\n    vec4 color = mix(c, vec4(0.0), empty);\\n    return color;\\n}\\n\\nvoid main() {\\n    //vec4 color_start = get_color(frag_uv_start, m_start);\\n    //vec4 color_end = get_color(frag_uv_end, m_end);\\n    vec4 color_start = get_colormap_from_grayscale_texture(frag_uv_start);\\n    color_start.a *= (1.0 - m_start);\\n    vec4 color_end = get_colormap_from_grayscale_texture(frag_uv_end);\\n    color_end.a *= (1.0 - m_end);\\n\\n    out_frag_color = mix(color_start, color_end, frag_blending_factor);\\n    out_frag_color.a = out_frag_color.a * opacity;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision mediump int;\\n\\nlayout (location = 0) in vec2 lonlat;\\n//layout (location = 1) in vec3 position;\\nlayout (location = 1) in vec2 ndc_pos;\\nlayout (location = 2) in vec3 uv_start;\\nlayout (location = 3) in vec3 uv_end;\\nlayout (location = 4) in float time_tile_received;\\nlayout (location = 5) in float m0;\\nlayout (location = 6) in float m1;\\n\\nout vec3 frag_uv_start;\\nout vec3 frag_uv_end;\\nout float frag_blending_factor;\\nout float m_start;\\nout float m_end;\\n\\nuniform mat4 inv_model;\\nuniform vec2 ndc_to_clip;\\n//uniform float czf;\\n\\n// current time in ms\\nuniform float current_time;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    /*\\n    vec3 world_pos = vec3(inv_model * vec4(position, 1.f));\\n    world_pos = check_inversed_longitude(world_pos);\\n\\n    gl_Position = vec4(world2clip_mercator(world_pos) / (ndc_to_clip * czf), 0.0, 1.0);\\n    */\\n    gl_Position = vec4(ndc_pos, 0.0, 1.0);\\n\\n    frag_uv_start = uv_start;\\n    frag_uv_end = uv_end;\\n    frag_blending_factor = min((current_time - time_tile_received) / 500.f, 1.f);\\n    m_start = m0;\\n    m_end = m1;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision mediump int;\\n\\nlayout (location = 0) in vec2 lonlat;\\n//layout (location = 1) in vec3 position;\\nlayout (location = 1) in vec2 ndc_pos;\\nlayout (location = 2) in vec3 uv_start;\\nlayout (location = 3) in vec3 uv_end;\\nlayout (location = 4) in float time_tile_received;\\nlayout (location = 5) in float m0;\\nlayout (location = 6) in float m1;\\n\\nout vec3 frag_uv_start;\\nout vec3 frag_uv_end;\\nout float frag_blending_factor;\\nout float m_start;\\nout float m_end;\\n\\nuniform mat4 inv_model;\\nuniform vec2 ndc_to_clip;\\n//uniform float czf;\\n// current time in ms\\nuniform float current_time;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    /*\\n    vec3 world_pos = vec3(inv_model * vec4(position, 1.f));\\n    world_pos = check_inversed_longitude(world_pos);\\n\\n    gl_Position = vec4(world2clip_mollweide(world_pos) / (ndc_to_clip * czf), 0.0, 1.0);\\n    */\\n    gl_Position = vec4(ndc_pos, 0.0, 1.0);\\n\\n    frag_uv_start = uv_start;\\n    frag_uv_end = uv_end;\\n    frag_blending_factor = min((current_time - time_tile_received) / 500.f, 1.f);\\n    m_start = m0;\\n    m_end = m1;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision mediump int;\\n\\nlayout (location = 0) in vec2 lonlat;\\n//layout (location = 1) in vec3 position;\\nlayout (location = 1) in vec2 ndc_pos;\\nlayout (location = 2) in vec3 uv_start;\\nlayout (location = 3) in vec3 uv_end;\\nlayout (location = 4) in float time_tile_received;\\nlayout (location = 5) in float m0;\\nlayout (location = 6) in float m1;\\n\\nout vec3 frag_uv_start;\\nout vec3 frag_uv_end;\\nout float frag_blending_factor;\\nout float m_start;\\nout float m_end;\\n\\nuniform mat4 inv_model;\\nuniform vec2 ndc_to_clip;\\n//uniform float czf;\\n\\n// current time in ms\\nuniform float current_time;\\n\\nconst float PI = 3.1415926535897932384626433832795f;\\n\\nuniform int inversed_longitude;\\n\\nconst mat3 inverseLongitude = mat3(\\n    -1.0, 0.0, 0.0,\\n    0.0, 1.0, 0.0,\\n    0.0, 0.0, 1.0\\n);\\n\\nconst mat4 GAL2J2000 = mat4(\\n    -0.4448296299195045,\\n    0.7469822444763707,\\n    0.4941094279435681,\\n    0.0,\\n\\n    -0.1980763734646737,\\n    0.4559837762325372,\\n    -0.8676661489811610,\\n    0.0,\\n\\n    -0.873437090247923,\\n    -0.4838350155267381,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nconst mat4 J20002GAL = mat4(\\n    -0.4448296299195045,\\n    -0.1980763734646737,\\n    -0.873437090247923,\\n    0.0,\\n\\n    0.7469822444763707,\\n    0.4559837762325372,\\n    -0.4838350155267381,\\n    0.0,\\n\\n    0.4941094279435681,\\n    -0.8676661489811610,\\n    -0.0548755604024359,\\n    0.0,\\n\\n    0.0,\\n    0.0,\\n    0.0,\\n    1.0\\n);\\n\\nvec3 check_inversed_longitude(vec3 p) {\\n    if (inversed_longitude == 1) {\\n        return inverseLongitude * p;\\n    } else {\\n        return p;\\n    }\\n}\\n\\nvec2 world2clip_orthographic(vec3 p) {\\n    return vec2(p.x, p.y);\\n}\\n\\nvec2 world2clip_aitoff(vec3 p) {\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float theta_by_two = theta * 0.5f;\\n\\n    float alpha = acos(cos(delta)*cos(theta_by_two));\\n    float inv_sinc_alpha = 1.f;\\n    if (alpha > 1e-3f) {\\n        inv_sinc_alpha = alpha / sin(alpha);\\n    }\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = 2.f * inv_sinc_alpha * cos(delta) * sin(theta_by_two);\\n    float y = inv_sinc_alpha * sin(delta);\\n\\n    return vec2(x / PI, y / PI);\\n}\\n\\nvec2 world2clip_mollweide(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n    int max_iter = 10;\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float cst = PI * sin(delta);\\n\\n    float phi = delta;\\n    float f = phi + sin(phi) - cst;\\n\\n    int k = 0;\\n    while (abs(f) > 1e-6 && k < max_iter) {\\n        phi = phi - f / (1.f + cos(phi));\\n        f = phi + sin(phi) - cst;\\n\\n        k = k + 1;\\n    }\\n\\n    phi = phi * 0.5f;\\n\\n    // The minus is an astronomical convention.\\n    // longitudes are increasing from right to left\\n    float x = (theta / PI) * cos(phi);\\n    float y = 0.5f * sin(phi);\\n\\n    return vec2(x, y);\\n}\\n\\nvec2 world2clip_mercator(vec3 p) {\\n    // X in [-1, 1]\\n    // Y in [-1/2; 1/2] and scaled by the screen width/height ratio\\n\\n    float delta = asin(p.y);\\n    float theta = atan(p.x, p.z);\\n\\n    float x = theta / PI;\\n    float y = asinh(tan(delta / PI));\\n\\n    return vec2(x, y);\\n}\\n\\nfloat arc_sinc(float x) {\\n    if (x > 1e-4) {\\n        return asin(x) / x;\\n    } else {\\n        // If a is mall, use Taylor expension of asin(a) / a\\n        // a = 1e-4 => a^4 = 1.e-16\\n        float x2 = x*x;\\n        return 1.0 + x2 * (1.0 + x2 * 9.0 / 20.0) / 6.0;\\n    }\\n}\\n\\nvec2 world2clip_arc(vec3 p) {\\n    if (p.z > -1.0) {\\n        // Distance in the Euclidean plane (xy)\\n        // Angular distance is acos(x), but for small separation, asin(r)\\n        // is more accurate.\\n        float r = length(p.xy);\\n        if (p.z > 0.0) { // Angular distance < PI/2, angular distance = asin(r)\\n            r = arc_sinc(r);\\n        } else { // Angular distance > PI/2, angular distance = acos(x)\\n            r = acos(p.z) / r;\\n        }\\n        float x = p.x * r;\\n        float y = p.y * r;\\n\\n        return vec2(x / PI, y / PI);\\n    } else {\\n        return vec2(1.0, 0.0);\\n    }\\n}\\n\\nvec2 world2clip_gnomonic(vec3 p) {\\n    if (p.z <= 1e-2) { // Back hemisphere (x < 0) + diverges near x=0\\n        return vec2(1.0, 0.0);\\n    } else {\\n        return vec2((p.x/p.z) / PI , (p.y/p.z) / PI);\\n    }\\n}\\n\\nvoid main() {\\n    /*\\n    vec3 world_pos = vec3(inv_model * vec4(position, 1.f));\\n    world_pos = check_inversed_longitude(world_pos);\\n\\n    vec2 ndc_pos = world2clip_orthographic(world_pos) / (ndc_to_clip * czf);\\n    */\\n    gl_Position = vec4(ndc_pos, 0.0, 1.0);\\n\\n    frag_uv_start = uv_start;\\n    frag_uv_end = uv_end;\\n\\n    frag_blending_factor = min((current_time - time_tile_received) / 500.f, 1.f);\\n    m_start = m0;\\n    m_end = m1;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision highp sampler2D;\\nprecision highp usampler2D;\\nprecision highp isampler2D;\\nprecision highp int;\\n\\nin vec3 out_vert_pos;\\nin vec2 out_clip_pos;\\nout vec4 out_frag_color;\\n\\nuniform int user_action;\\n\\nstruct Tile {\\n    int uniq; // Healpix cell\\n    int texture_idx; // Index in the texture buffer\\n    float start_time; // Absolute time that the load has been done in ms\\n    float empty;\\n};\\n\\nuniform int current_depth;\\nuniform Tile textures_tiles[192];\\nuniform int num_tiles;\\n\\nuniform float current_time; // current time in ms\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform sampler2D tex1;\\nuniform sampler2D tex2;\\nuniform sampler2D tex3;\\n\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nvec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture(tex3, uv.xy);\\n    } else {\\n        return vec4(0.0, 0.0, 0.0, 1.0);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_color_from_texture(vec3 UV) {\\n    return get_pixels(UV);\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\nconst float TWICE_PI = 6.28318530718f;\\nconst float PI = 3.141592653589793f;\\nconst float FOUR_OVER_PI = 1.27323954474f;\\nconst float TRANSITION_Z = 0.66666666666f;\\nconst float TRANSITION_Z_INV = 1.5f;\\n\\nint quarter(vec2 p) {\\n    int x_neg = int(p.x < 0.0f);\\n    int y_neg = int(p.y < 0.0f);\\n    int q = (x_neg + y_neg) | (y_neg << 1);\\n    return q;\\n}\\n\\nfloat xpm1(vec2 p) {\\n    bool x_neg = (p.x < 0.0f);\\n    //debug_assert!(x_neg <= 1);\\n    bool y_neg = (p.y < 0.0f);\\n    //debug_assert!(y_neg <= 1);\\n    // The purpose it to have the same numerical precision for each base cell\\n    // by avoiding subtraction by 1 or 3 or 5 or 7\\n    float lon = atan(abs(p.y), abs(p.x));\\n    //debug_assert!(0.0 <= lon && lon <= PI / 2.0);\\n    float x02 = lon * FOUR_OVER_PI;\\n    //debug_assert!(0.0 <= x02 && x02 <= 2.0);\\n    if (x_neg != y_neg) { // Could be replaced by a sign copy from (x_neg ^ y_neg) << 32\\n        return 1.0f - x02;\\n    } else {\\n        return x02 - 1.0f;\\n    }\\n}\\n\\nfloat one_minus_z_pos(vec3 p) {\\n    //debug_assert!(z > 0.0);\\n    float d2 = dot(p.xy, p.xy); // z = sqrt(1 - d2) AND sqrt(1 - x) = 1 - x / 2 - x^2 / 8 - x^3 / 16 - 5 x^4/128 - 7 * x^5/256\\n\\n    if (d2 < 1e-1f) { // <=> dec > 84.27 deg\\n        return d2 * (0.5f + d2 * (0.125f + d2 * (0.0625f + d2 * (0.0390625f + d2 * 0.02734375f))));\\n    }\\n    return 1.0f - p.z;\\n}\\n\\nfloat one_minus_z_neg(vec3 p) {\\n    //debug_assert!(z < 0.0);\\n    float d2 = dot(p.xy, p.xy); // z = sqrt(1 - d2) AND sqrt(1 - x) = 1 - x / 2 - x^2 / 8 - x^3 / 16 - 5 x^4/128 - 7 * x^5/256\\n    if (d2 < 1e-1f) { // <=> dec < -84.27 deg\\n        // 0.5 * d2 + 0.125 * d2 * d2\\n        return d2 * (0.5f + d2 * (0.125f + d2 * (0.0625f + d2 * (0.0390625f + d2 * 0.02734375f))));\\n    }\\n    return p.z + 1.0f;\\n}\\n\\n// Z-Order curve projection.\\nint ij2z(int i, int j) {\\n    int i1 = i | (j << 16);\\n\\n    int j1 = (i1 ^ (i1 >> 8)) & 0x0000FF00;\\n    int i2 = i1 ^ j1 ^ (j1 << 8);\\n\\n    int j2 = (i2 ^ (i2 >> 4)) & 0x00F000F0;\\n    int i3 = i2 ^ j2 ^ (j2 << 4);\\n\\n    int j3 = (i3 ^ (i3 >> 2)) & 0x0C0C0C0C;\\n    int i4 = i3 ^ j3 ^ (j3 << 2);\\n\\n    int j4 = (i4 ^ (i4 >> 1)) & 0x22222222;\\n    int i5 = i4 ^ j4 ^ (j4 << 1);\\n\\n    return i5;\\n}\\n\\nstruct HashDxDy {\\n    int idx;\\n    float dx;\\n    float dy;\\n};\\n\\nuniform sampler2D ang2pixd;\\nHashDxDy hash_with_dxdy2(vec2 radec) {\\n    vec2 aa = vec2(radec.x/TWICE_PI + 1.0, (radec.y/PI) + 0.5);\\n    vec3 v = texture(ang2pixd, aa).rgb;\\n    return HashDxDy(\\n        int(v.x * 255.0),\\n        v.y,\\n        v.z\\n    );\\n}\\n// Returns the cell number (hash value) associated with the given position on the unit sphere, \\n// together with the offset `(dx, dy)` on the Euclidean plane of the projected position with\\n// respect to the origin of the cell (South vertex).\\n// # Inputs:\\n// - `depth` in `[0, 14]` (so that and HEALPix cell number can be stored on an unsigned integer)\\n// - `x`: in `[-1.0, 1.0]`\\n// - `y`: in `[-1.0, 1.0]`\\n// - `z`: in `[-1.0, 1.0]`\\n// # Output\\n// - the cell number (hash value) associated with the given position on the unit sphere,\\n//   in `[0, 12*nside^2[`\\n// - `dx`: the positional offset $\\\\in [0, 1[$ along the south-to-east axis\\n// - `dy`: the positional offset $\\\\in [0, 1[$ along the south-to-west axis\\n// # WARNING\\n// - The function assumes, without checking, that the input vector is a unit vector \\n//   (hence `x^2 + y^2 + z^2 = 1`) !!\\n// - Operations being made on simple precision float, the precision is lower than `~0.2 arcsec` only!!\\n// - At depth 13, the precision on `(dx, dy)` is better than `(1/512, 1/512)`, i.e. 2e-3.\\nHashDxDy hash_with_dxdy(int depth, vec3 p) {\\n    //assert!(depth <= 14);\\n    //assert!(-1.0 <= x && x <= 1.0);\\n    //assert!(-1.0 <= y && y <= 1.0);\\n    //assert!(-1.0 <= z && z <= 1.0);\\n    //debug_assert!(1.0 - (x * x + y * y + z * z) < 1e-5);\\n    // A f32 mantissa contains 23 bits.\\n    // - it basically means that when storing (x, y) coordinates,\\n    //   we can go as deep as depth 24 (or maybe 25)\\n    \\n    int nside = 1 << depth;\\n    float half_nside = float(nside) * 0.5f;\\n\\n    float x_pm1 = xpm1(p.xy);\\n    int q = quarter(p.xy);\\n\\n    int d0h = 0;\\n    vec2 p_proj = vec2(0.f);\\n    if (p.z > TRANSITION_Z) {\\n        // North polar cap, Collignon projection.\\n        // - set the origin to (PI/4, 0)\\n        float sqrt_3_one_min_z = sqrt(3.0f * one_minus_z_pos(p));\\n        p_proj = vec2(x_pm1 * sqrt_3_one_min_z, 2.0f - sqrt_3_one_min_z);\\n        d0h = q;\\n    } else if (p.z < -TRANSITION_Z) {\\n        // South polar cap, Collignon projection\\n        // - set the origin to (PI/4, -PI/2)\\n        float sqrt_3_one_min_z = sqrt(3.0f * one_minus_z_neg(p));\\n        p_proj = vec2(x_pm1 * sqrt_3_one_min_z, sqrt_3_one_min_z);\\n        d0h = q + 8;\\n    } else {\\n        // Equatorial region, Cylindrical equal area projection\\n        // - set the origin to (PI/4, 0)               if q = 2\\n        // - set the origin to (PI/4, -PI/2)           if q = 0\\n        // - set the origin to (0, -TRANSITION_LAT)    if q = 3\\n        // - set the origin to (PI/2, -TRANSITION_LAT) if q = 1\\n        // let zero_or_one = (x_cea as u8) & 1;\\n        float y_pm1 = p.z * TRANSITION_Z_INV;\\n        // |\\\\2/|\\n        // .3X1.\\n        // |/0\\\\|\\n        int q01 = int(x_pm1 > y_pm1);  // 0/1\\n        //debug_assert!(q01 == 0 || q01 == 1);\\n        int q12 = int(x_pm1 >= -y_pm1); // 0\\\\1\\n        //debug_assert!(q12 == 0 || q12 == 1);\\n        int q03 = 1 - q12; // 1\\\\0\\n        //let q13 = q01 ^ q12; debug_assert!(q13 == 0 || q13 == 1);\\n        int q1 = q01 & q12; // = 1 if q1, 0 else\\n        //debug_assert!( q1 == 0 ||  q1 == 1);\\n        // x: xcea - 0 if q3 | xcea - 2 if q1 | xcea - 1 if q0 or q2\\n        //let x_proj = x_pm1 - ((q01 + q12) as i8 - 1) as f32;\\n        // y: y - 0 if q2 | y - 1 if q1 or q3 | y - 2 if q0 \\n        //let y_proj = y_pm1 + (q01 + q03) as f32;\\n        p_proj = vec2(\\n            x_pm1 - float(q01 + q12 - 1),\\n            y_pm1 + float(q01 + q03)\\n        );\\n        // d0h: +8 if q0 | +4 if q3 | +5 if q1\\n        d0h = ((q01 + q03) << 2) + ((q + q1) & 3);\\n    }\\n\\n    // Coords inside the base cell\\n    float x = (half_nside * (p_proj.x + p_proj.y));\\n    float y = (half_nside * (p_proj.y - p_proj.x));\\n    int i = int(x);\\n    int j = int(y);\\n\\n    return HashDxDy(\\n        (d0h << (depth << 1)) | ij2z(i, j),\\n        x - float(i),\\n        y - float(j)\\n    );\\n}\\n\\nuniform float opacity;\\n\\nint binary_search_tile(int uniq) {\\n    int l = 0;\\n    int r = num_tiles - 1;\\n\\n    while (l < r) {\\n        int a = (l + r) / 2;\\n        Tile tile = textures_tiles[a];\\n        if(tile.uniq == uniq) {\\n            return a;\\n        } else if(tile.uniq < uniq) {\\n            l = a + 1;\\n        } else {\\n            r = a - 1;\\n        }\\n    }\\n\\n    return l;\\n}\\n\\nvec4 get_tile_color(vec3 pos) {\\n    int d = current_depth;\\n\\n    while (d >= 0) {\\n        HashDxDy result = hash_with_dxdy(d, pos.zxy);\\n        \\n        int idx = result.idx;\\n        vec2 uv = vec2(result.dy, result.dx);\\n\\n        int uniq = (16 << (d << 1)) | idx;\\n        int tile_idx = binary_search_tile(uniq);\\n        Tile tile = textures_tiles[tile_idx];\\n\\n        if(tile.uniq == uniq) {\\n            int idx_texture = tile.texture_idx >> 6;\\n            int off = tile.texture_idx & 0x3F;\\n            float idx_row = float(off >> 3); // in [0; 7]\\n            float idx_col = float(off & 0x7); // in [0; 7]\\n\\n            vec2 offset = (vec2(idx_col, idx_row) + uv)*0.125;\\n            vec3 UV = vec3(offset, float(idx_texture));\\n\\n            vec4 color = get_color_from_texture(UV);\\n            // For empty tiles we set the alpha of the pixel to 0.0\\n            // so that what is behind will be plotted\\n            color.a *= (1.0 - tile.empty);\\n            \\n            return color;\\n        }\\n\\n        d = d - 1;\\n    }\\n}\\n\\nuniform sampler2D position_tex;\\nuniform mat4 model;\\nvoid main() {\\n    vec3 n = vec3(0.0);\\n    if(current_depth < 2) {\\n        vec2 uv = out_clip_pos * 0.5 + 0.5;\\n        n = texture(position_tex, uv).rgb;\\n    } else {\\n        float x = out_clip_pos.x;\\n        float y = out_clip_pos.y;\\n        float x2 = x*x;\\n        float y2 = y*y;\\n        float x4 = x2*x2;\\n        float y4 = y2*y2;\\n\\n        n = vec3(\\n            -x,\\n            y,\\n            -0.5*x2 - 0.5*y2 + 1.0\\n        );\\n    }\\n\\n    vec3 frag_pos = vec3(model * vec4(n, 1.0));\\n\\n    // Get the HEALPix cell idx and the uv in the texture\\n    vec4 c = get_tile_color(frag_pos);\\n    out_frag_color = vec4(c.rgb, opacity * c.a);\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision highp sampler2D;\\nprecision highp usampler2D;\\nprecision highp isampler2D;\\nprecision highp int;\\n\\nin vec2 out_clip_pos;\\nout vec4 out_frag_color;\\n\\nuniform int user_action;\\n\\nstruct Tile {\\n    int uniq; // Healpix cell\\n    int texture_idx; // Index in the texture buffer\\n    float start_time; // Absolute time that the load has been done in ms\\n    float empty;\\n};\\n\\nuniform int current_depth;\\n\\nuniform Tile textures_tiles[12];\\n\\nuniform float current_time; // current time in ms\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform sampler2D tex1;\\nuniform sampler2D tex2;\\nuniform sampler2D tex3;\\n\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nvec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture(tex3, uv.xy);\\n    } else {\\n        return vec4(0.0, 0.0, 0.0, 1.0);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_color_from_texture(vec3 UV) {\\n    return get_pixels(UV);\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\nconst float TWICE_PI = 6.28318530718f;\\nconst float PI = 3.141592653589793f;\\nconst float FOUR_OVER_PI = 1.27323954474f;\\nconst float TRANSITION_Z = 0.66666666666f;\\nconst float TRANSITION_Z_INV = 1.5f;\\n\\nint quarter(vec2 p) {\\n    int x_neg = int(p.x < 0.0f);\\n    int y_neg = int(p.y < 0.0f);\\n    int q = (x_neg + y_neg) | (y_neg << 1);\\n    return q;\\n}\\n\\nfloat xpm1(vec2 p) {\\n    bool x_neg = (p.x < 0.0f);\\n    //debug_assert!(x_neg <= 1);\\n    bool y_neg = (p.y < 0.0f);\\n    //debug_assert!(y_neg <= 1);\\n    // The purpose it to have the same numerical precision for each base cell\\n    // by avoiding subtraction by 1 or 3 or 5 or 7\\n    float lon = atan(abs(p.y), abs(p.x));\\n    //debug_assert!(0.0 <= lon && lon <= PI / 2.0);\\n    float x02 = lon * FOUR_OVER_PI;\\n    //debug_assert!(0.0 <= x02 && x02 <= 2.0);\\n    if (x_neg != y_neg) { // Could be replaced by a sign copy from (x_neg ^ y_neg) << 32\\n        return 1.0f - x02;\\n    } else {\\n        return x02 - 1.0f;\\n    }\\n}\\n\\nfloat one_minus_z_pos(vec3 p) {\\n    //debug_assert!(z > 0.0);\\n    float d2 = dot(p.xy, p.xy); // z = sqrt(1 - d2) AND sqrt(1 - x) = 1 - x / 2 - x^2 / 8 - x^3 / 16 - 5 x^4/128 - 7 * x^5/256\\n\\n    if (d2 < 1e-1f) { // <=> dec > 84.27 deg\\n        return d2 * (0.5f + d2 * (0.125f + d2 * (0.0625f + d2 * (0.0390625f + d2 * 0.02734375f))));\\n    }\\n    return 1.0f - p.z;\\n}\\n\\nfloat one_minus_z_neg(vec3 p) {\\n    //debug_assert!(z < 0.0);\\n    float d2 = dot(p.xy, p.xy); // z = sqrt(1 - d2) AND sqrt(1 - x) = 1 - x / 2 - x^2 / 8 - x^3 / 16 - 5 x^4/128 - 7 * x^5/256\\n    if (d2 < 1e-1f) { // <=> dec < -84.27 deg\\n        // 0.5 * d2 + 0.125 * d2 * d2\\n        return d2 * (0.5f + d2 * (0.125f + d2 * (0.0625f + d2 * (0.0390625f + d2 * 0.02734375f))));\\n    }\\n    return p.z + 1.0f;\\n}\\n\\n// Z-Order curve projection.\\nint ij2z(int i, int j) {\\n    int i1 = i | (j << 16);\\n\\n    int j1 = (i1 ^ (i1 >> 8)) & 0x0000FF00;\\n    int i2 = i1 ^ j1 ^ (j1 << 8);\\n\\n    int j2 = (i2 ^ (i2 >> 4)) & 0x00F000F0;\\n    int i3 = i2 ^ j2 ^ (j2 << 4);\\n\\n    int j3 = (i3 ^ (i3 >> 2)) & 0x0C0C0C0C;\\n    int i4 = i3 ^ j3 ^ (j3 << 2);\\n\\n    int j4 = (i4 ^ (i4 >> 1)) & 0x22222222;\\n    int i5 = i4 ^ j4 ^ (j4 << 1);\\n\\n    return i5;\\n}\\n\\nstruct HashDxDy {\\n    int idx;\\n    float dx;\\n    float dy;\\n};\\n\\nuniform sampler2D ang2pixd;\\nHashDxDy hash_with_dxdy2(vec2 radec) {\\n    vec2 aa = vec2(radec.x/TWICE_PI + 1.0, (radec.y/PI) + 0.5);\\n    vec3 v = texture(ang2pixd, aa).rgb;\\n    return HashDxDy(\\n        int(v.x * 255.0),\\n        v.y,\\n        v.z\\n    );\\n}\\n// Returns the cell number (hash value) associated with the given position on the unit sphere, \\n// together with the offset `(dx, dy)` on the Euclidean plane of the projected position with\\n// respect to the origin of the cell (South vertex).\\n// # Inputs:\\n// - `depth` in `[0, 14]` (so that and HEALPix cell number can be stored on an unsigned integer)\\n// - `x`: in `[-1.0, 1.0]`\\n// - `y`: in `[-1.0, 1.0]`\\n// - `z`: in `[-1.0, 1.0]`\\n// # Output\\n// - the cell number (hash value) associated with the given position on the unit sphere,\\n//   in `[0, 12*nside^2[`\\n// - `dx`: the positional offset $\\\\in [0, 1[$ along the south-to-east axis\\n// - `dy`: the positional offset $\\\\in [0, 1[$ along the south-to-west axis\\n// # WARNING\\n// - The function assumes, without checking, that the input vector is a unit vector \\n//   (hence `x^2 + y^2 + z^2 = 1`) !!\\n// - Operations being made on simple precision float, the precision is lower than `~0.2 arcsec` only!!\\n// - At depth 13, the precision on `(dx, dy)` is better than `(1/512, 1/512)`, i.e. 2e-3.\\nHashDxDy hash_with_dxdy(int depth, vec3 p) {\\n    //assert!(depth <= 14);\\n    //assert!(-1.0 <= x && x <= 1.0);\\n    //assert!(-1.0 <= y && y <= 1.0);\\n    //assert!(-1.0 <= z && z <= 1.0);\\n    //debug_assert!(1.0 - (x * x + y * y + z * z) < 1e-5);\\n    // A f32 mantissa contains 23 bits.\\n    // - it basically means that when storing (x, y) coordinates,\\n    //   we can go as deep as depth 24 (or maybe 25)\\n    \\n    int nside = 1 << depth;\\n    float half_nside = float(nside) * 0.5f;\\n\\n    float x_pm1 = xpm1(p.xy);\\n    int q = quarter(p.xy);\\n\\n    int d0h = 0;\\n    vec2 p_proj = vec2(0.f);\\n    if (p.z > TRANSITION_Z) {\\n        // North polar cap, Collignon projection.\\n        // - set the origin to (PI/4, 0)\\n        float sqrt_3_one_min_z = sqrt(3.0f * one_minus_z_pos(p));\\n        p_proj = vec2(x_pm1 * sqrt_3_one_min_z, 2.0f - sqrt_3_one_min_z);\\n        d0h = q;\\n    } else if (p.z < -TRANSITION_Z) {\\n        // South polar cap, Collignon projection\\n        // - set the origin to (PI/4, -PI/2)\\n        float sqrt_3_one_min_z = sqrt(3.0f * one_minus_z_neg(p));\\n        p_proj = vec2(x_pm1 * sqrt_3_one_min_z, sqrt_3_one_min_z);\\n        d0h = q + 8;\\n    } else {\\n        // Equatorial region, Cylindrical equal area projection\\n        // - set the origin to (PI/4, 0)               if q = 2\\n        // - set the origin to (PI/4, -PI/2)           if q = 0\\n        // - set the origin to (0, -TRANSITION_LAT)    if q = 3\\n        // - set the origin to (PI/2, -TRANSITION_LAT) if q = 1\\n        // let zero_or_one = (x_cea as u8) & 1;\\n        float y_pm1 = p.z * TRANSITION_Z_INV;\\n        // |\\\\2/|\\n        // .3X1.\\n        // |/0\\\\|\\n        int q01 = int(x_pm1 > y_pm1);  // 0/1\\n        //debug_assert!(q01 == 0 || q01 == 1);\\n        int q12 = int(x_pm1 >= -y_pm1); // 0\\\\1\\n        //debug_assert!(q12 == 0 || q12 == 1);\\n        int q03 = 1 - q12; // 1\\\\0\\n        //let q13 = q01 ^ q12; debug_assert!(q13 == 0 || q13 == 1);\\n        int q1 = q01 & q12; // = 1 if q1, 0 else\\n        //debug_assert!( q1 == 0 ||  q1 == 1);\\n        // x: xcea - 0 if q3 | xcea - 2 if q1 | xcea - 1 if q0 or q2\\n        //let x_proj = x_pm1 - ((q01 + q12) as i8 - 1) as f32;\\n        // y: y - 0 if q2 | y - 1 if q1 or q3 | y - 2 if q0 \\n        //let y_proj = y_pm1 + (q01 + q03) as f32;\\n        p_proj = vec2(\\n            x_pm1 - float(q01 + q12 - 1),\\n            y_pm1 + float(q01 + q03)\\n        );\\n        // d0h: +8 if q0 | +4 if q3 | +5 if q1\\n        d0h = ((q01 + q03) << 2) + ((q + q1) & 3);\\n    }\\n\\n    // Coords inside the base cell\\n    float x = (half_nside * (p_proj.x + p_proj.y));\\n    float y = (half_nside * (p_proj.y - p_proj.x));\\n    int i = int(x);\\n    int j = int(y);\\n\\n    return HashDxDy(\\n        (d0h << (depth << 1)) | ij2z(i, j),\\n        x - float(i),\\n        y - float(j)\\n    );\\n}\\n\\nuniform float opacity;\\n\\nvec4 get_tile_color(vec3 pos) {\\n    HashDxDy result = hash_with_dxdy(0, pos.zxy);\\n    int idx = result.idx;\\n    vec2 uv = vec2(result.dy, result.dx);\\n\\n    Tile tile = textures_tiles[idx];\\n\\n    int idx_texture = tile.texture_idx >> 6;\\n    int off = tile.texture_idx & 0x3F;\\n    float idx_row = float(off >> 3); // in [0; 7]\\n    float idx_col = float(off & 0x7); // in [0; 7]\\n\\n    vec2 offset = (vec2(idx_col, idx_row) + uv)*0.125;\\n    vec3 UV = vec3(offset, float(idx_texture));\\n\\n    vec4 color = get_color_from_grayscale_texture(UV);\\n    // For empty tiles we set the alpha of the pixel to 0.0\\n    // so that what is behind will be plotted\\n    color.a *= (1.0 - tile.empty);\\n    return color;\\n}\\n\\nconst float duration = 500.f; // 500ms\\nuniform int max_depth; // max depth of the HiPS\\n\\nuniform sampler2D position_tex;\\nuniform mat4 model;\\nvoid main() {\\n    vec2 uv = out_clip_pos * 0.5 + 0.5;\\n    vec3 n = texture(position_tex, uv).rgb;\\n\\n    vec3 frag_pos = vec3(model * vec4(n, 1.0));\\n\\n    vec4 c = get_tile_color(frag_pos);\\n    out_frag_color = c;\\n    out_frag_color.a = out_frag_color.a * opacity;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision highp sampler2D;\\nprecision highp usampler2D;\\nprecision highp isampler2D;\\nprecision highp int;\\n\\nin vec3 out_vert_pos;\\nin vec2 out_clip_pos;\\nout vec4 out_frag_color;\\n\\nuniform int user_action;\\n\\nstruct Tile {\\n    int uniq; // Healpix cell\\n    int texture_idx; // Index in the texture buffer\\n    float start_time; // Absolute time that the load has been done in ms\\n    float empty;\\n};\\n\\nuniform int current_depth;\\n\\nuniform Tile textures_tiles[12];\\n\\nuniform float current_time; // current time in ms\\nstruct TileColor {\\n    Tile tile;\\n    vec4 color;\\n    bool found;\\n};\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform isampler2D tex1;\\nuniform isampler2D tex2;\\nuniform isampler2D tex3;\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nivec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture(tex3, uv.xy);\\n    } else {\\n        return ivec4(0, 0, 0, 1);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = float(get_pixels(uv).r);\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = float(get_pixels(uv).r);\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\nconst float TWICE_PI = 6.28318530718f;\\nconst float PI = 3.141592653589793f;\\nconst float FOUR_OVER_PI = 1.27323954474f;\\nconst float TRANSITION_Z = 0.66666666666f;\\nconst float TRANSITION_Z_INV = 1.5f;\\n\\nint quarter(vec2 p) {\\n    int x_neg = int(p.x < 0.0f);\\n    int y_neg = int(p.y < 0.0f);\\n    int q = (x_neg + y_neg) | (y_neg << 1);\\n    return q;\\n}\\n\\nfloat xpm1(vec2 p) {\\n    bool x_neg = (p.x < 0.0f);\\n    //debug_assert!(x_neg <= 1);\\n    bool y_neg = (p.y < 0.0f);\\n    //debug_assert!(y_neg <= 1);\\n    // The purpose it to have the same numerical precision for each base cell\\n    // by avoiding subtraction by 1 or 3 or 5 or 7\\n    float lon = atan(abs(p.y), abs(p.x));\\n    //debug_assert!(0.0 <= lon && lon <= PI / 2.0);\\n    float x02 = lon * FOUR_OVER_PI;\\n    //debug_assert!(0.0 <= x02 && x02 <= 2.0);\\n    if (x_neg != y_neg) { // Could be replaced by a sign copy from (x_neg ^ y_neg) << 32\\n        return 1.0f - x02;\\n    } else {\\n        return x02 - 1.0f;\\n    }\\n}\\n\\nfloat one_minus_z_pos(vec3 p) {\\n    //debug_assert!(z > 0.0);\\n    float d2 = dot(p.xy, p.xy); // z = sqrt(1 - d2) AND sqrt(1 - x) = 1 - x / 2 - x^2 / 8 - x^3 / 16 - 5 x^4/128 - 7 * x^5/256\\n\\n    if (d2 < 1e-1f) { // <=> dec > 84.27 deg\\n        return d2 * (0.5f + d2 * (0.125f + d2 * (0.0625f + d2 * (0.0390625f + d2 * 0.02734375f))));\\n    }\\n    return 1.0f - p.z;\\n}\\n\\nfloat one_minus_z_neg(vec3 p) {\\n    //debug_assert!(z < 0.0);\\n    float d2 = dot(p.xy, p.xy); // z = sqrt(1 - d2) AND sqrt(1 - x) = 1 - x / 2 - x^2 / 8 - x^3 / 16 - 5 x^4/128 - 7 * x^5/256\\n    if (d2 < 1e-1f) { // <=> dec < -84.27 deg\\n        // 0.5 * d2 + 0.125 * d2 * d2\\n        return d2 * (0.5f + d2 * (0.125f + d2 * (0.0625f + d2 * (0.0390625f + d2 * 0.02734375f))));\\n    }\\n    return p.z + 1.0f;\\n}\\n\\n// Z-Order curve projection.\\nint ij2z(int i, int j) {\\n    int i1 = i | (j << 16);\\n\\n    int j1 = (i1 ^ (i1 >> 8)) & 0x0000FF00;\\n    int i2 = i1 ^ j1 ^ (j1 << 8);\\n\\n    int j2 = (i2 ^ (i2 >> 4)) & 0x00F000F0;\\n    int i3 = i2 ^ j2 ^ (j2 << 4);\\n\\n    int j3 = (i3 ^ (i3 >> 2)) & 0x0C0C0C0C;\\n    int i4 = i3 ^ j3 ^ (j3 << 2);\\n\\n    int j4 = (i4 ^ (i4 >> 1)) & 0x22222222;\\n    int i5 = i4 ^ j4 ^ (j4 << 1);\\n\\n    return i5;\\n}\\n\\nstruct HashDxDy {\\n    int idx;\\n    float dx;\\n    float dy;\\n};\\n\\nuniform sampler2D ang2pixd;\\nHashDxDy hash_with_dxdy2(vec2 radec) {\\n    vec2 aa = vec2(radec.x/TWICE_PI + 1.0, (radec.y/PI) + 0.5);\\n    vec3 v = texture(ang2pixd, aa).rgb;\\n    return HashDxDy(\\n        int(v.x * 255.0),\\n        v.y,\\n        v.z\\n    );\\n}\\n// Returns the cell number (hash value) associated with the given position on the unit sphere, \\n// together with the offset `(dx, dy)` on the Euclidean plane of the projected position with\\n// respect to the origin of the cell (South vertex).\\n// # Inputs:\\n// - `depth` in `[0, 14]` (so that and HEALPix cell number can be stored on an unsigned integer)\\n// - `x`: in `[-1.0, 1.0]`\\n// - `y`: in `[-1.0, 1.0]`\\n// - `z`: in `[-1.0, 1.0]`\\n// # Output\\n// - the cell number (hash value) associated with the given position on the unit sphere,\\n//   in `[0, 12*nside^2[`\\n// - `dx`: the positional offset $\\\\in [0, 1[$ along the south-to-east axis\\n// - `dy`: the positional offset $\\\\in [0, 1[$ along the south-to-west axis\\n// # WARNING\\n// - The function assumes, without checking, that the input vector is a unit vector \\n//   (hence `x^2 + y^2 + z^2 = 1`) !!\\n// - Operations being made on simple precision float, the precision is lower than `~0.2 arcsec` only!!\\n// - At depth 13, the precision on `(dx, dy)` is better than `(1/512, 1/512)`, i.e. 2e-3.\\nHashDxDy hash_with_dxdy(int depth, vec3 p) {\\n    //assert!(depth <= 14);\\n    //assert!(-1.0 <= x && x <= 1.0);\\n    //assert!(-1.0 <= y && y <= 1.0);\\n    //assert!(-1.0 <= z && z <= 1.0);\\n    //debug_assert!(1.0 - (x * x + y * y + z * z) < 1e-5);\\n    // A f32 mantissa contains 23 bits.\\n    // - it basically means that when storing (x, y) coordinates,\\n    //   we can go as deep as depth 24 (or maybe 25)\\n    \\n    int nside = 1 << depth;\\n    float half_nside = float(nside) * 0.5f;\\n\\n    float x_pm1 = xpm1(p.xy);\\n    int q = quarter(p.xy);\\n\\n    int d0h = 0;\\n    vec2 p_proj = vec2(0.f);\\n    if (p.z > TRANSITION_Z) {\\n        // North polar cap, Collignon projection.\\n        // - set the origin to (PI/4, 0)\\n        float sqrt_3_one_min_z = sqrt(3.0f * one_minus_z_pos(p));\\n        p_proj = vec2(x_pm1 * sqrt_3_one_min_z, 2.0f - sqrt_3_one_min_z);\\n        d0h = q;\\n    } else if (p.z < -TRANSITION_Z) {\\n        // South polar cap, Collignon projection\\n        // - set the origin to (PI/4, -PI/2)\\n        float sqrt_3_one_min_z = sqrt(3.0f * one_minus_z_neg(p));\\n        p_proj = vec2(x_pm1 * sqrt_3_one_min_z, sqrt_3_one_min_z);\\n        d0h = q + 8;\\n    } else {\\n        // Equatorial region, Cylindrical equal area projection\\n        // - set the origin to (PI/4, 0)               if q = 2\\n        // - set the origin to (PI/4, -PI/2)           if q = 0\\n        // - set the origin to (0, -TRANSITION_LAT)    if q = 3\\n        // - set the origin to (PI/2, -TRANSITION_LAT) if q = 1\\n        // let zero_or_one = (x_cea as u8) & 1;\\n        float y_pm1 = p.z * TRANSITION_Z_INV;\\n        // |\\\\2/|\\n        // .3X1.\\n        // |/0\\\\|\\n        int q01 = int(x_pm1 > y_pm1);  // 0/1\\n        //debug_assert!(q01 == 0 || q01 == 1);\\n        int q12 = int(x_pm1 >= -y_pm1); // 0\\\\1\\n        //debug_assert!(q12 == 0 || q12 == 1);\\n        int q03 = 1 - q12; // 1\\\\0\\n        //let q13 = q01 ^ q12; debug_assert!(q13 == 0 || q13 == 1);\\n        int q1 = q01 & q12; // = 1 if q1, 0 else\\n        //debug_assert!( q1 == 0 ||  q1 == 1);\\n        // x: xcea - 0 if q3 | xcea - 2 if q1 | xcea - 1 if q0 or q2\\n        //let x_proj = x_pm1 - ((q01 + q12) as i8 - 1) as f32;\\n        // y: y - 0 if q2 | y - 1 if q1 or q3 | y - 2 if q0 \\n        //let y_proj = y_pm1 + (q01 + q03) as f32;\\n        p_proj = vec2(\\n            x_pm1 - float(q01 + q12 - 1),\\n            y_pm1 + float(q01 + q03)\\n        );\\n        // d0h: +8 if q0 | +4 if q3 | +5 if q1\\n        d0h = ((q01 + q03) << 2) + ((q + q1) & 3);\\n    }\\n\\n    // Coords inside the base cell\\n    float x = (half_nside * (p_proj.x + p_proj.y));\\n    float y = (half_nside * (p_proj.y - p_proj.x));\\n    int i = int(x);\\n    int j = int(y);\\n\\n    return HashDxDy(\\n        (d0h << (depth << 1)) | ij2z(i, j),\\n        x - float(i),\\n        y - float(j)\\n    );\\n}\\n\\nuniform float opacity;\\n\\nvec4 get_tile_color(vec3 pos) {\\n    HashDxDy result = hash_with_dxdy(0, pos.zxy);\\n    int idx = result.idx;\\n    vec2 uv = vec2(result.dy, result.dx);\\n\\n    Tile tile = textures_tiles[idx];\\n\\n    int idx_texture = tile.texture_idx >> 6;\\n    int off = tile.texture_idx & 0x3F;\\n    float idx_row = float(off >> 3); // in [0; 7]\\n    float idx_col = float(off & 0x7); // in [0; 7]\\n\\n    vec2 offset = (vec2(idx_col, idx_row) + uv)*0.125;\\n    vec3 UV = vec3(offset, float(idx_texture));\\n\\n    vec4 color = get_color_from_grayscale_texture(UV);\\n    // For empty tiles we set the alpha of the pixel to 0.0\\n    // so that what is behind will be plotted\\n    color.a *= (1.0 - tile.empty);\\n    return color;\\n}\\n\\nconst float duration = 500.f; // 500ms\\nuniform int max_depth; // max depth of the HiPS\\n\\nuniform sampler2D position_tex;\\nuniform mat4 model;\\nvoid main() {\\n    vec2 uv = out_clip_pos * 0.5 + 0.5;\\n    vec3 n = texture(position_tex, uv).rgb;\\n\\n    vec3 frag_pos = vec3(model * vec4(n, 1.0));\\n\\n    vec4 c = get_tile_color(frag_pos);\\n    out_frag_color = c;\\n    out_frag_color.a = out_frag_color.a * opacity;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision highp sampler2D;\\nprecision highp usampler2D;\\nprecision highp isampler2D;\\nprecision highp int;\\n\\nin vec2 out_clip_pos;\\nout vec4 out_frag_color;\\n\\nuniform int user_action;\\n\\nstruct Tile {\\n    int uniq; // Healpix cell\\n    int texture_idx; // Index in the texture buffer\\n    float start_time; // Absolute time that the load has been done in ms\\n    float empty;\\n};\\n\\nuniform int current_depth;\\n\\nuniform Tile textures_tiles[12];\\n\\nuniform float current_time; // current time in ms\\nstruct TileColor {\\n    Tile tile;\\n    vec4 color;\\n    bool found;\\n};\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform usampler2D tex1;\\nuniform usampler2D tex2;\\nuniform usampler2D tex3;\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nuvec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture(tex3, uv.xy);\\n    } else {\\n        return uvec4(0, 0, 0, 1);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = float(get_pixels(uv).r);\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = float(get_pixels(uv).r);\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\nconst float TWICE_PI = 6.28318530718f;\\nconst float PI = 3.141592653589793f;\\nconst float FOUR_OVER_PI = 1.27323954474f;\\nconst float TRANSITION_Z = 0.66666666666f;\\nconst float TRANSITION_Z_INV = 1.5f;\\n\\nint quarter(vec2 p) {\\n    int x_neg = int(p.x < 0.0f);\\n    int y_neg = int(p.y < 0.0f);\\n    int q = (x_neg + y_neg) | (y_neg << 1);\\n    return q;\\n}\\n\\nfloat xpm1(vec2 p) {\\n    bool x_neg = (p.x < 0.0f);\\n    //debug_assert!(x_neg <= 1);\\n    bool y_neg = (p.y < 0.0f);\\n    //debug_assert!(y_neg <= 1);\\n    // The purpose it to have the same numerical precision for each base cell\\n    // by avoiding subtraction by 1 or 3 or 5 or 7\\n    float lon = atan(abs(p.y), abs(p.x));\\n    //debug_assert!(0.0 <= lon && lon <= PI / 2.0);\\n    float x02 = lon * FOUR_OVER_PI;\\n    //debug_assert!(0.0 <= x02 && x02 <= 2.0);\\n    if (x_neg != y_neg) { // Could be replaced by a sign copy from (x_neg ^ y_neg) << 32\\n        return 1.0f - x02;\\n    } else {\\n        return x02 - 1.0f;\\n    }\\n}\\n\\nfloat one_minus_z_pos(vec3 p) {\\n    //debug_assert!(z > 0.0);\\n    float d2 = dot(p.xy, p.xy); // z = sqrt(1 - d2) AND sqrt(1 - x) = 1 - x / 2 - x^2 / 8 - x^3 / 16 - 5 x^4/128 - 7 * x^5/256\\n\\n    if (d2 < 1e-1f) { // <=> dec > 84.27 deg\\n        return d2 * (0.5f + d2 * (0.125f + d2 * (0.0625f + d2 * (0.0390625f + d2 * 0.02734375f))));\\n    }\\n    return 1.0f - p.z;\\n}\\n\\nfloat one_minus_z_neg(vec3 p) {\\n    //debug_assert!(z < 0.0);\\n    float d2 = dot(p.xy, p.xy); // z = sqrt(1 - d2) AND sqrt(1 - x) = 1 - x / 2 - x^2 / 8 - x^3 / 16 - 5 x^4/128 - 7 * x^5/256\\n    if (d2 < 1e-1f) { // <=> dec < -84.27 deg\\n        // 0.5 * d2 + 0.125 * d2 * d2\\n        return d2 * (0.5f + d2 * (0.125f + d2 * (0.0625f + d2 * (0.0390625f + d2 * 0.02734375f))));\\n    }\\n    return p.z + 1.0f;\\n}\\n\\n// Z-Order curve projection.\\nint ij2z(int i, int j) {\\n    int i1 = i | (j << 16);\\n\\n    int j1 = (i1 ^ (i1 >> 8)) & 0x0000FF00;\\n    int i2 = i1 ^ j1 ^ (j1 << 8);\\n\\n    int j2 = (i2 ^ (i2 >> 4)) & 0x00F000F0;\\n    int i3 = i2 ^ j2 ^ (j2 << 4);\\n\\n    int j3 = (i3 ^ (i3 >> 2)) & 0x0C0C0C0C;\\n    int i4 = i3 ^ j3 ^ (j3 << 2);\\n\\n    int j4 = (i4 ^ (i4 >> 1)) & 0x22222222;\\n    int i5 = i4 ^ j4 ^ (j4 << 1);\\n\\n    return i5;\\n}\\n\\nstruct HashDxDy {\\n    int idx;\\n    float dx;\\n    float dy;\\n};\\n\\nuniform sampler2D ang2pixd;\\nHashDxDy hash_with_dxdy2(vec2 radec) {\\n    vec2 aa = vec2(radec.x/TWICE_PI + 1.0, (radec.y/PI) + 0.5);\\n    vec3 v = texture(ang2pixd, aa).rgb;\\n    return HashDxDy(\\n        int(v.x * 255.0),\\n        v.y,\\n        v.z\\n    );\\n}\\n// Returns the cell number (hash value) associated with the given position on the unit sphere, \\n// together with the offset `(dx, dy)` on the Euclidean plane of the projected position with\\n// respect to the origin of the cell (South vertex).\\n// # Inputs:\\n// - `depth` in `[0, 14]` (so that and HEALPix cell number can be stored on an unsigned integer)\\n// - `x`: in `[-1.0, 1.0]`\\n// - `y`: in `[-1.0, 1.0]`\\n// - `z`: in `[-1.0, 1.0]`\\n// # Output\\n// - the cell number (hash value) associated with the given position on the unit sphere,\\n//   in `[0, 12*nside^2[`\\n// - `dx`: the positional offset $\\\\in [0, 1[$ along the south-to-east axis\\n// - `dy`: the positional offset $\\\\in [0, 1[$ along the south-to-west axis\\n// # WARNING\\n// - The function assumes, without checking, that the input vector is a unit vector \\n//   (hence `x^2 + y^2 + z^2 = 1`) !!\\n// - Operations being made on simple precision float, the precision is lower than `~0.2 arcsec` only!!\\n// - At depth 13, the precision on `(dx, dy)` is better than `(1/512, 1/512)`, i.e. 2e-3.\\nHashDxDy hash_with_dxdy(int depth, vec3 p) {\\n    //assert!(depth <= 14);\\n    //assert!(-1.0 <= x && x <= 1.0);\\n    //assert!(-1.0 <= y && y <= 1.0);\\n    //assert!(-1.0 <= z && z <= 1.0);\\n    //debug_assert!(1.0 - (x * x + y * y + z * z) < 1e-5);\\n    // A f32 mantissa contains 23 bits.\\n    // - it basically means that when storing (x, y) coordinates,\\n    //   we can go as deep as depth 24 (or maybe 25)\\n    \\n    int nside = 1 << depth;\\n    float half_nside = float(nside) * 0.5f;\\n\\n    float x_pm1 = xpm1(p.xy);\\n    int q = quarter(p.xy);\\n\\n    int d0h = 0;\\n    vec2 p_proj = vec2(0.f);\\n    if (p.z > TRANSITION_Z) {\\n        // North polar cap, Collignon projection.\\n        // - set the origin to (PI/4, 0)\\n        float sqrt_3_one_min_z = sqrt(3.0f * one_minus_z_pos(p));\\n        p_proj = vec2(x_pm1 * sqrt_3_one_min_z, 2.0f - sqrt_3_one_min_z);\\n        d0h = q;\\n    } else if (p.z < -TRANSITION_Z) {\\n        // South polar cap, Collignon projection\\n        // - set the origin to (PI/4, -PI/2)\\n        float sqrt_3_one_min_z = sqrt(3.0f * one_minus_z_neg(p));\\n        p_proj = vec2(x_pm1 * sqrt_3_one_min_z, sqrt_3_one_min_z);\\n        d0h = q + 8;\\n    } else {\\n        // Equatorial region, Cylindrical equal area projection\\n        // - set the origin to (PI/4, 0)               if q = 2\\n        // - set the origin to (PI/4, -PI/2)           if q = 0\\n        // - set the origin to (0, -TRANSITION_LAT)    if q = 3\\n        // - set the origin to (PI/2, -TRANSITION_LAT) if q = 1\\n        // let zero_or_one = (x_cea as u8) & 1;\\n        float y_pm1 = p.z * TRANSITION_Z_INV;\\n        // |\\\\2/|\\n        // .3X1.\\n        // |/0\\\\|\\n        int q01 = int(x_pm1 > y_pm1);  // 0/1\\n        //debug_assert!(q01 == 0 || q01 == 1);\\n        int q12 = int(x_pm1 >= -y_pm1); // 0\\\\1\\n        //debug_assert!(q12 == 0 || q12 == 1);\\n        int q03 = 1 - q12; // 1\\\\0\\n        //let q13 = q01 ^ q12; debug_assert!(q13 == 0 || q13 == 1);\\n        int q1 = q01 & q12; // = 1 if q1, 0 else\\n        //debug_assert!( q1 == 0 ||  q1 == 1);\\n        // x: xcea - 0 if q3 | xcea - 2 if q1 | xcea - 1 if q0 or q2\\n        //let x_proj = x_pm1 - ((q01 + q12) as i8 - 1) as f32;\\n        // y: y - 0 if q2 | y - 1 if q1 or q3 | y - 2 if q0 \\n        //let y_proj = y_pm1 + (q01 + q03) as f32;\\n        p_proj = vec2(\\n            x_pm1 - float(q01 + q12 - 1),\\n            y_pm1 + float(q01 + q03)\\n        );\\n        // d0h: +8 if q0 | +4 if q3 | +5 if q1\\n        d0h = ((q01 + q03) << 2) + ((q + q1) & 3);\\n    }\\n\\n    // Coords inside the base cell\\n    float x = (half_nside * (p_proj.x + p_proj.y));\\n    float y = (half_nside * (p_proj.y - p_proj.x));\\n    int i = int(x);\\n    int j = int(y);\\n\\n    return HashDxDy(\\n        (d0h << (depth << 1)) | ij2z(i, j),\\n        x - float(i),\\n        y - float(j)\\n    );\\n}\\n\\nuniform float opacity;\\n\\nvec4 get_tile_color(vec3 pos) {\\n    HashDxDy result = hash_with_dxdy(0, pos.zxy);\\n    int idx = result.idx;\\n    vec2 uv = vec2(result.dy, result.dx);\\n\\n    Tile tile = textures_tiles[idx];\\n\\n    int idx_texture = tile.texture_idx >> 6;\\n    int off = tile.texture_idx & 0x3F;\\n    float idx_row = float(off >> 3); // in [0; 7]\\n    float idx_col = float(off & 0x7); // in [0; 7]\\n\\n    vec2 offset = (vec2(idx_col, idx_row) + uv)*0.125;\\n    vec3 UV = vec3(offset, float(idx_texture));\\n\\n    vec4 color = get_color_from_grayscale_texture(UV);\\n    // For empty tiles we set the alpha of the pixel to 0.0\\n    // so that what is behind will be plotted\\n    color.a *= (1.0 - tile.empty);\\n    return color;\\n}\\n\\nconst float duration = 500.f; // 500ms\\nuniform int max_depth; // max depth of the HiPS\\n\\nuniform sampler2D position_tex;\\nuniform mat4 model;\\nvoid main() {\\n    vec2 uv = out_clip_pos * 0.5 + 0.5;\\n    vec3 n = texture(position_tex, uv).rgb;\\n\\n    vec3 frag_pos = vec3(model * vec4(n, 1.0));\\n\\n    vec4 c = get_tile_color(frag_pos);\\n    out_frag_color = c;\\n    out_frag_color.a = out_frag_color.a * opacity;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision highp sampler2D;\\nprecision highp usampler2D;\\nprecision highp isampler2D;\\nprecision highp int;\\n\\nin vec2 out_clip_pos;\\nout vec4 out_frag_color;\\n\\nuniform int user_action;\\n\\nstruct Tile {\\n    int uniq; // Healpix cell\\n    int texture_idx; // Index in the texture buffer\\n    float start_time; // Absolute time that the load has been done in ms\\n    float empty;\\n};\\n\\nuniform int current_depth;\\n\\nuniform Tile textures_tiles[12];\\n\\nuniform float opacity;\\nuniform float current_time; // current time in ms\\nstruct TileColor {\\n    Tile tile;\\n    vec4 color;\\n    bool found;\\n};\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform sampler2D tex1;\\nuniform sampler2D tex2;\\nuniform sampler2D tex3;\\n\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nvec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture(tex3, uv.xy);\\n    } else {\\n        return vec4(0.0, 0.0, 0.0, 1.0);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_color_from_texture(vec3 UV) {\\n    return get_pixels(UV);\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = get_pixels(uv).r;\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\nconst float TWICE_PI = 6.28318530718f;\\nconst float PI = 3.141592653589793f;\\nconst float FOUR_OVER_PI = 1.27323954474f;\\nconst float TRANSITION_Z = 0.66666666666f;\\nconst float TRANSITION_Z_INV = 1.5f;\\n\\nint quarter(vec2 p) {\\n    int x_neg = int(p.x < 0.0f);\\n    int y_neg = int(p.y < 0.0f);\\n    int q = (x_neg + y_neg) | (y_neg << 1);\\n    return q;\\n}\\n\\nfloat xpm1(vec2 p) {\\n    bool x_neg = (p.x < 0.0f);\\n    //debug_assert!(x_neg <= 1);\\n    bool y_neg = (p.y < 0.0f);\\n    //debug_assert!(y_neg <= 1);\\n    // The purpose it to have the same numerical precision for each base cell\\n    // by avoiding subtraction by 1 or 3 or 5 or 7\\n    float lon = atan(abs(p.y), abs(p.x));\\n    //debug_assert!(0.0 <= lon && lon <= PI / 2.0);\\n    float x02 = lon * FOUR_OVER_PI;\\n    //debug_assert!(0.0 <= x02 && x02 <= 2.0);\\n    if (x_neg != y_neg) { // Could be replaced by a sign copy from (x_neg ^ y_neg) << 32\\n        return 1.0f - x02;\\n    } else {\\n        return x02 - 1.0f;\\n    }\\n}\\n\\nfloat one_minus_z_pos(vec3 p) {\\n    //debug_assert!(z > 0.0);\\n    float d2 = dot(p.xy, p.xy); // z = sqrt(1 - d2) AND sqrt(1 - x) = 1 - x / 2 - x^2 / 8 - x^3 / 16 - 5 x^4/128 - 7 * x^5/256\\n\\n    if (d2 < 1e-1f) { // <=> dec > 84.27 deg\\n        return d2 * (0.5f + d2 * (0.125f + d2 * (0.0625f + d2 * (0.0390625f + d2 * 0.02734375f))));\\n    }\\n    return 1.0f - p.z;\\n}\\n\\nfloat one_minus_z_neg(vec3 p) {\\n    //debug_assert!(z < 0.0);\\n    float d2 = dot(p.xy, p.xy); // z = sqrt(1 - d2) AND sqrt(1 - x) = 1 - x / 2 - x^2 / 8 - x^3 / 16 - 5 x^4/128 - 7 * x^5/256\\n    if (d2 < 1e-1f) { // <=> dec < -84.27 deg\\n        // 0.5 * d2 + 0.125 * d2 * d2\\n        return d2 * (0.5f + d2 * (0.125f + d2 * (0.0625f + d2 * (0.0390625f + d2 * 0.02734375f))));\\n    }\\n    return p.z + 1.0f;\\n}\\n\\n// Z-Order curve projection.\\nint ij2z(int i, int j) {\\n    int i1 = i | (j << 16);\\n\\n    int j1 = (i1 ^ (i1 >> 8)) & 0x0000FF00;\\n    int i2 = i1 ^ j1 ^ (j1 << 8);\\n\\n    int j2 = (i2 ^ (i2 >> 4)) & 0x00F000F0;\\n    int i3 = i2 ^ j2 ^ (j2 << 4);\\n\\n    int j3 = (i3 ^ (i3 >> 2)) & 0x0C0C0C0C;\\n    int i4 = i3 ^ j3 ^ (j3 << 2);\\n\\n    int j4 = (i4 ^ (i4 >> 1)) & 0x22222222;\\n    int i5 = i4 ^ j4 ^ (j4 << 1);\\n\\n    return i5;\\n}\\n\\nstruct HashDxDy {\\n    int idx;\\n    float dx;\\n    float dy;\\n};\\n\\nuniform sampler2D ang2pixd;\\nHashDxDy hash_with_dxdy2(vec2 radec) {\\n    vec2 aa = vec2(radec.x/TWICE_PI + 1.0, (radec.y/PI) + 0.5);\\n    vec3 v = texture(ang2pixd, aa).rgb;\\n    return HashDxDy(\\n        int(v.x * 255.0),\\n        v.y,\\n        v.z\\n    );\\n}\\n// Returns the cell number (hash value) associated with the given position on the unit sphere, \\n// together with the offset `(dx, dy)` on the Euclidean plane of the projected position with\\n// respect to the origin of the cell (South vertex).\\n// # Inputs:\\n// - `depth` in `[0, 14]` (so that and HEALPix cell number can be stored on an unsigned integer)\\n// - `x`: in `[-1.0, 1.0]`\\n// - `y`: in `[-1.0, 1.0]`\\n// - `z`: in `[-1.0, 1.0]`\\n// # Output\\n// - the cell number (hash value) associated with the given position on the unit sphere,\\n//   in `[0, 12*nside^2[`\\n// - `dx`: the positional offset $\\\\in [0, 1[$ along the south-to-east axis\\n// - `dy`: the positional offset $\\\\in [0, 1[$ along the south-to-west axis\\n// # WARNING\\n// - The function assumes, without checking, that the input vector is a unit vector \\n//   (hence `x^2 + y^2 + z^2 = 1`) !!\\n// - Operations being made on simple precision float, the precision is lower than `~0.2 arcsec` only!!\\n// - At depth 13, the precision on `(dx, dy)` is better than `(1/512, 1/512)`, i.e. 2e-3.\\nHashDxDy hash_with_dxdy(int depth, vec3 p) {\\n    //assert!(depth <= 14);\\n    //assert!(-1.0 <= x && x <= 1.0);\\n    //assert!(-1.0 <= y && y <= 1.0);\\n    //assert!(-1.0 <= z && z <= 1.0);\\n    //debug_assert!(1.0 - (x * x + y * y + z * z) < 1e-5);\\n    // A f32 mantissa contains 23 bits.\\n    // - it basically means that when storing (x, y) coordinates,\\n    //   we can go as deep as depth 24 (or maybe 25)\\n    \\n    int nside = 1 << depth;\\n    float half_nside = float(nside) * 0.5f;\\n\\n    float x_pm1 = xpm1(p.xy);\\n    int q = quarter(p.xy);\\n\\n    int d0h = 0;\\n    vec2 p_proj = vec2(0.f);\\n    if (p.z > TRANSITION_Z) {\\n        // North polar cap, Collignon projection.\\n        // - set the origin to (PI/4, 0)\\n        float sqrt_3_one_min_z = sqrt(3.0f * one_minus_z_pos(p));\\n        p_proj = vec2(x_pm1 * sqrt_3_one_min_z, 2.0f - sqrt_3_one_min_z);\\n        d0h = q;\\n    } else if (p.z < -TRANSITION_Z) {\\n        // South polar cap, Collignon projection\\n        // - set the origin to (PI/4, -PI/2)\\n        float sqrt_3_one_min_z = sqrt(3.0f * one_minus_z_neg(p));\\n        p_proj = vec2(x_pm1 * sqrt_3_one_min_z, sqrt_3_one_min_z);\\n        d0h = q + 8;\\n    } else {\\n        // Equatorial region, Cylindrical equal area projection\\n        // - set the origin to (PI/4, 0)               if q = 2\\n        // - set the origin to (PI/4, -PI/2)           if q = 0\\n        // - set the origin to (0, -TRANSITION_LAT)    if q = 3\\n        // - set the origin to (PI/2, -TRANSITION_LAT) if q = 1\\n        // let zero_or_one = (x_cea as u8) & 1;\\n        float y_pm1 = p.z * TRANSITION_Z_INV;\\n        // |\\\\2/|\\n        // .3X1.\\n        // |/0\\\\|\\n        int q01 = int(x_pm1 > y_pm1);  // 0/1\\n        //debug_assert!(q01 == 0 || q01 == 1);\\n        int q12 = int(x_pm1 >= -y_pm1); // 0\\\\1\\n        //debug_assert!(q12 == 0 || q12 == 1);\\n        int q03 = 1 - q12; // 1\\\\0\\n        //let q13 = q01 ^ q12; debug_assert!(q13 == 0 || q13 == 1);\\n        int q1 = q01 & q12; // = 1 if q1, 0 else\\n        //debug_assert!( q1 == 0 ||  q1 == 1);\\n        // x: xcea - 0 if q3 | xcea - 2 if q1 | xcea - 1 if q0 or q2\\n        //let x_proj = x_pm1 - ((q01 + q12) as i8 - 1) as f32;\\n        // y: y - 0 if q2 | y - 1 if q1 or q3 | y - 2 if q0 \\n        //let y_proj = y_pm1 + (q01 + q03) as f32;\\n        p_proj = vec2(\\n            x_pm1 - float(q01 + q12 - 1),\\n            y_pm1 + float(q01 + q03)\\n        );\\n        // d0h: +8 if q0 | +4 if q3 | +5 if q1\\n        d0h = ((q01 + q03) << 2) + ((q + q1) & 3);\\n    }\\n\\n    // Coords inside the base cell\\n    float x = (half_nside * (p_proj.x + p_proj.y));\\n    float y = (half_nside * (p_proj.y - p_proj.x));\\n    int i = int(x);\\n    int j = int(y);\\n\\n    return HashDxDy(\\n        (d0h << (depth << 1)) | ij2z(i, j),\\n        x - float(i),\\n        y - float(j)\\n    );\\n}\\n\\nvec4 get_tile_color(vec3 pos) {\\n    HashDxDy result = hash_with_dxdy(0, pos.zxy);\\n\\n    int idx = result.idx;\\n    vec2 uv = vec2(result.dy, result.dx);\\n\\n    Tile tile = textures_tiles[idx];\\n\\n    int idx_texture = tile.texture_idx >> 6;\\n    int off = tile.texture_idx & 0x3F;\\n    float idx_row = float(off >> 3); // in [0; 7]\\n    float idx_col = float(off & 0x7); // in [0; 7]\\n\\n    vec2 offset = (vec2(idx_col, idx_row) + uv)*0.125;\\n    vec3 UV = vec3(offset, float(idx_texture));\\n\\n    vec4 color = get_colormap_from_grayscale_texture(UV);\\n    // handle empty tiles\\n    //vec4 c1 = mix(c, blank_color, tile.empty);\\n    //vec4 c2 = mix(c, colormap_f(0.0), tile.empty);\\n    //vec4 color = mix(c1, c2, first_survey);\\n    // For empty tiles we set the alpha of the pixel to 0.0\\n    // so that what is behind will be plotted\\n    color.a *= (1.0 - tile.empty);\\n    return color;\\n}\\n\\nconst float duration = 500.f; // 500ms\\nuniform int max_depth; // max depth of the HiPS\\n\\nuniform sampler2D position_tex;\\nuniform mat4 model;\\nvoid main() {\\n    vec2 uv = out_clip_pos * 0.5 + 0.5;\\n    vec3 n = texture(position_tex, uv).rgb;\\n\\n    vec3 frag_pos = vec3(model * vec4(n, 1.0));\\n\\n    vec4 c = get_tile_color(frag_pos);\\n    out_frag_color = c;\\n    out_frag_color.a = out_frag_color.a * opacity;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision highp sampler2D;\\nprecision highp usampler2D;\\nprecision highp isampler2D;\\nprecision highp int;\\n\\nin vec2 out_clip_pos;\\nout vec4 out_frag_color;\\n\\nuniform int user_action;\\n\\nstruct Tile {\\n    int uniq; // Healpix cell\\n    int texture_idx; // Index in the texture buffer\\n    float start_time; // Absolute time that the load has been done in ms\\n    float empty;\\n};\\n\\nuniform int current_depth;\\n\\nuniform Tile textures_tiles[12];\\n\\nuniform float opacity;\\nuniform float current_time; // current time in ms\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform isampler2D tex1;\\nuniform isampler2D tex2;\\nuniform isampler2D tex3;\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nivec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture(tex3, uv.xy);\\n    } else {\\n        return ivec4(0, 0, 0, 1);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = float(get_pixels(uv).r);\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = float(get_pixels(uv).r);\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\nconst float TWICE_PI = 6.28318530718f;\\nconst float PI = 3.141592653589793f;\\nconst float FOUR_OVER_PI = 1.27323954474f;\\nconst float TRANSITION_Z = 0.66666666666f;\\nconst float TRANSITION_Z_INV = 1.5f;\\n\\nint quarter(vec2 p) {\\n    int x_neg = int(p.x < 0.0f);\\n    int y_neg = int(p.y < 0.0f);\\n    int q = (x_neg + y_neg) | (y_neg << 1);\\n    return q;\\n}\\n\\nfloat xpm1(vec2 p) {\\n    bool x_neg = (p.x < 0.0f);\\n    //debug_assert!(x_neg <= 1);\\n    bool y_neg = (p.y < 0.0f);\\n    //debug_assert!(y_neg <= 1);\\n    // The purpose it to have the same numerical precision for each base cell\\n    // by avoiding subtraction by 1 or 3 or 5 or 7\\n    float lon = atan(abs(p.y), abs(p.x));\\n    //debug_assert!(0.0 <= lon && lon <= PI / 2.0);\\n    float x02 = lon * FOUR_OVER_PI;\\n    //debug_assert!(0.0 <= x02 && x02 <= 2.0);\\n    if (x_neg != y_neg) { // Could be replaced by a sign copy from (x_neg ^ y_neg) << 32\\n        return 1.0f - x02;\\n    } else {\\n        return x02 - 1.0f;\\n    }\\n}\\n\\nfloat one_minus_z_pos(vec3 p) {\\n    //debug_assert!(z > 0.0);\\n    float d2 = dot(p.xy, p.xy); // z = sqrt(1 - d2) AND sqrt(1 - x) = 1 - x / 2 - x^2 / 8 - x^3 / 16 - 5 x^4/128 - 7 * x^5/256\\n\\n    if (d2 < 1e-1f) { // <=> dec > 84.27 deg\\n        return d2 * (0.5f + d2 * (0.125f + d2 * (0.0625f + d2 * (0.0390625f + d2 * 0.02734375f))));\\n    }\\n    return 1.0f - p.z;\\n}\\n\\nfloat one_minus_z_neg(vec3 p) {\\n    //debug_assert!(z < 0.0);\\n    float d2 = dot(p.xy, p.xy); // z = sqrt(1 - d2) AND sqrt(1 - x) = 1 - x / 2 - x^2 / 8 - x^3 / 16 - 5 x^4/128 - 7 * x^5/256\\n    if (d2 < 1e-1f) { // <=> dec < -84.27 deg\\n        // 0.5 * d2 + 0.125 * d2 * d2\\n        return d2 * (0.5f + d2 * (0.125f + d2 * (0.0625f + d2 * (0.0390625f + d2 * 0.02734375f))));\\n    }\\n    return p.z + 1.0f;\\n}\\n\\n// Z-Order curve projection.\\nint ij2z(int i, int j) {\\n    int i1 = i | (j << 16);\\n\\n    int j1 = (i1 ^ (i1 >> 8)) & 0x0000FF00;\\n    int i2 = i1 ^ j1 ^ (j1 << 8);\\n\\n    int j2 = (i2 ^ (i2 >> 4)) & 0x00F000F0;\\n    int i3 = i2 ^ j2 ^ (j2 << 4);\\n\\n    int j3 = (i3 ^ (i3 >> 2)) & 0x0C0C0C0C;\\n    int i4 = i3 ^ j3 ^ (j3 << 2);\\n\\n    int j4 = (i4 ^ (i4 >> 1)) & 0x22222222;\\n    int i5 = i4 ^ j4 ^ (j4 << 1);\\n\\n    return i5;\\n}\\n\\nstruct HashDxDy {\\n    int idx;\\n    float dx;\\n    float dy;\\n};\\n\\nuniform sampler2D ang2pixd;\\nHashDxDy hash_with_dxdy2(vec2 radec) {\\n    vec2 aa = vec2(radec.x/TWICE_PI + 1.0, (radec.y/PI) + 0.5);\\n    vec3 v = texture(ang2pixd, aa).rgb;\\n    return HashDxDy(\\n        int(v.x * 255.0),\\n        v.y,\\n        v.z\\n    );\\n}\\n// Returns the cell number (hash value) associated with the given position on the unit sphere, \\n// together with the offset `(dx, dy)` on the Euclidean plane of the projected position with\\n// respect to the origin of the cell (South vertex).\\n// # Inputs:\\n// - `depth` in `[0, 14]` (so that and HEALPix cell number can be stored on an unsigned integer)\\n// - `x`: in `[-1.0, 1.0]`\\n// - `y`: in `[-1.0, 1.0]`\\n// - `z`: in `[-1.0, 1.0]`\\n// # Output\\n// - the cell number (hash value) associated with the given position on the unit sphere,\\n//   in `[0, 12*nside^2[`\\n// - `dx`: the positional offset $\\\\in [0, 1[$ along the south-to-east axis\\n// - `dy`: the positional offset $\\\\in [0, 1[$ along the south-to-west axis\\n// # WARNING\\n// - The function assumes, without checking, that the input vector is a unit vector \\n//   (hence `x^2 + y^2 + z^2 = 1`) !!\\n// - Operations being made on simple precision float, the precision is lower than `~0.2 arcsec` only!!\\n// - At depth 13, the precision on `(dx, dy)` is better than `(1/512, 1/512)`, i.e. 2e-3.\\nHashDxDy hash_with_dxdy(int depth, vec3 p) {\\n    //assert!(depth <= 14);\\n    //assert!(-1.0 <= x && x <= 1.0);\\n    //assert!(-1.0 <= y && y <= 1.0);\\n    //assert!(-1.0 <= z && z <= 1.0);\\n    //debug_assert!(1.0 - (x * x + y * y + z * z) < 1e-5);\\n    // A f32 mantissa contains 23 bits.\\n    // - it basically means that when storing (x, y) coordinates,\\n    //   we can go as deep as depth 24 (or maybe 25)\\n    \\n    int nside = 1 << depth;\\n    float half_nside = float(nside) * 0.5f;\\n\\n    float x_pm1 = xpm1(p.xy);\\n    int q = quarter(p.xy);\\n\\n    int d0h = 0;\\n    vec2 p_proj = vec2(0.f);\\n    if (p.z > TRANSITION_Z) {\\n        // North polar cap, Collignon projection.\\n        // - set the origin to (PI/4, 0)\\n        float sqrt_3_one_min_z = sqrt(3.0f * one_minus_z_pos(p));\\n        p_proj = vec2(x_pm1 * sqrt_3_one_min_z, 2.0f - sqrt_3_one_min_z);\\n        d0h = q;\\n    } else if (p.z < -TRANSITION_Z) {\\n        // South polar cap, Collignon projection\\n        // - set the origin to (PI/4, -PI/2)\\n        float sqrt_3_one_min_z = sqrt(3.0f * one_minus_z_neg(p));\\n        p_proj = vec2(x_pm1 * sqrt_3_one_min_z, sqrt_3_one_min_z);\\n        d0h = q + 8;\\n    } else {\\n        // Equatorial region, Cylindrical equal area projection\\n        // - set the origin to (PI/4, 0)               if q = 2\\n        // - set the origin to (PI/4, -PI/2)           if q = 0\\n        // - set the origin to (0, -TRANSITION_LAT)    if q = 3\\n        // - set the origin to (PI/2, -TRANSITION_LAT) if q = 1\\n        // let zero_or_one = (x_cea as u8) & 1;\\n        float y_pm1 = p.z * TRANSITION_Z_INV;\\n        // |\\\\2/|\\n        // .3X1.\\n        // |/0\\\\|\\n        int q01 = int(x_pm1 > y_pm1);  // 0/1\\n        //debug_assert!(q01 == 0 || q01 == 1);\\n        int q12 = int(x_pm1 >= -y_pm1); // 0\\\\1\\n        //debug_assert!(q12 == 0 || q12 == 1);\\n        int q03 = 1 - q12; // 1\\\\0\\n        //let q13 = q01 ^ q12; debug_assert!(q13 == 0 || q13 == 1);\\n        int q1 = q01 & q12; // = 1 if q1, 0 else\\n        //debug_assert!( q1 == 0 ||  q1 == 1);\\n        // x: xcea - 0 if q3 | xcea - 2 if q1 | xcea - 1 if q0 or q2\\n        //let x_proj = x_pm1 - ((q01 + q12) as i8 - 1) as f32;\\n        // y: y - 0 if q2 | y - 1 if q1 or q3 | y - 2 if q0 \\n        //let y_proj = y_pm1 + (q01 + q03) as f32;\\n        p_proj = vec2(\\n            x_pm1 - float(q01 + q12 - 1),\\n            y_pm1 + float(q01 + q03)\\n        );\\n        // d0h: +8 if q0 | +4 if q3 | +5 if q1\\n        d0h = ((q01 + q03) << 2) + ((q + q1) & 3);\\n    }\\n\\n    // Coords inside the base cell\\n    float x = (half_nside * (p_proj.x + p_proj.y));\\n    float y = (half_nside * (p_proj.y - p_proj.x));\\n    int i = int(x);\\n    int j = int(y);\\n\\n    return HashDxDy(\\n        (d0h << (depth << 1)) | ij2z(i, j),\\n        x - float(i),\\n        y - float(j)\\n    );\\n}\\n\\nvec4 get_tile_color(vec3 pos) {\\n    HashDxDy result = hash_with_dxdy(0, pos.zxy);\\n\\n    int idx = result.idx;\\n\\n    vec2 uv = vec2(result.dy, result.dx);\\n\\n    Tile tile = textures_tiles[idx];\\n\\n    int idx_texture = tile.texture_idx >> 6;\\n    int off = tile.texture_idx & 0x3F;\\n    float idx_row = float(off >> 3); // in [0; 7]\\n    float idx_col = float(off & 0x7); // in [0; 7]\\n\\n    vec2 offset = (vec2(idx_col, idx_row) + uv)*0.125;\\n    vec3 UV = vec3(offset, float(idx_texture));\\n\\n    vec4 color = get_colormap_from_grayscale_texture(UV);\\n    // handle empty tiles\\n    //vec4 c1 = mix(c, blank_color, tile.empty);\\n    //vec4 c2 = mix(c, colormap_f(0.0), tile.empty);\\n    //vec4 color = mix(c1, c2, first_survey);\\n    \\n    // For empty tiles we set the alpha of the pixel to 0.0\\n    // so that what is behind will be plotted\\n    color.a *= (1.0 - tile.empty);\\n\\n    return color;\\n}\\n\\nconst float duration = 500.f; // 500ms\\nuniform int max_depth; // max depth of the HiPS\\n\\nuniform sampler2D position_tex;\\nuniform mat4 model;\\nvoid main() {\\n    vec2 uv = out_clip_pos * 0.5 + 0.5;\\n    vec3 n = texture(position_tex, uv).rgb;\\n\\n    vec3 frag_pos = vec3(model * vec4(n, 1.0));\\n\\n    vec4 c = get_tile_color(frag_pos);\\n    out_frag_color = c;\\n    out_frag_color.a = out_frag_color.a * opacity;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision highp sampler2D;\\nprecision highp usampler2D;\\nprecision highp isampler2D;\\nprecision highp int;\\n\\nin vec2 out_clip_pos;\\nout vec4 out_frag_color;\\n\\nuniform int user_action;\\n\\nstruct Tile {\\n    int uniq; // Healpix cell\\n    int texture_idx; // Index in the texture buffer\\n    float start_time; // Absolute time that the load has been done in ms\\n    float empty;\\n};\\n\\nuniform int current_depth;\\n\\nuniform Tile textures_tiles[12];\\n\\nuniform float opacity;\\nuniform float current_time; // current time in ms\\n\\n//const int MAX_NUM_TEX = 3;\\nuniform usampler2D tex1;\\nuniform usampler2D tex2;\\nuniform usampler2D tex3;\\nuniform int num_tex;\\n\\nuniform float scale;\\nuniform float offset;\\nuniform float blank;\\n\\nuniform float min_value;\\nuniform float max_value;\\nuniform int H;\\n\\nuniform float size_tile_uv;\\n\\nuniform int tex_storing_fits;\\n\\nuniform sampler2D colormaps;\\nuniform int num_colormaps;\\nuniform int colormap_id;\\n// can be either 0 or 1\\nuniform int reversed;\\n\\nvec4 colormap_f(float x) {\\n    x = mix(x, 1.0 - x, float(reversed));\\n    float id = (float(colormap_id) + 0.5) / float(num_colormaps);\\n\\n    return texture(colormaps, vec2(x, id));\\n}\\n\\nfloat linear_f(float x, float min_value, float max_value) {\\n    return clamp((x - min_value)/(max_value - min_value), 0.0, 1.0);\\n}\\n\\nfloat sqrt_f(float x, float min_value, float max_value) {\\n    float a = linear_f(x, min_value, max_value);\\n    return sqrt(a);\\n}\\n\\nfloat log_f(float x, float min_value, float max_value) {\\n    float y = linear_f(x, min_value, max_value);\\n    float a = 1000.0;\\n    return log(a*y + 1.0)/log(a);\\n}\\n\\nfloat asinh_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return asinh(10.0*d)/3.0;\\n}\\n\\nfloat pow2_f(float x, float min_value, float max_value) {\\n    float d = linear_f(x, min_value, max_value);\\n    return d*d;\\n}\\n\\nfloat transfer_func(int H, float x, float min_value, float max_value) {\\n    if (H == 0) {\\n        return linear_f(x, min_value, max_value);\\n    } else if (H == 1) {\\n        return sqrt_f(x, min_value, max_value);\\n    } else if (H == 2) {\\n        return log_f(x, min_value, max_value);\\n    } else if (H == 3) {\\n        return asinh_f(x, min_value, max_value);\\n    } else {\\n        return pow2_f(x, min_value, max_value);\\n    }\\n}\\n\\nuvec4 get_pixels(vec3 uv) {\\n    int idx_texture = int(uv.z);\\n    if (idx_texture == 0) {\\n        return texture(tex1, uv.xy);\\n    } else if (idx_texture == 1) {\\n        return texture(tex2, uv.xy);\\n    } else if (idx_texture == 2) {\\n        return texture(tex3, uv.xy);\\n    } else {\\n        return uvec4(0, 0, 0, 1);\\n    }\\n}\\n\\nvec3 reverse_uv(vec3 uv) {\\n    uv.y = size_tile_uv + 2.0*size_tile_uv*floor(uv.y / size_tile_uv) - uv.y;\\n\\n    return uv;\\n}\\n\\nvec4 get_colormap_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = float(get_pixels(uv).r);\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(colormap_f(alpha), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\n\\nuniform vec3 C;\\nuniform float K;\\nvec4 get_color_from_grayscale_texture(vec3 UV) {\\n    // FITS data pixels are reversed along the y axis\\n    vec3 uv = mix(UV, reverse_uv(UV), float(tex_storing_fits == 1));\\n\\n    float x = float(get_pixels(uv).r);\\n    //if (x == blank) {\\n    //    return blank_color;\\n    //} else {\\n        float alpha = x * scale + offset;\\n        alpha = transfer_func(H, alpha, min_value, max_value);\\n\\n        return mix(vec4(C * K * alpha, 1.0), vec4(0.0), float(alpha == 0.0));\\n    //}\\n}\\nconst float TWICE_PI = 6.28318530718f;\\nconst float PI = 3.141592653589793f;\\nconst float FOUR_OVER_PI = 1.27323954474f;\\nconst float TRANSITION_Z = 0.66666666666f;\\nconst float TRANSITION_Z_INV = 1.5f;\\n\\nint quarter(vec2 p) {\\n    int x_neg = int(p.x < 0.0f);\\n    int y_neg = int(p.y < 0.0f);\\n    int q = (x_neg + y_neg) | (y_neg << 1);\\n    return q;\\n}\\n\\nfloat xpm1(vec2 p) {\\n    bool x_neg = (p.x < 0.0f);\\n    //debug_assert!(x_neg <= 1);\\n    bool y_neg = (p.y < 0.0f);\\n    //debug_assert!(y_neg <= 1);\\n    // The purpose it to have the same numerical precision for each base cell\\n    // by avoiding subtraction by 1 or 3 or 5 or 7\\n    float lon = atan(abs(p.y), abs(p.x));\\n    //debug_assert!(0.0 <= lon && lon <= PI / 2.0);\\n    float x02 = lon * FOUR_OVER_PI;\\n    //debug_assert!(0.0 <= x02 && x02 <= 2.0);\\n    if (x_neg != y_neg) { // Could be replaced by a sign copy from (x_neg ^ y_neg) << 32\\n        return 1.0f - x02;\\n    } else {\\n        return x02 - 1.0f;\\n    }\\n}\\n\\nfloat one_minus_z_pos(vec3 p) {\\n    //debug_assert!(z > 0.0);\\n    float d2 = dot(p.xy, p.xy); // z = sqrt(1 - d2) AND sqrt(1 - x) = 1 - x / 2 - x^2 / 8 - x^3 / 16 - 5 x^4/128 - 7 * x^5/256\\n\\n    if (d2 < 1e-1f) { // <=> dec > 84.27 deg\\n        return d2 * (0.5f + d2 * (0.125f + d2 * (0.0625f + d2 * (0.0390625f + d2 * 0.02734375f))));\\n    }\\n    return 1.0f - p.z;\\n}\\n\\nfloat one_minus_z_neg(vec3 p) {\\n    //debug_assert!(z < 0.0);\\n    float d2 = dot(p.xy, p.xy); // z = sqrt(1 - d2) AND sqrt(1 - x) = 1 - x / 2 - x^2 / 8 - x^3 / 16 - 5 x^4/128 - 7 * x^5/256\\n    if (d2 < 1e-1f) { // <=> dec < -84.27 deg\\n        // 0.5 * d2 + 0.125 * d2 * d2\\n        return d2 * (0.5f + d2 * (0.125f + d2 * (0.0625f + d2 * (0.0390625f + d2 * 0.02734375f))));\\n    }\\n    return p.z + 1.0f;\\n}\\n\\n// Z-Order curve projection.\\nint ij2z(int i, int j) {\\n    int i1 = i | (j << 16);\\n\\n    int j1 = (i1 ^ (i1 >> 8)) & 0x0000FF00;\\n    int i2 = i1 ^ j1 ^ (j1 << 8);\\n\\n    int j2 = (i2 ^ (i2 >> 4)) & 0x00F000F0;\\n    int i3 = i2 ^ j2 ^ (j2 << 4);\\n\\n    int j3 = (i3 ^ (i3 >> 2)) & 0x0C0C0C0C;\\n    int i4 = i3 ^ j3 ^ (j3 << 2);\\n\\n    int j4 = (i4 ^ (i4 >> 1)) & 0x22222222;\\n    int i5 = i4 ^ j4 ^ (j4 << 1);\\n\\n    return i5;\\n}\\n\\nstruct HashDxDy {\\n    int idx;\\n    float dx;\\n    float dy;\\n};\\n\\nuniform sampler2D ang2pixd;\\nHashDxDy hash_with_dxdy2(vec2 radec) {\\n    vec2 aa = vec2(radec.x/TWICE_PI + 1.0, (radec.y/PI) + 0.5);\\n    vec3 v = texture(ang2pixd, aa).rgb;\\n    return HashDxDy(\\n        int(v.x * 255.0),\\n        v.y,\\n        v.z\\n    );\\n}\\n// Returns the cell number (hash value) associated with the given position on the unit sphere, \\n// together with the offset `(dx, dy)` on the Euclidean plane of the projected position with\\n// respect to the origin of the cell (South vertex).\\n// # Inputs:\\n// - `depth` in `[0, 14]` (so that and HEALPix cell number can be stored on an unsigned integer)\\n// - `x`: in `[-1.0, 1.0]`\\n// - `y`: in `[-1.0, 1.0]`\\n// - `z`: in `[-1.0, 1.0]`\\n// # Output\\n// - the cell number (hash value) associated with the given position on the unit sphere,\\n//   in `[0, 12*nside^2[`\\n// - `dx`: the positional offset $\\\\in [0, 1[$ along the south-to-east axis\\n// - `dy`: the positional offset $\\\\in [0, 1[$ along the south-to-west axis\\n// # WARNING\\n// - The function assumes, without checking, that the input vector is a unit vector \\n//   (hence `x^2 + y^2 + z^2 = 1`) !!\\n// - Operations being made on simple precision float, the precision is lower than `~0.2 arcsec` only!!\\n// - At depth 13, the precision on `(dx, dy)` is better than `(1/512, 1/512)`, i.e. 2e-3.\\nHashDxDy hash_with_dxdy(int depth, vec3 p) {\\n    //assert!(depth <= 14);\\n    //assert!(-1.0 <= x && x <= 1.0);\\n    //assert!(-1.0 <= y && y <= 1.0);\\n    //assert!(-1.0 <= z && z <= 1.0);\\n    //debug_assert!(1.0 - (x * x + y * y + z * z) < 1e-5);\\n    // A f32 mantissa contains 23 bits.\\n    // - it basically means that when storing (x, y) coordinates,\\n    //   we can go as deep as depth 24 (or maybe 25)\\n    \\n    int nside = 1 << depth;\\n    float half_nside = float(nside) * 0.5f;\\n\\n    float x_pm1 = xpm1(p.xy);\\n    int q = quarter(p.xy);\\n\\n    int d0h = 0;\\n    vec2 p_proj = vec2(0.f);\\n    if (p.z > TRANSITION_Z) {\\n        // North polar cap, Collignon projection.\\n        // - set the origin to (PI/4, 0)\\n        float sqrt_3_one_min_z = sqrt(3.0f * one_minus_z_pos(p));\\n        p_proj = vec2(x_pm1 * sqrt_3_one_min_z, 2.0f - sqrt_3_one_min_z);\\n        d0h = q;\\n    } else if (p.z < -TRANSITION_Z) {\\n        // South polar cap, Collignon projection\\n        // - set the origin to (PI/4, -PI/2)\\n        float sqrt_3_one_min_z = sqrt(3.0f * one_minus_z_neg(p));\\n        p_proj = vec2(x_pm1 * sqrt_3_one_min_z, sqrt_3_one_min_z);\\n        d0h = q + 8;\\n    } else {\\n        // Equatorial region, Cylindrical equal area projection\\n        // - set the origin to (PI/4, 0)               if q = 2\\n        // - set the origin to (PI/4, -PI/2)           if q = 0\\n        // - set the origin to (0, -TRANSITION_LAT)    if q = 3\\n        // - set the origin to (PI/2, -TRANSITION_LAT) if q = 1\\n        // let zero_or_one = (x_cea as u8) & 1;\\n        float y_pm1 = p.z * TRANSITION_Z_INV;\\n        // |\\\\2/|\\n        // .3X1.\\n        // |/0\\\\|\\n        int q01 = int(x_pm1 > y_pm1);  // 0/1\\n        //debug_assert!(q01 == 0 || q01 == 1);\\n        int q12 = int(x_pm1 >= -y_pm1); // 0\\\\1\\n        //debug_assert!(q12 == 0 || q12 == 1);\\n        int q03 = 1 - q12; // 1\\\\0\\n        //let q13 = q01 ^ q12; debug_assert!(q13 == 0 || q13 == 1);\\n        int q1 = q01 & q12; // = 1 if q1, 0 else\\n        //debug_assert!( q1 == 0 ||  q1 == 1);\\n        // x: xcea - 0 if q3 | xcea - 2 if q1 | xcea - 1 if q0 or q2\\n        //let x_proj = x_pm1 - ((q01 + q12) as i8 - 1) as f32;\\n        // y: y - 0 if q2 | y - 1 if q1 or q3 | y - 2 if q0 \\n        //let y_proj = y_pm1 + (q01 + q03) as f32;\\n        p_proj = vec2(\\n            x_pm1 - float(q01 + q12 - 1),\\n            y_pm1 + float(q01 + q03)\\n        );\\n        // d0h: +8 if q0 | +4 if q3 | +5 if q1\\n        d0h = ((q01 + q03) << 2) + ((q + q1) & 3);\\n    }\\n\\n    // Coords inside the base cell\\n    float x = (half_nside * (p_proj.x + p_proj.y));\\n    float y = (half_nside * (p_proj.y - p_proj.x));\\n    int i = int(x);\\n    int j = int(y);\\n\\n    return HashDxDy(\\n        (d0h << (depth << 1)) | ij2z(i, j),\\n        x - float(i),\\n        y - float(j)\\n    );\\n}\\n\\nvec4 get_tile_color(vec3 pos) {\\n    HashDxDy result = hash_with_dxdy(0, pos.zxy);\\n\\n    int idx = result.idx;\\n\\n    vec2 uv = vec2(result.dy, result.dx);\\n\\n    Tile tile = textures_tiles[idx];\\n\\n    int idx_texture = tile.texture_idx >> 6;\\n    int off = tile.texture_idx & 0x3F;\\n    float idx_row = float(off >> 3); // in [0; 7]\\n    float idx_col = float(off & 0x7); // in [0; 7]\\n\\n    vec2 offset = (vec2(idx_col, idx_row) + uv)*0.125;\\n    vec3 UV = vec3(offset, float(idx_texture));\\n\\n    vec4 color = get_colormap_from_grayscale_texture(UV);\\n    // handle empty tiles\\n    //vec4 c1 = mix(c, blank_color, tile.empty);\\n    //vec4 c2 = mix(c, colormap_f(0.0), tile.empty);\\n    //vec4 color = mix(c1, c2, first_survey);\\n\\n    // For empty tiles we set the alpha of the pixel to 0.0\\n    // so that what is behind will be plotted\\n    color.a *= (1.0 - tile.empty);\\n    return color;\\n}\\n\\nconst float duration = 500.f; // 500ms\\nuniform int max_depth; // max depth of the HiPS\\n\\nuniform sampler2D position_tex;\\nuniform mat4 model;\\nvoid main() {\\n    vec2 uv = out_clip_pos * 0.5 + 0.5;\\n    vec3 n = texture(position_tex, uv).rgb;\\n\\n    vec3 frag_pos = vec3(model * vec4(n, 1.0));\\n\\n    vec4 c = get_tile_color(frag_pos);\\n    out_frag_color = c;\\n    out_frag_color.a = out_frag_color.a * opacity;\\n}\"","module.exports = \"#version 300 es\\nprecision highp float;\\nprecision highp int;\\n\\nlayout (location = 0) in vec2 pos_clip_space;\\nout vec2 out_clip_pos;\\n\\nuniform vec2 ndc_to_clip;\\nuniform float czf;\\n\\nvoid main() {\\n    gl_Position = vec4(pos_clip_space / (ndc_to_clip * czf), 0.0, 1.0);\\n    out_clip_pos = pos_clip_space;\\n}\"","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File Popup.js\n * \n * Author: Thomas Boch [CDS]\n * \n *****************************************************************************/\n\nexport let Popup = (function() {\n    \n    \n    // constructor\n    function Popup(parentDiv, view) {\n        this.domEl = $('<div class=\"aladin-popup-container\"><div class=\"aladin-popup\"><a class=\"aladin-closeBtn\">&times;</a><div class=\"aladin-popupTitle\"></div><div class=\"aladin-popupText\"></div></div><div class=\"aladin-popup-arrow\"></div></div>');\n        this.domEl.appendTo(parentDiv);\n\n        this.view = view;\n\n\n        var self = this;\n        // close popup\n        this.domEl.find('.aladin-closeBtn').click(function() {self.hide();});\n        \n    };\n    \n    Popup.prototype.hide = function() {\n        this.domEl.hide();\n\n        this.view.mustClearCatalog=true;\n        this.view.catalogForPopup.hide();\n    };\n\n    Popup.prototype.show = function() {\n        this.domEl.show();\n    };\n\n    Popup.prototype.setTitle = function(title) {\n        this.domEl.find('.aladin-popupTitle').html(title || '');\n    };\n\n    Popup.prototype.setText = function(text) {\n        this.domEl.find('.aladin-popupText').html(text || '');\n        this.w = this.domEl.outerWidth();\n        this.h = this.domEl.outerHeight();\n    };\n\n    Popup.prototype.setSource = function(source) {\n        // remove reference to popup for previous source\n        if (this.source) {\n            this.source.popup = null;\n        }\n        source.popup = this;\n        this.source = source;\n        this.setPosition(source.x, source.y);\n    };\n\n    Popup.prototype.setPosition = function(x, y) {\n        var newX = x - this.w/2;\n        var newY = y - this.h;\n        if (this.source) {\n            newY += this.source.catalog.sourceSize/2;\n        }\n\n        this.domEl[0].style.left = newX + 'px';\n        this.domEl[0].style.top  = newY + 'px';\n    };\n    \n    return Popup;\n})();\n\n","// Copyright 2015 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File HealpixGrid\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nexport let HealpixGrid = (function() {\n\tfunction HealpixGrid() {\n\t}\n\t\n\tHealpixGrid.prototype.redraw = function(ctx, cornersXYViewMap, fov, norder) {\n\t\t// on dessine les lignes\n\t\tctx.lineWidth = 1;\n\t\tctx.strokeStyle = \"rgb(150,150,220)\";\n\t\tctx.beginPath();\n\t\tvar cornersXYView;\n\t\tvar ipix;\n\t\tfor (var k=0, len=cornersXYViewMap.length; k<len; k++) {\n\t\t\tcornersXYView = cornersXYViewMap[k];\n\t\t\tipix = cornersXYView.ipix;\n\t\t\t\n\t\t\t// draw pixel\n\t\t\tctx.moveTo(cornersXYView[0].vx, cornersXYView[0].vy);\n\t\t\tctx.lineTo(cornersXYView[1].vx, cornersXYView[1].vy);\n\t\t\tctx.lineTo(cornersXYView[2].vx, cornersXYView[2].vy);\n\t\t\t//ctx.lineTo(cornersXYView[3].vx, cornersXYView[3].vy);\n\t\t\t\n\n            //ctx.strokeText(ipix, (cornersXYView[0].vx + cornersXYView[2].vx)/2, (cornersXYView[0].vy + cornersXYView[2].vy)/2);\n\t\t}\n\t\tctx.stroke();\n\t\t\n\t\t// on dessine les numéros de pixel HEALpix\n        ctx.strokeStyle=\"#FFDDDD\";\n\t\tctx.beginPath();\n\t\tfor (var k=0, len=cornersXYViewMap.length; k<len; k++) {\n\t\t\tcornersXYView = cornersXYViewMap[k];\n\t\t\tipix = cornersXYView.ipix;\n\n            ctx.strokeText(norder + '/' + ipix, (cornersXYView[0].vx + cornersXYView[2].vx)/2, (cornersXYView[0].vy + cornersXYView[2].vy)/2);\n\t\t}\n\t\tctx.stroke();\n\t};\n\n\t\n\t\n\treturn HealpixGrid;\n})();\n","//=================================\n//            AstroMath\n//=================================\n\n// Class AstroMath having 'static' methods\nexport let AstroMath = function() {};\n\n// Constant for conversion Degrees => Radians (rad = deg*AstroMath.D2R)\nAstroMath.D2R = Math.PI/180.0;\n// Constant for conversion Radians => Degrees (deg = rad*AstroMath.R2D)\nAstroMath.R2D = 180.0/Math.PI;\n/**\n * Function sign\n * @param x value for checking the sign\n * @return -1, 0, +1 respectively if x < 0, = 0, > 0\n */\nAstroMath.sign = function(x) { return x > 0 ? 1 : (x < 0 ? -1 : 0 ); };\n\n/**\n * Function cosd(degrees)\n * @param x angle in degrees\n * @returns the cosine of the angle\n */\nAstroMath.cosd = function(x) {\n\tif (x % 90 == 0) {\n\t\tvar i = Math.abs(Math.floor(x / 90 + 0.5)) % 4;\n\t\tswitch (i) {\n\t\t\tcase 0:\treturn 1;\n\t\t\tcase 1:\treturn 0;\n\t\t\tcase 2:\treturn -1;\n\t\t\tcase 3:\treturn 0;\n\t\t}\n\t}\n\treturn Math.cos(x*AstroMath.D2R);\n};\n\n/**\n * Function sind(degrees)\n * @param x angle in degrees\n * @returns the sine of the angle\n */\nAstroMath.sind = function(x) {\n\tif (x % 90 === 0) {\n\t\tvar i = Math.abs(Math.floor(x / 90 - 0.5)) % 4;\n\t\tswitch (i) {\n\t\t\tcase 0:\treturn 1;\n\t\t\tcase 1:\treturn 0;\n\t\t\tcase 2:\treturn -1;\n\t\t\tcase 3:\treturn 0;\n\t\t}\n\t}\n\n\treturn Math.sin(x*AstroMath.D2R);\n};\n\n/**\n * Function tand(degrees)\n * @param x angle in degrees\n * @returns the tangent of the angle\n */\nAstroMath.tand = function(x) {\n\tvar resid;\n\n\tresid = x % 360;\n\tif (resid == 0 || Math.abs(resid) == 180) {\n\t\treturn 0;\n\t} else if (resid == 45 || resid == 225) {\n\t\treturn 1;\n\t} else if (resid == -135 || resid == -315) {\n\t\treturn -1\n\t}\n\n\treturn Math.tan(x * AstroMath.D2R);\n};\n\n/**\n * Function asin(degrees)\n * @param sine value [0,1]\n * @return the angle in degrees\n */\nAstroMath.asind = function(x) { return Math.asin(x)*AstroMath.R2D; };\n\n/**\n * Function acos(degrees)\n * @param cosine value [0,1]\n * @return the angle in degrees\n */\nAstroMath.acosd = function(x) { return Math.acos(x)*AstroMath.R2D; };\n\n/**\n * Function atan(degrees)\n * @param tangent value\n * @return the angle in degrees\n */\nAstroMath.atand = function(x) { return Math.atan(x)*AstroMath.R2D; };\n\n/**\n * Function atan2(y,x)\n * @param y y component of the vector\n * @param x x component of the vector\n * @return the angle in radians\n */\nAstroMath.atan2 = function(y,x) {\n\tif (y != 0.0) {\n\t\tvar sgny = AstroMath.sign(y);\n\t\tif (x != 0.0) {\n\t\t\tvar phi = Math.atan(Math.abs(y/x));\n\t\t\tif (x > 0.0) return phi*sgny;\n\t\t\telse if (x < 0) return (Math.PI-phi)*sgny;\n\t\t} else return (Math.PI/2)*sgny;\n\t} else {\n\t\treturn x > 0.0 ? 0.0 : (x < 0 ? Math.PI : 0.0/0.0);\n\t}\n}  \n\n/**\n * Function atan2d(y,x)\n * @param y y component of the vector\n * @param x x component of the vector\n * @return the angle in degrees\n */\nAstroMath.atan2d = function(y,x) {\n\treturn AstroMath.atan2(y,x)*AstroMath.R2D;\n}\n\n/*=========================================================================*/\n/**\n * Computation of hyperbolic cosine\n * @param x argument\n */\nAstroMath.cosh = function(x) {\n\treturn (Math.exp(x)+Math.exp(-x))/2;\n}\n\n/**\n * Computation of hyperbolic sine\n * @param x argument\n */\nAstroMath.sinh = function(x) {\n\treturn (Math.exp(x)-Math.exp(-x))/2;\n}\n\n/**\n * Computation of hyperbolic tangent\n * @param x argument\n */\nAstroMath.tanh = function(x) {\n\treturn (Math.exp(x)-Math.exp(-x))/(Math.exp(x)+Math.exp(-x));\n}\n\n/**\n * Computation of Arg cosh\n * @param x argument in degrees. Must be in the range [ 1, +infinity ]\n */\nAstroMath.acosh = function(x) {\n\treturn(Math.log(x+Math.sqrt(x*x-1.0)));\n}\n\n/**\n * Computation of Arg sinh\n * @param x argument in degrees\n */\nAstroMath.asinh = function(x) {\n\treturn(Math.log(x+Math.sqrt(x*x+1.0)));\n}\n\n/**\n * Computation of Arg tanh\n * @param x argument in degrees. Must be in the range ] -1, +1 [\n */\nAstroMath.atanh = function(x) {\n\treturn(0.5*Math.log((1.0+x)/(1.0-x)));\n}\n\n//=============================================================================\n//      Special Functions using trigonometry\n//=============================================================================\n/**\n * Computation of sin(x)/x\n *\t@param x in degrees.\n * For small arguments x <= 0.001, use approximation \n */\nAstroMath.sinc = function(x) {\n\tvar ax = Math.abs(x);\n\tvar y;\n\n\tif (ax <= 0.001) {\n\t\tax *= ax;\n\t\ty = 1 - ax*(1.0-ax/20.0)/6.0;\n\t} else {\n\t\ty = Math.sin(ax)/ax;\n\t}\n\n\treturn y;\n}\n\n/**\n * Computes asin(x)/x\n * @param x in degrees.\n * For small arguments x <= 0.001, use an approximation\n */\nAstroMath.asinc = function(x) {\n\tvar ax = Math.abs(x);\n\tvar y;\n\n\tif (ax <= 0.001) {\n\t\tax *= ax; \n\t\ty = 1 + ax*(6.0 + ax*(9.0/20.0))/6.0;\n\t} else {\n\t\ty = Math.asin(ax)/ax;\t// ???? radians ???\n\t}\n\n\treturn (y);\n}\n\n\n//=============================================================================\n/**\n * Computes the hypotenuse of x and y\n * @param x value\n * @param y value\n * @return sqrt(x*x+y*y)\n */\nAstroMath.hypot = function(x,y) {\n\treturn Math.sqrt(x*x+y*y);\n}\n\n/** Generate the rotation matrix from the Euler angles\n * @param z\tEuler angle\n * @param theta\tEuler angle\n * @param zeta\tEuler angles\n * @return R [3][3]\t\tthe rotation matrix\n * The rotation matrix is defined by:<pre>\n *    R =      R_z(-z)      *        R_y(theta)     *     R_z(-zeta)\n *   |cos.z -sin.z  0|   |cos.the  0 -sin.the|   |cos.zet -sin.zet 0|\n * = |sin.z  cos.z  0| x |   0     1     0   | x |sin.zet  cos.zet 0|\n *   |   0      0   1|   |sin.the  0  cos.the|   |   0        0    1|\n * </pre>\n */\nAstroMath.eulerMatrix = function(z, theta, zeta) {\n\tvar R = new Array(3);\n\tR[0] = new Array(3);\n\tR[1] = new Array(3);\n\tR[2] = new Array(3);\n\tvar cosdZ = AstroMath.cosd(z);\n\tvar sindZ = AstroMath.sind(z);\n\tvar cosdTheta = AstroMath.cosd(theta);\n\tvar w = AstroMath.sind(theta) ;\n\tvar cosdZeta = AstroMath.cosd(zeta);\n\tvar sindZeta = AstroMath.sind(zeta);\n\n\tR[0][0] = cosdZeta*cosdTheta*cosdZ - sindZeta*sindZ;\n\tR[0][1] = -sindZeta*cosdTheta*cosdZ - cosdZeta*sindZ;\n\tR[0][2] = -w*cosdZ;\n\n\tR[1][0] = cosdZeta*cosdTheta*sindZ + sindZeta*cosdZ;\n\tR[1][1] = -sindZeta*cosdTheta*sindZ + cosdZeta*cosdZ;\n\tR[1][2] = -w*sindZ;\n\n\tR[2][0] = -w*cosdZeta;\n\tR[2][1] = -w*cosdZ;\n\tR[2][2] = cosdTheta;\n\treturn R ;\n};\n\n\nAstroMath.displayMatrix = function(m) {\n\t// Number of rows\n\tvar nbrows = m.length;\n\t// Max column count\n\tvar nbcols = 0\n\tfor (var i=0; i<nbrows; i++) {\n\t\tif (m[i].length > nbcols) nbcols = m[i].length;\n\t}\n\tvar str = '<table>\\n';\n\tfor (var i=0; i<nbrows; i++) {\n\t\tstr += '<tr>';\n\t\tfor (var j=0; j<nbrows; j++) {\n\t\t\tstr += '<td>';\n\t\t\tif (i < m[i].length)\n\t\t\t\tstr += (m[i][j]).toString();\n\t\t\tstr += '</td>';\n\t\t}\n\t\tstr += '</td>\\n';\n\t}\n\tstr += '</table>\\n';\n\n\treturn str;\n}\n","\nimport { AstroMath } from \"./astroMath.js\";\n\nexport let Projection = function(lon0, lat0) {\n\tthis.PROJECTION = Projection.PROJ_TAN;\n\tthis.ROT = this.tr_oR(lon0, lat0);\n\n    this.longitudeIsReversed = false;\n}\n\n//var ROT;\n//var PROJECTION = Projection.PROJ_TAN;\t// Default projection\n\n\nProjection.PROJ_TAN = 1;\t/* Gnomonic projection*/\nProjection.PROJ_TAN2 = 2;\t/* Stereographic projection*/\nProjection.PROJ_STG = 2;\t\nProjection.PROJ_SIN = 3;\t/* Orthographic\t\t*/\nProjection.PROJ_SIN2 = 4;\t/* Equal-area \t\t*/\nProjection.PROJ_ZEA = 4;\t/* Zenithal Equal-area \t*/\nProjection.PROJ_ARC = 5;\t/* For Schmidt plates\t*/\nProjection.PROJ_SCHMIDT = 5;\t/* For Schmidt plates\t*/\nProjection.PROJ_AITOFF = 6;\t/* Aitoff Projection\t*/\nProjection.PROJ_AIT = 6;\t/* Aitoff Projection\t*/\nProjection.PROJ_GLS = 7;\t/* Global Sin (Sanson)\t*/\nProjection.PROJ_MERCATOR = 8;\nProjection.PROJ_MER = 8;\t\nProjection.PROJ_LAM = 9;\t/* Lambert Projection\t*/\nProjection.PROJ_LAMBERT = 9;\t\nProjection.PROJ_TSC = 10;\t/* Tangent Sph. Cube\t*/\nProjection.PROJ_QSC = 11;\t/* QuadCube Sph. Cube\t*/\nProjection.PROJ_MOLLWEIDE = 12;\nProjection.PROJ_LIST = [\n\t\"Mercator\",Projection.PROJ_MERCATOR,\n\t\"Gnomonic\",Projection.PROJ_TAN,\n\t\"Stereographic\",Projection.PROJ_TAN2,\n\t\"Orthographic\",Projection.PROJ_SIN,\n\t\"Zenithal\",Projection.PROJ_ZEA,\n\t\"Schmidt\",Projection.PROJ_SCHMIDT,\n\t\"Aitoff\",Projection.PROJ_AITOFF,\n\t\"Lambert\",Projection.PROJ_LAMBERT,\n//\t\"Tangential\",Projection.PROJ_TSC,\n//\t\"Quadrilaterized\",Projection.PROJ_QSC,\n];\nProjection.PROJ_NAME = [\n\t'-', 'Gnomonic', 'Stereographic', 'Orthographic', 'Equal-area', 'Schmidt plates',\n\t'Aitoff', 'Global sin', 'Mercator', 'Lambert'\n];\n\nProjection.prototype = { \n\t\n\t/** Set the center of the projection\n\t * \n\t * (ajout T. Boch, 19/02/2013)\n\t * \n\t * */\n\tsetCenter: function(lon0, lat0) {\n\t\tthis.ROT = this.tr_oR(lon0, lat0);\n\t},\n\n    /** Reverse the longitude\n      * If set to true, longitudes will increase from left to right\n      *\n      * */\n    reverseLongitude: function(b) {\n        this.longitudeIsReversed = b;\n    },\n\t\n\t/**\n\t * Set the projection to use\n\t * p = projection code\n\t */\n\tsetProjection: function(p) {\n\t\tthis.PROJECTION = p;\n\t},\n\n\n\t/**\n\t * Computes the projection of 1 point : ra,dec => X,Y\n\t * alpha, delta = longitude, lattitude\n\t */\n\tproject: function(alpha, delta) {\n        var u1 = this.tr_ou(alpha, delta);\t// u1[3]\n\t\tvar u2 = this.tr_uu(u1, this.ROT);\t// u2[3]\n\t\tvar P = this.tr_up(this.PROJECTION, u2);\t// P[2] = [X,Y]\n\t\tif (P == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif( this.longitudeIsReversed) {\n            return { X: P[0], Y: -P[1] };\n        }\n        else {\n\t\t    return { X: -P[0], Y: -P[1] };\n        }\n        //return { X: -P[0], Y: -P[1] };\n\t},\n\n\t/**\n\t * Computes the coordinates from a projection point : X,Y => ra,dec\n\t * return o = [ ra, dec ]\n\t */\n\tunproject: function(X,Y) {\n\t\tif ( ! this.longitudeIsReversed) {\n            X = -X;\n        }\n\t\tY = -Y;\n\t\tvar u1 = this.tr_pu(this.PROJECTION, X, Y);\t// u1[3]\n\t\tvar u2 = this.tr_uu1(u1, this.ROT);\t// u2[3]\n\t\tvar o = this.tr_uo(u2);\t// o[2]\n\n/*\n\t\tif (this.longitudeIsReversed) {\n            return { ra: 360-o[0], dec: o[1] };\n        }\n        else {\n\t\t    return { ra: o[0], dec: o[1] };\n        }\n*/\n        return { ra: o[0], dec: o[1] };\n\t},\n\n\t/**\n\t * Compute projections from unit vector\n\t * The center of the projection correspond to u = [1, 0, 0)\n\t * proj = projection system (integer code like _PROJ_MERCATOR_\n\t * u[3] = unit vector\n\t * return: an array [x,y] or null\n\t */\n\ttr_up: function(proj, u) {\n\t\tvar x = u[0]; var y = u[1]; var z = u[2];\n\t\tvar r, den;\n\t\tvar pp;\n\t\tvar X,Y;\n\n\t\tr = AstroMath.hypot(x,y);\t\t\t// r = cos b\n\t\tif (r == 0.0 && z == 0.0) return null;\n\n\t\tswitch(proj) {\n\t\t\tdefault:\n\t\t\t\tpp = null;\n\t\t\t\tbreak;\n\n\t\t\tcase Projection.PROJ_AITOFF:\n\t\t\t\tden = Math.sqrt(r*(r+x)/2.0); \t\t// cos b . cos l/2\n\t\t\t\tX = Math.sqrt(2.0*r*(r-x));\n\t\t\t\tden = Math.sqrt((1.0 + den)/2.0); \n\t\t\t\tX = X / den;\n\t\t\t\tY = z / den;\n\t\t\t\tif (y < 0.0) X = -X;\n\t\t\t\tpp = [ X, Y];\n\t\t\t\tbreak;\n\n\t\t\tcase Projection.PROJ_GLS:\n\t\t\t\tY = Math.asin(z);\t\t\t\t// sin b\n\t\t\t\tX = (r != 0) ? Math.atan2(y,x)*r : 0.0;\n\t\t\t\tpp = [ X, Y];\n\t\t\t\tbreak;\n\n\t\t\tcase Projection.PROJ_MERCATOR:\n\t\t\t\tif (r != 0) {\n\t\t\t\t\tX = Math.atan2(y,x);\n\t\t\t\t\tY = AstroMath.atanh(z);\n\t\t\t\t\tpp = [ X, Y];\n\t\t\t\t} else {\n\t\t\t\t\tpp = null;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase Projection.PROJ_TAN:\n\t\t\t\tif (x > 0.0) {\n\t\t\t\t\tX = y/x;\n\t\t\t\t\tY = z/x;\n\t\t\t\t\tpp = [ X, Y ];\n\t\t\t\t} else {\n\t\t\t\t\tpp = null;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase Projection.PROJ_TAN2:\n\t\t\t\tden = (1.0 + x)/2.0;\n\t\t\t\tif (den > 0.0)\t{\n\t\t\t\t\tX = y/den;\n\t\t\t\t\tY = z/den;\n\t\t\t\t\tpp = [ X, Y ];\n\t\t\t\t} else {\n\t\t\t\t\tpp = null;\n\t\t\t\t}\n\t\t\t \tbreak;\n\n\t\t\tcase Projection.PROJ_ARC:\n\t\t\t\tif (x <= -1.0) {\n\t\t\t\t\t// Distance of 180 degrees\n\t\t\t\t\tX = Math.PI\n\t\t\t\t\tY = 0.0;\n\t\t\t\t} else {\n\t\t\t\t\t// Arccos(x) = Arcsin(r)\n\t\t\t\t\tr = AstroMath.hypot(y,z);\n\t\t\t\t\tif (x > 0.0) den = AstroMath.asinc(r);\n\t\t\t\t\telse den = Math.acos(x)/r;\n\t\t\t\t\tX = y * den;\n\t\t\t\t\tY = z * den;\n\t\t\t\t}\n\t\t\t\tpp = [ X, Y ];\n\t\t\t\tbreak;\n\n\t\t\tcase Projection.PROJ_SIN:\n\t\t\t\tif (x >= 0.0) {\n\t\t\t\t\tX = y;\n\t\t\t\t\tY = z;\n\t\t\t\t\tpp = [ X, Y ];\n\t\t\t\t} else {\n\t\t\t\t\tpp = null;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase Projection.PROJ_SIN2:\t// Always possible\n\t\t\t\tden = Math.sqrt((1.0 + x)/2.0);\n\t\t\t\tif (den != 0)\t{\n\t\t\t\t\tX = y / den;\n\t\t\t\t\tY = z / den;\n\t\t\t\t} else {\n\t\t\t\t\t// For x = -1\n\t\t\t\t\tX = 2.0;\n\t\t\t\t\tY = 0.0;\n\t\t\t\t}\n\t\t\t\tpp = [ X, Y ];\n\t\t\t\tbreak;\n\n\t\t\tcase Projection.PROJ_LAMBERT:\t// Always possible\n\t\t\t\tY = z;\n\t\t\t\tX = 0;\n\t\t\t\tif (r != 0)\tX = Math.atan2(y,x);\n\t\t\t\tpp = [ X, Y ];\n\t\t\t\tbreak;\n\t  }\n\t  return pp;\n\t},\n\n\t/**\n\t * Computes Unit vector from a position in projection centered at position (0,0).\n\t * proj = projection code\n\t * X,Y : coordinates of the point in the projection\n\t * returns : the unit vector u[3] or a face number for cube projection. \n\t *           null if the point is outside the limits, or if the projection is unknown.\n\t */\n\ttr_pu: function( proj, X, Y ) {\n\t\tvar r,s,x,y,z;\n\n\t\tswitch(proj) {\n\t\t\tdefault:\n\t\t\treturn null;\n\n\t\t\tcase Projection.PROJ_AITOFF:\n\t\t\t\t// Limit is ellipse with axises \n\t\t\t\t// a = 2 * sqrt(2) ,  b = sqrt(2)\n\t\t\t\t// Compute dir l/2, b\n\t\t\t\tr = X*X/8.e0 + Y*Y/2.e0; \t// 1 - cos b . cos l/2\n\t\t\t\tif (r > 1.0) {\n\t  \t\t\t\t// Test outside domain */\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tx = 1.0 - r ;\t// cos b . cos l/2\n\t\t\t\ts = Math.sqrt(1.0 - r/2.0) ;\t// sqrt(( 1 + cos b . cos l/2)/2)\n\t\t\t\ty = X * s / 2.0;\n\t\t\t\tz = Y * s ;\n\t\t\t\t// From (l/2,b) to (l,b)\n\t\t\t\tr = AstroMath.hypot( x, y ) ;\t// cos b\n\t\t\t\tif (r != 0.0) {\n\t\t\t\t\ts = x;\n\t\t\t\t\tx = (s*s - y*y) /r;\n\t\t\t\t\ty = 2.0 * s * y/r;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase Projection.PROJ_GLS:\n\t\t\t\t// Limit is |Y| <= pi/2\n\t\t\t\tz = Math.sin(Y);\n\t\t\t\tr = 1 - z*z;\t\t// cos(b) ** 2\n\t\t\t\tif (r < 0.0) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tr = Math.sqrt(r);\t\t// cos b\n\t\t\t\tif (r != 0.0) {\n\t\t\t\t\ts = X/r;\t// Longitude\n\t\t\t\t} else {\n\t\t\t\t\ts = 0.0;\t// For poles\n\t\t\t\t}\n\t\t\t\tx = r * Math.cos(s);\n\t\t\t\ty = r * Math.sin(s);\n\t\t\t\tbreak;\n\n\t\t\tcase Projection.PROJ_MERCATOR:\n\t\t\t\tz = AstroMath.tanh(Y);\n\t\t\t\tr = 1.0/AstroMath.cosh(Y);\n\t\t\t\tx = r * Math.cos(X);\n\t\t\t\ty = r * Math.sin(X);\n\t\t\t\tbreak;\n\n\t\t\tcase Projection.PROJ_LAMBERT:\n\t\t\t\t// Always possible\n\t\t\t\tz = Y;\n\t\t\t\tr = 1 - z*z;\t\t// cos(b) ** 2\n\t\t\t\tif (r < 0.0) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tr = Math.sqrt(r);\t\t// cos b\n\t\t\t\tx = r * Math.cos(X);\n\t\t\t\ty = r * Math.sin(X);\n\t\t\t\tbreak;\n\t\n\t\t\tcase Projection.PROJ_TAN:\n\t\t\t\t// No limit\n\t\t\t\tx = 1.0 / Math.sqrt(1.0 + X*X + Y*Y);\n\t\t\t\ty = X * x;\n\t\t\t\tz = Y * x;\n\t\t\t\tbreak;\n\n\t\t\tcase Projection.PROJ_TAN2:\n\t\t\t\t// No limit\n\t\t\t\tr = (X*X + Y*Y)/4.0;\n\t\t\t\ts = 1.0 + r;\n\t\t\t\tx = (1.0 - r)/s;\n\t\t\t\ty = X / s;\n\t\t\t\tz = Y / s;\n\t\t\t\tbreak;\n\n\t\t\tcase Projection.PROJ_ARC:\n\t\t\t\t// Limit is circle, radius PI\n\t\t\t\tr = AstroMath.hypot(X, Y);\n\t\t\t\tif (r > Math.PI) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\ts = AstroMath.sinc(r);\n\t\t\t\tx = Math.cos(r);\n\t\t\t\ty = s * X;\n\t\t\t\tz = s * Y;\n\t\t\t\tbreak;\n\n\t\t\tcase Projection.PROJ_SIN:\n\t\t\t\t// Limit is circle, radius 1\n\t\t\t\ts = 1.0 - X*X - Y*Y;\n\t\t\t\tif (s < 0.0) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tx = Math.sqrt(s);\n\t\t\t\ty = X;\n\t\t\t\tz = Y;\n\t\t\t\tbreak;\n\n\t\t\tcase Projection.PROJ_SIN2:\n\t\t\t\t// Limit is circle, radius 2\t*/\n\t\t\t\tr = (X*X + Y*Y)/4.e0;\n\t\t\t\tif (r > 1.0) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\ts = Math.sqrt(1.0 - r);\n\t\t\t\tx = 1.0 - 2.0 * r;\n\t\t\t\ty = s * X;\n\t\t\t\tz = s * Y;\n\t\t\t\tbreak;\n\t  }\n\t  return [ x,y,z ];\n\t},\n\n\t/**\n\t * Creates the rotation matrix R[3][3] defined as\n\t * R[0] (first row) = unit vector towards Zenith\n\t * R[1] (second row) = unit vector towards East\n\t * R[2] (third row) = unit vector towards North\n\t * o[2] original angles\n\t * @return rotation matrix\n\t */\n\ttr_oR: function(lon, lat) {\n\t\tvar R = new Array(3);\n\t\tR[0] = new Array(3);\n\t\tR[1] = new Array(3);\n\t\tR[2] = new Array(3);\n\t\tR[2][2] =  AstroMath.cosd(lat);\n\t\tR[0][2] =  AstroMath.sind(lat);\n\t\tR[1][1] =  AstroMath.cosd(lon);\n\t\tR[1][0] =  -AstroMath.sind(lon);\n\t\tR[1][2] =  0.0;\n\t\tR[0][0] =  R[2][2] * R[1][1];  \n\t\tR[0][1] = -R[2][2] * R[1][0];\n\t\tR[2][0] = -R[0][2] * R[1][1];\n\t\tR[2][1] =  R[0][2] * R[1][0];\n\t\treturn R;\n\t},\n\n\t/**\n\t * Transformation from polar coordinates to Unit vector\n\t * @return U[3]\n\t */\n\ttr_ou: function(ra, dec) {\n\t\tvar u = new Array(3);\n\t\tvar cosdec = AstroMath.cosd(dec);\n\n\t\tu[0] = cosdec * AstroMath.cosd(ra);\n\t\tu[1] = cosdec * AstroMath.sind(ra);\n\t\tu[2] = AstroMath.sind(dec);\n\n\t\treturn u;\n\t},\n\n\t/**\n\t * Rotates the unit vector u1 using the rotation matrix\n\t * u1[3] unit vector\n\t * R[3][3] rotation matrix\n\t * return resulting unit vector u2[3]\n\t */\n\ttr_uu: function( u1, R ) {\n\t\tvar u2 = new Array(3);\n\t\tvar x = u1[0];\n\t\tvar y = u1[1];\n\t\tvar z = u1[2];\n\n\t\tu2[0] = R[0][0]*x + R[0][1]*y + R[0][2]*z ;\n\t\tu2[1] = R[1][0]*x + R[1][1]*y + R[1][2]*z ;\n\t\tu2[2] = R[2][0]*x + R[2][1]*y + R[2][2]*z ;\n\n\t\treturn u2;\n\t},\n\n\t/**\n\t * reverse rotation the unit vector u1 using the rotation matrix\n\t * u1[3] unit vector\n\t * R[3][3] rotation matrix\n\t * return resulting unit vector u2[3]\n\t */\n\ttr_uu1: function( u1 , R) {\n\t\tvar u2 = new Array(3);\n\t\tvar x = u1[0];\n\t\tvar y = u1[1];\n\t\tvar z = u1[2];\n\n\t\tu2[0] = R[0][0]*x + R[1][0]*y + R[2][0]*z;\n\t\tu2[1] = R[0][1]*x + R[1][1]*y + R[2][1]*z;\n\t\tu2[2] = R[0][2]*x + R[1][2]*y + R[2][2]*z;\n\n\t\treturn u2;\n\t},\n\n\t/**\n\t * Computes angles from direction cosines\n\t * u[3] = direction cosines vector\n\t * return o = [ ra, dec ]\n\t */\n\ttr_uo: function(u) {\n\t\tvar x = u[0]; var y = u[1]; var z = u[2];  \n\t\tvar r2 = x*x + y*y;\n\t\tvar ra, dec;\n\t\tif (r2  == 0.0) {\n\t \t\t// in case of poles\n\t\t\tif (z == 0.0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tra = 0.0;\n\t\t\tdec = z > 0.0 ? 90.0 : -90.0;\n\t\t} else {\n\t\t\tdec = AstroMath.atand( z / Math.sqrt(r2));\n\t\t\tra  = AstroMath.atan2d (y , x );\n\t\t\tif (ra < 0.0) ra += 360.0;\n\t\t}\n\n\t\treturn [ ra, dec ];\n\t}\n}\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File CooFrameEnum\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\n import { Projection } from \"./libs/astro/projection.js\";\n\n export let ProjectionEnum = {\n    SIN: Projection.PROJ_SIN,\n    AITOFF:  Projection.PROJ_AITOFF,\n    MERCATOR:  Projection.PROJ_MERCATOR,\n    ARC:  Projection.PROJ_ARC,\n    TAN:  Projection.PROJ_TAN,\n    MOL: Projection.PROJ_MOLLWEIDE,\n };\n","//=================================\n// Class Coo\n//=================================\n\nimport { AstroMath } from \"./astroMath.js\";\n\n/**\n * Constructor\n * @param longitude longitude (decimal degrees)\n * @param latitude latitude (decimal degrees)\n * @param prec precision\n * (8: 1/1000th sec, 7: 1/100th sec, 6: 1/10th sec, 5: sec, 4: 1/10th min, 3: min, 2: 1/10th deg, 1: deg\n */\nexport let Coo = function(longitude, latitude, prec) {\n\tthis.lon = longitude;\n\tthis.lat = latitude;\n\tthis.prec = prec;\n\tthis.frame = null;\n\n\tthis.computeDirCos();\n};\n\nCoo.factor = [ 3600.0, 60.0, 1.0 ];\nCoo.prototype = {\n\tsetFrame: function(astroframe) {\n\t\tthis.frame = astroframe;\n\t},\n\tcomputeDirCos: function() {\n\t\tvar coslat = AstroMath.cosd(this.lat);\n\n\t\tthis.x = coslat*AstroMath.cosd(this.lon);\n\t\tthis.y = coslat*AstroMath.sind(this.lon);\n\t\tthis.z = AstroMath.sind(this.lat);\t\n\t}, \n\tcomputeLonLat: function() {\n\t\tvar r2 = this.x*this.x+this.y*this.y;\n\t\tthis.lon = 0.0;\n\t\tif (r2 == 0.0) {\n\t\t\t// In case of poles\n\t\t\tif (this.z == 0.0) {\n\t\t\t\tthis.lon = 0.0/0.0;\n\t\t\t\tthis.lat = 0.0/0.0;\n\t\t\t} else {\n\t\t\t\tthis.lat = (this.z > 0.0) ? 90.0 : -90.0;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.lon = AstroMath.atan2d(this.y, this.x);\n\t\t\tthis.lat = AstroMath.atan2d(this.z, Math.sqrt(r2));\n\t\t\tif (this.lon < 0) this.lon += 360.0;\n\t\t}\n\t},\n\n  /**\n    * Squared distance between 2 points (= 4.sin<sup>2</sup>(r/2))\n    * @param  pos      another position on the sphere\n    * @return ||pos-this||<sup>2</sup> = 4.sin<sup>2</sup>(r/2)\n   **/\n   dist2: function(pos) {\n//    \tif ((this.x==0)&&(this.y==0)&&(this.z==0)) return(0./0.);\n//    \tif ((pos.x==0)&&(pos.y==0)&&(pos.z==0)) return(0./0.);\n\tvar w = pos.x - this.x;\n\tvar r2 = w * w;\n\tw = pos.y - this.y; r2 += w * w;\n\tw = pos.z - this.z; r2 += w * w;\n\treturn r2;\n   },\n\n   /**\n    * Distance between 2 points on the sphere.\n    * @param  pos another position on the sphere\n    * @return distance in degrees in range [0, 180]\n   **/\n    distance: function(pos) {\n      // Take care of NaN:\n    \tif ((pos.x==0)&&(pos.y==0)&&(pos.z==0)) return(0./0.);\n    \tif ((this.x==0)&&(this.y==0)&&(this.z==0)) return(0./0.);\n      return (2. * AstroMath.asind(0.5 * Math.sqrt(this.dist2(pos))));\n    },\n\n   /**\n    * Transform the position into another frame.\n    * @param new_frame\tThe frame of the resulting position.\n   **/\n   convertTo: function(new_frame) {\n\t\t// Verify first if frames identical -- then nothing to do !\n\t\tif (this.frame.equals(new_frame)) {\n\t    \t\treturn;\n\t\t}\n\n\t\t// Move via ICRS\n\t\tthis.frame.toICRS(this.coo);\t// Position now in ICRS\n\t\tnew_frame.fromICRS(this.coo);\t// Position now in new_frame\n\t\tthis.frame = new_frame;\n\t\tthis.lon = this.lat = 0./0.;\t// Actual angles not recomputed\n   },\n\n    /**\n     * Rotate a coordinate (apply a rotation to the position).\n     * @param R [3][3] Rotation Matrix\n     */\n    rotate: function(R) {\n      var X, Y, Z;\n\t\tif (R == Umatrix3) return;\n\t\tX = R[0][0]*this.x + R[0][1]*this.y + R[0][2]*this.z;\n\t\tY = R[1][0]*this.x + R[1][1]*this.y + R[1][2]*this.z;\n\t\tZ = R[2][0]*this.x + R[2][1]*this.y + R[2][2]*this.z;\n    \t// this.set(X, Y, Z); Not necessary to compute positions each time.\n\t\tthis.x = X; this.y = Y; this.z = Z;\n\t\tthis.lon = this.lat = 0./0.;\n    },\n\n    /**\n     * Rotate a coordinate (apply a rotation to the position) in reverse direction.\n     * The method is the inverse of rotate.\n     * @param R [3][3] Rotation Matrix\n     */\n    rotate_1: function(R) {\n      var X, Y, Z;\n      if (R == Umatrix3) return;\n\t\tX = R[0][0]*this.x + R[1][0]*this.y + R[2][0]*this.z;\n\t\tY = R[0][1]*this.x + R[1][1]*this.y + R[2][1]*this.z;\n\t\tZ = R[0][2]*this.x + R[1][2]*this.y + R[2][2]*this.z;\n    \t// this.set(X, Y, Z); Not necessary to compute positions each time.\n\t\tthis.x = X; this.y = Y; this.z = Z;\n\t\tthis.lon = this.lat = 0./0.;\n    },\n\n\n    /**\n     * Test equality of Coo.\n     * @param coo Second coordinate to compare with\n     * @return  True if the two coordinates are equal\n     */\n    equals: function(coo) {\n\t\treturn this.x == coo.x && this.y == coo.y && this.z == coo.z;\n    },\n\n\t/**\n\t * parse a coordinate string. The coordinates can be in decimal or sexagesimal\n\t * @param str string to parse\n\t * @return true if the parsing succeded, false otherwise\n\t */\n\tparse: function(str) {\n\t\tvar p = str.indexOf('+');\n\t\tif (p < 0) p = str.indexOf('-');\n\t\tif (p < 0) p = str.indexOf(' ');\n\t\tif (p < 0) {\n\t\t\tthis.lon = 0.0/0.0;\n\t\t\tthis.lat = 0.0/0.0;\n\t\t\tthis.prec = 0;\n\t\t\treturn false;\n\t\t}\n\t\tvar strlon = str.substring(0,p);\n\t\tvar strlat = str.substring(p);\n\t\n\t\tthis.lon = this.parseLon(strlon);\t// sets the precision parameter\n\t\tthis.lat = this.parseLat(strlat);\t// sets the precision parameter\n\t\treturn true;\n\t},\n\n\tparseLon: function(str) {\n\t\tvar str = str.trim();\n        str = str.replace(/:/g, ' ');\n\n\t\tif (str.indexOf(' ') < 0) {\n\t\t\t// The longitude is a integer or decimal number\n\t\t\tvar p = str.indexOf('.');\n\t\t\tthis.prec = p < 0 ? 0 : str.length - p - 1;\n\t\t\treturn parseFloat(str);\n\t\t} else {\n\t\t\tvar stok = new Tokenizer(str,' ');\n\t\t\tvar i = 0;\n\t\t\tvar l = 0;\n\t\t\tvar pr = 0;\n\t\t\twhile (stok.hasMore()) {\n\t\t\t\tvar tok = stok.nextToken();\n\t\t\t\tvar dec = tok.indexOf('.');\n\t\t\t\tl += parseFloat(tok)*Coo.factor[i];\n//\t\t\t\tpr = dec < 0 ? 1 : 2;\n\t\t\t\tswitch (i) {\n\t\t\t\t\tcase 0: pr = dec < 0 ? 1 : 2; break;\n\t\t\t\t\tcase 1: pr = dec < 0 ? 3 : 4; break;\n\t\t\t\t\tcase 2: pr = dec < 0 ? 5 : 4+tok.length-dec;\n\t\t\t\t\tdefault: break;\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tthis.prec = pr;\n\t\t\treturn l*15/3600.0;\t\n\t\t}\n\t},\n\t\t\t\n\tparseLat: function(str) {\n\t\tvar str = str.trim();\n        str = str.replace(/:/g, ' ');\n\n\t\tvar sign;\n\t\tif (str.charAt(0) == '-') {\n\t\t\tsign = -1;\n\t\t\tstr = str.substring(1);\n\t\t} else if (str.charAt(0) == '-') {\n\t\t\tsign = 1;\n\t\t\tstr = str.substring(1);\n\t\t} else {\n\t\t\t// No sign specified\n\t\t\tsign = 1;\n\t\t}\n\t\tif (str.indexOf(' ') < 0) {\n\t\t\t// The longitude is a integer or decimal number\n\t\t\tvar p = str.indexOf('.');\n\t\t\tthis.prec = p < 0 ? 0 : str.length - p - 1;\n\t\t\treturn parseFloat(str)*sign;\n\t\t} else {\n\t\t\tvar stok = new Tokenizer(str,' ');\n\t\t\tvar i = 0;\n\t\t\tvar l = 0;\n\t\t\tvar pr = 0;\n\t\t\twhile (stok.hasMore()) {\n\t\t\t\tvar tok = stok.nextToken();\n\t\t\t\tvar dec = tok.indexOf('.');\n\t\t\t\tl += parseFloat(tok)*Coo.factor[i];\n\t\t\t\tswitch (i) {\n\t\t\t\t\tcase 0: pr = dec < 0 ? 1 : 2; break;\n\t\t\t\t\tcase 1: pr = dec < 0 ? 3 : 4; break;\n\t\t\t\t\tcase 2: pr = dec < 0 ? 5 : 4+tok.length-dec;\n\t\t\t\t\tdefault: break;\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tthis.prec = pr;\n\t\t\treturn l*sign/3600.0;\t\n\t\t}\n\t},\n\n\t/**\n\t * Format coordinates according to the options\n\t * @param options 'd': decimal, 's': sexagésimal, '/': space separated, '2': return [ra,dec] in an array\n\t * @return the formatted coordinates\n\t */\n\tformat: function(options) {\n\t\tif (isNaN(this.lon)) this.computeLonLat();\n\t\tvar strlon = \"\", strlat = \"\";\n\t\tif (options.indexOf('d') >= 0) {\n\t\t\t// decimal display\n\t\t\tstrlon = Numbers.format(this.lon, this.prec);\n\t\t\tstrlat = Numbers.format(this.lat, this.prec);\n\t\t} else {\n\t\t\t// sexagesimal display\n\t\t\tvar hlon = this.lon/15.0;\n\t\t\tvar strlon = Numbers.toSexagesimal(hlon, this.prec+1, false);\n\t\t\tvar strlat = Numbers.toSexagesimal(this.lat, this.prec, false);\n\t\t}\n\t\tif (this.lat > 0) strlat = '+'+strlat;\n\n\t\tif (options.indexOf('/') >= 0) {\n\t\t\treturn strlon+' '+strlat;\n\t\t} else if (options.indexOf('2') >= 0) {\n\t\t\treturn [strlon, strlat];\n\t\t}\n\t\treturn strlon+strlat;\n\t}\n\t\t\n}\n\n/**\n * Distance between 2 points on the sphere.\n * @param coo1 firs\tvar coslat = AstroMath.cosd(this.lat);\n\n\tthis.x = coslat*AstroMath.cosd(this.lon);\n\tthis.y = coslat*AstroMath.sind(this.lon);\n\tthis.z = AstroMath.sind(this.lat);\nt coordinates point\n * @param coo2 second coordinates point\n * @return distance in degrees in range [0, 180]\n**/\n/*\nCoo.distance = function(Coo coo1, Coo coo2) {\n\treturn Coo.distance(coo1.lon, coo1.lat, coo2.lon, coo2.lat);\n}\n*/\n/**\n * Distance between 2 points on the sphere.\n * @param lon1 longitude of first point in degrees\n * @param lat1 latitude of first point in degrees\n * @param lon2 longitude of second point in degrees\n * @param lat2 latitude of second point in degrees\n * @return distance in degrees in range [0, 180]\n**/\n/*\nCoo.distance = function(lon1, lat1, lon2, lat2) {\n\tvar c1 = AstroMath.cosd(lat1);\n\tvar c2 = AstroMath.cosd(lat2);\n\n\tvar w, r2;\n\tw = c1 * AstroMath.cosd(lon1) - c2 * AstroMath.cosd(lon2);\n\tr2 = w*w;\n\tw = c1 * AstroMath.sind(lon1) - c2 * AstroMath.sind(lon2);\n\tr2 += w*w;\n\tw = AstroMath.sind(lat1) - AstroMath.sind(lat2);\n\tr2 += w*w;\n\n\treturn 2. * AstroMath.asind(0.5 * Math.sqrt(r2));\n}\n\n\n//===================================\n// Class Tokenizer (similar to Java)\n//===================================\n\n/**\n * Constructor\n * @param str String to tokenize\n * @param sep token separator char\n */\nfunction Tokenizer(str, sep) {\n\tthis.string = Strings.trim(str, sep);\n\tthis.sep = sep;\n\tthis.pos = 0;\n}\n\nTokenizer.prototype = {\n\t/**\n\t * Check if the string has more tokens\n\t * @return true if a token remains (read with nextToken())\n\t */\n\thasMore: function() {\n\t\treturn this.pos < this.string.length;\n\t},\n\n\t/**\n\t * Returns the next token (as long as hasMore() is true)\n\t * @return the token string\n\t */\n\tnextToken: function() {\n\t\t// skip all the separator chars\n\t\tvar p0 = this.pos;\n\t\twhile (p0 < this.string.length && this.string.charAt(p0) == this.sep) p0++;\n\t\tvar p1 = p0;\n\t\t// get the token\n\t\twhile (p1 < this.string.length && this.string.charAt(p1) != this.sep) p1++;\n\t\tthis.pos = p1;\n\t\treturn this.string.substring(p0, p1);\n\t},\n}\n\n//================================\n// Class Strings (static methods)\n//================================\nfunction Strings() {}\n\n/**\n * Removes a given char at the beginning and the end of a string\n * @param str string to trim\n * @param c char to remove\n * @return the trimmed string\n */\n\nStrings.trim = function(str, c) {\n\tvar p0=0, p1=str.length-1;\n\twhile (p0 < str.length && str.charAt(p0) == c) p0++;\n\tif (p0 == str.length) return \"\";\n\twhile (p1 > p0 && str.charAt(p1) == c) p1--;\n\treturn str.substring(p0, p1+1);\n}\n\n//================================\n// Class Numbers (static methods)\n//================================\nfunction Numbers() {}\n//                0  1   2    3     4      5       6        7         8          9\nNumbers.pow10 = [ 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000,\n//      10           11            12             13              14\n\t10000000000, 100000000000, 1000000000000, 10000000000000, 100000000000000 ];\n//                 0    1     2      3       4        5         6          7\nNumbers.rndval = [ 0.5, 0.05, 0.005, 0.0005, 0.00005, 0.000005, 0.0000005, 0.00000005,\n//      8            9             10             11              12\n\t0.000000005, 0.0000000005, 0.00000000005, 0.000000000005, 0.0000000000005,\n//      13                14\n\t0.00000000000005, 0.00000000000005 ];\n/**\n * Format a integer or decimal number, adjusting the value with 'prec' decimal digits\n * @param num number (integer or decimal)\n * @param prec precision (= number of decimal digit to keep or append)\n * @return a string with the formatted number\n */\nNumbers.format = function(num, prec) {\n\t\tif (prec <= 0) {\n\t\t\t// Return an integer number\n\t\t\treturn (Math.round(num)).toString();\n\t\t}\n\t\tvar str = num.toString();\n\t\tvar p = str.indexOf('.');\n\t\tvar nbdec = p >= 0 ? str.length-p-1 : 0;\n\t\tif (prec >= nbdec) {\n\t\t\tif (p < 0) str += '.';\n\t\t\tfor (var i=0; i<prec-nbdec; i++)\n\t\t\t\tstr += '0';\n\t\t\treturn str;\n\t\t}\n\t\t// HERE: prec > 0 and prec < nbdec\n\t\tstr = (num+Numbers.rndval[prec]).toString();\n\t\treturn str.substr(0, p+prec+1);\n}\n\n\n/**\n * Convert a decimal coordinate into sexagesimal string, according to the given precision<br>\n * 8: 1/1000th sec, 7: 1/100th sec, 6: 1/10th sec, 5: sec, 4: 1/10th min, 3: min, 2: 1/10th deg, 1: deg\n * @param num number (integer or decimal)\n * @param prec precision (= number of decimal digit to keep or append)\n * @param plus if true, the '+' sign is displayed\n * @return a string with the formatted sexagesimal number\n */\nNumbers.toSexagesimal = function(num, prec, plus) {\n\tvar resu = \"\";\n\tvar sign = num < 0 ? '-' : (plus ? '+' : '');\n\tvar n = Math.abs(num);\n\n\tswitch (prec) {\n\t\tcase 1:\t// deg\n\t\t\tvar n1 = Math.round(n);\n\t\t\treturn sign+n1.toString();\n\t\tcase 2:\t// deg.d\n\t\t\treturn sign+Numbers.format(n, 1);\n\t\tcase 3:\t// deg min\n\t\t\tvar n1 = Math.floor(n);\n\t\t\tvar n2 = Math.round((n-n1)*60);\n\t\t\treturn sign+n1+' '+n2;\n\t\tcase 4:\t// deg min.d\n\t\t\tvar n1 = Math.floor(n);\n\t\t\tvar n2 = (n-n1)*60;\n\t\t\treturn sign+n1+' '+Numbers.format(n2, 1);\n\t\tcase 5:\t// deg min sec\n\t\t\tvar n1 = Math.floor(n);\t// d\n\t\t\tvar n2 = (n-n1)*60;\t\t// M.d\n\t\t\tvar n3 = Math.floor(n2);// M\n\t\t\tvar n4 = Math.round((n2-n3)*60);\t// S\n\t\t\treturn sign+n1+' '+n3+' '+n4;\n\t\tcase 6:\t// deg min sec.d\n\t\tcase 7:\t// deg min sec.dd\n\t\tcase 8:\t// deg min sec.ddd\n\t\t\tvar n1 = Math.floor(n);\t// d\n\t\t\tif (n1<10) n1 = '0' + n1;\n\t\t\tvar n2 = (n-n1)*60;\t\t// M.d\n\t\t\tvar n3 = Math.floor(n2);// M\n\t\t\tif (n3<10) n3 = '0' + n3;\n\t\t\tvar n4 = (n2-n3)*60;\t\t// S.ddd\n\t\t\treturn sign+n1+' '+n3+' '+Numbers.format(n4, prec-5);\n\t\tdefault:\n\t\t\treturn sign+Numbers.format(n, 1);\n\t}\n}\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File CooFrameEnum\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n \nexport let CooFrameEnum = (function() {\n\n    var systems = {J2000: 'J2000', GAL: 'Galactic'};\n    return {\n        SYSTEMS: systems,\n\n        J2000: {label: \"J2000\", system: systems.J2000},\n        J2000d: {label: \"J2000d\", system: systems.J2000},\n        GAL:  {label: \"Galactic\", system: systems.GAL},\n\n        fromString: function(str, defaultValue) {\n            if (! str) {\n                return defaultValue ? defaultValue : null;\n            }\n            \n            str = str.toLowerCase().replace(/^\\s+|\\s+$/g, ''); // convert to lowercase and trim\n            \n            if (str.indexOf('j2000d')==0 || str.indexOf('icrsd')==0) {\n                return CooFrameEnum.J2000d;\n            }\n            else if (str.indexOf('j2000')==0 || str.indexOf('icrs')==0) {\n                return CooFrameEnum.J2000;\n            }\n            else if (str.indexOf('gal')==0) {\n                return CooFrameEnum.GAL;\n            }\n            else {\n                return defaultValue ? defaultValue : null;\n            }\n        }\n    };\n \n})();\n\n\n\n\n\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File AladinUtils\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nimport { Projection } from \"./libs/astro/projection.js\";\nimport { CooFrameEnum } from \"./CooFrameEnum.js\";\n\nexport let AladinUtils = (function() {\n\n    return {\n    \t/**\n    \t * passage de xy projection à xy dans la vue écran \n    \t * @param x\n    \t * @param y\n    \t * @param width\n    \t * @param height\n    \t * @param largestDim largest dimension of the view\n    \t * @returns position in the view\n    \t */\n    \txyToView: function(x, y, width, height, largestDim, zoomFactor, round) {\n    \t    if (round==undefined) {\n                // we round by default\n    \t        round = true;\n    \t    }\n\n    \t    if (round) {\n    \t        // we round the result for potential performance gains\n    \t        return {vx: AladinUtils.myRound(largestDim/2*(1+zoomFactor*x)-(largestDim-width)/2), vy: AladinUtils.myRound(largestDim/2*(1+zoomFactor*y)-(largestDim-height)/2)};\n\n    \t    }\n    \t    else {\n                return {vx: largestDim/2*(1+zoomFactor*x)-(largestDim-width)/2, vy: largestDim/2*(1+zoomFactor*y)-(largestDim-height)/2};\n    \t    }\n    \t},\n    \t\n    \t/**\n    \t * passage de xy dans la vue écran à xy projection\n    \t * @param vx\n    \t * @param vy\n    \t * @param width\n    \t * @param height\n    \t * @param largestDim\n    \t * @param zoomFactor\n    \t * @returns position in xy projection\n    \t */\n    \tviewToXy: function(vx, vy, width, height, largestDim, zoomFactor) {\n    \t\treturn {x: ((2*vx+(largestDim-width))/largestDim-1)/zoomFactor, y: ((2*vy+(largestDim-height))/largestDim-1)/zoomFactor};\n    \t},\n\n    \t/**\n    \t * convert a \n    \t * @returns position x,y in the view. Null if projection is impossible\n    \t */\n        /*radecToViewXy: function(ra, dec, currentProjection, currentFrame, width, height, largestDim, zoomFactor) {\n            var xy;\n            if (currentFrame.system != CooFrameEnum.SYSTEMS.J2000) {\n                var lonlat = CooConversion.J2000ToGalactic([ra, dec]);\n                xy = currentProjection.project(lonlat[0], lonlat[1]);\n            }\n            else {\n                xy = currentProjection.project(ra, dec);\n            }\n            if (!xy) {\n                return null;\n            }\n\n            return AladinUtils.xyToView(xy.X, xy.Y, width, height, largestDim, zoomFactor, false);\n        },*/\n        radecToViewXy: function(ra, dec, view) {\n            //var xy;\n            //if (currentFrame.system != CooFrameEnum.SYSTEMS.J2000) {\n            //    var lonlat = CooConversion.J2000ToGalactic([ra, dec]);\n            //    xy = view.aladin.webglAPI.worldToScreen(lonlat[0], lonlat[1]);\n            //}\n            //else {\n            //var lonlat = CooConversion.J2000ToGalactic([ra, dec]);\n            let xy = view.aladin.webglAPI.worldToScreen(ra, dec);\n            //}\n            //if (!xy) {\n            //    return null;\n            //}\n\n            return xy;\n        },\n    \t\n    \tmyRound: function(a) {\n    \t\tif (a<0) {\n    \t\t\treturn -1*( (-a) | 0);\n    \t\t}\n    \t\telse {\n    \t\t\treturn a | 0;\n    \t\t}\n    \t},\n    \t\n    \t/**\n    \t * Test whether a xy position is the view\n    \t * @param vx\n    \t * @param vy\n    \t * @param width\n    \t * @param height\n    \t * @returns a boolean whether (vx, vy) is in the screen\n    \t */\n    \tisInsideViewXy: function(vx, vy, width, height) {\n    \t\treturn vx >= 0 && vx < width && vy >= 0 && vy < height\n    \t},\n    \t\n    \t/**\n    \t * tests whether a healpix pixel is visible or not\n    \t * @param pixCorners array of position (xy view) of the corners of the pixel\n    \t * @param viewW\n    \t */\n    \tisHpxPixVisible: function(pixCorners, viewWidth, viewHeight) {\n    \t\tfor (var i = 0; i<pixCorners.length; i++) {\n    \t\t\tif ( pixCorners[i].vx>=-20 && pixCorners[i].vx<(viewWidth+20) &&\n    \t\t\t\t pixCorners[i].vy>=-20 && pixCorners[i].vy<(viewHeight+20) ) {\n    \t\t\t\treturn true;\n    \t\t\t}\n    \t\t}\n    \t\treturn false;\n    \t},\n    \t\n    \tipixToIpix: function(npixIn, norderIn, norderOut) {\n    \t\tvar npixOut = [];\n    \t\tif (norderIn>=norderOut) {\n    \t\t}\n    \t},\n        // Zoom is handled in the backend\n        /*getZoomFactorForAngle: function(angleInDegrees, projectionMethod) {\n            var p1 = {ra: 0, dec: 0};\n            var p2 = {ra: angleInDegrees, dec: 0};\n            var projection = new Projection(angleInDegrees/2, 0);\n            projection.setProjection(projectionMethod);\n            var p1Projected = projection.project(p1.ra, p1.dec);\n            var p2Projected = projection.project(p2.ra, p2.dec);\n           \n            var zoomFactor = 1/Math.abs(p1Projected.X - p2Projected.Y);\n\n            return zoomFactor;\n        },*/\n\n        counterClockwiseTriangle: function(x1, y1, x2, y2, x3, y3) {\n            // From: https://math.stackexchange.com/questions/1324179/how-to-tell-if-3-connected-points-are-connected-clockwise-or-counter-clockwise\n            // | x1, y1, 1 |\n            // | x2, y2, 1 | > 0 => the triangle is given in anticlockwise order\n            // | x3, y3, 1 |\n    \n            return x1*y2 + y1*x3 + x2*y3 - x3*y2 - y3*x1 - x2*y1 >= 0;\n        },\n\n        // grow array b of vx,vy view positions by *val* pixels\n        grow2: function(b, val) {\n            var j=0;\n            for ( var i=0; i<4; i++ ) {\n                if ( b[i]==null ) {\n                    j++;\n                }\n            }\n\n            if( j>1 ) {\n                return b;\n            }\n\n            var b1 = [];\n            for ( var i=0; i<4; i++ ) {\n                b1.push( {vx: b[i].vx, vy: b[i].vy} );\n            }\n    \n            for ( var i=0; i<2; i++ ) {\n                var a = i==1 ? 1 : 0;\n                var c = i==1 ? 3 : 2;\n\n                if ( b1[a]==null ) {\n                    var d,g;\n                    if ( a==0 || a==3 ) {\n                        d=1;\n                        g=2;\n                    }\n                    else {\n                        d=0;\n                        g=3;\n                    }\n                    b1[a] = {vx: (b1[d].vx+b1[g].vx)/2, vy: (b1[d].vy+b1[g].vy)/2};\n                }\n                if ( b1[c]==null ) {\n                    var d,g;\n                    if ( c==0 || c==3 ) {\n                        d=1;\n                        g=2;\n                    }\n                    else {\n                        d=0;\n                        g=3;\n                    }\n                    b1[c] = {vx: (b1[d].vx+b1[g].vx)/2, vy: (b1[d].vy+b1[g].vy)/2};\n                }\n                if( b1[a]==null || b1[c]==null ) {\n                    continue;\n                }\n\n                var angle = Math.atan2(b1[c].vy-b1[a].vy, b1[c].vx-b1[a].vx);\n                var chouilla = val*Math.cos(angle);\n                b1[a].vx -= chouilla;\n                b1[c].vx += chouilla;\n                chouilla = val*Math.sin(angle);\n                b1[a].vy-=chouilla;\n                b1[c].vy+=chouilla;\n            }\n            return b1;\n        },\n\n        // SVG icons templates are stored here rather than in a CSS, as to allow\n        // to dynamically change the fill color\n        // Pretty ugly, haven't found a prettier solution yet\n        //\n        // TODO: store this in the Stack class once it will exist\n        //\n        SVG_ICONS: {\n            CATALOG: '<svg xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"1,0,5,0,5,3,1,3\"  fill=\"FILLCOLOR\" /><polygon points=\"7,0,9,0,9,3,7,3\"  fill=\"FILLCOLOR\" /><polygon points=\"10,0,12,0,12,3,10,3\"  fill=\"FILLCOLOR\" /><polygon points=\"13,0,15,0,15,3,13,3\"  fill=\"FILLCOLOR\" /><polyline points=\"1,5,5,9\"  stroke=\"FILLCOLOR\" /><polyline points=\"1,9,5,5\" stroke=\"FILLCOLOR\" /><line x1=\"7\" y1=\"7\" x2=\"15\" y2=\"7\" stroke=\"FILLCOLOR\" stroke-width=\"2\" /><polyline points=\"1,11,5,15\"  stroke=\"FILLCOLOR\" /><polyline points=\"1,15,5,11\"  stroke=\"FILLCOLOR\" /><line x1=\"7\" y1=\"13\" x2=\"15\" y2=\"13\" stroke=\"FILLCOLOR\" stroke-width=\"2\" /></svg>',\n            MOC: '<svg xmlns=\"http://www.w3.org/2000/svg\"><polyline points=\"0.5,7,2.5,7,2.5,5,7,5,7,3,10,3,10,5,13,5,13,7,15,7,15,9,13,9,13,12,10,12,10,14,7,14,7,12,2.5,12,2.5,10,0.5,10,0.5,7\" stroke-width=\"1\" stroke=\"FILLCOLOR\" fill=\"transparent\" /><line x1=\"1\" y1=\"10\" x2=\"6\" y2=\"5\" stroke=\"FILLCOLOR\" stroke-width=\"0.5\" /><line x1=\"2\" y1=\"12\" x2=\"10\" y2=\"4\" stroke=\"FILLCOLOR\" stroke-width=\"0.5\" /><line x1=\"5\" y1=\"12\" x2=\"12\" y2=\"5\" stroke=\"FILLCOLOR\" stroke-width=\"0.5\" /><line x1=\"7\" y1=\"13\" x2=\"13\" y2=\"7\" stroke=\"FILLCOLOR\" stroke-width=\"0.5\" /><line x1=\"10\" y1=\"13\" x2=\"13\" y2=\"10\" stroke=\"FILLCOLOR\" stroke-width=\"0.5\" /></svg>',\n            OVERLAY: '<svg xmlns=\"http://www.w3.org/2000/svg\"><polygon points=\"10,5,10,1,14,1,14,14,2,14,2,9,6,9,6,5\" fill=\"transparent\" stroke=\"FILLCOLOR\" stroke-width=\"2\"/></svg>'\n        }\n \n    };\n\n})();\n\n","\t/**\n \t* HEALPix Javascript code derived from the jhealpix Java library\n \t* \n \t* Class Constants\n \t* \n \t* @author: Thomas Boch [CDS]\n \t*/\n\n\t export let Constants = {};\n\n\t /** The Constant PI. */\n\t Constants.PI = Math.PI;//3.141592653589793238462643383279502884197;\n \n\t /** The Constant C_PR. */\n\t Constants.C_PR = Math.PI / 180;\n \n\t /** The Constant VLEV. */\n\t Constants.VLEV = 2;\n \n\t /** The Constant EPS. */\n\t Constants.EPS = 0.0000001;\n \n\t /** The Constant C. */\n\t Constants.c = 0.105;\n \n\t /** The Constant LN10. */\n\t Constants.LN10 = Math.log(10);\n \n\t /** The Constant PIOVER2. */\n\t Constants.PIOVER2 = Math.PI / 2.;\n \n\t /** The Constant TWOPI. */\n\t Constants.TWOPI = 2 * Math.PI;//6.283185307179586476925286766559005768394;// 2 * PI\n \n\t /** The Constant TWOTHIRD. */\n\t Constants.TWOTHIRD = 2. / 3.;\n \n\t /** The Constant 1 arcsecond in units of radians. */\n\t Constants.ARCSECOND_RADIAN = 4.84813681109536e-6;\n\n/**\n * HEALPix Javascript code derived from the jhealpix Java library\n * \n * Class HealpixIndex\n * \n * Main methods :\n * - ang2pix_nest\n * - pix2ang_nest\n * - nest2ring\n * - corners_nest\n * - queryDisc\n * - calculateNSide\n * \n * @author: Thomas Boch [CDS]\n */\n\n\nexport let HealpixIndex = (function () {\n\t/**\n\t * Some utility functions\n\t *\n\t * @author Thomas Boch [CDS]\n\t *\n\t */\n\n\tlet Utils = function () { }\n\n\tUtils.radecToPolar = function (ra, dec) {\n\t\treturn {\n\t\t\ttheta: Math.PI / 2. - dec / 180. * Math.PI,\n\t\t\tphi: ra / 180. * Math.PI\n\t\t};\n\t}\n\n\tUtils.polarToRadec = function (theta, phi) {\n\t\treturn {\n\t\t\tra: phi * 180. / Math.PI,\n\t\t\tdec: (Math.PI / 2. - theta) * 180. / Math.PI\n\t\t};\n\t}\n\n\n\tUtils.castToInt = function (nb) {\n\t\tif (nb > 0) {\n\t\t\treturn Math.floor(nb);\n\t\t}\n\t\telse {\n\t\t\treturn Math.ceil(nb);\n\t\t}\n\t}\n\n\t/**\n * HEALPix Javascript code derived from the jhealpix Java library\n\t* \n * Class SpatialVector\n\t* \n * @author: Thomas Boch[CDS]\n\t* /\n\n\n\n\t/**\n * HEALPix Javascript code derived from the jhealpix Java library\n * \n * Class AngularPosition\n * \n * @author: Thomas Boch [CDS]\n */\n\n\n\tlet AngularPosition = (function () {\n\n\t\t/** Constructor\n\t\t * \n\t\t *  @theta theta in radians [0, 2*Pi] \n\t\t *  @phi phi in radians [0, Pi]\n\t\t */\n\t\tfunction AngularPosition(theta, phi) {\n\t\t\t\"use strict\";\n\t\t\tthis.theta = theta;\n\t\t\tthis.phi = phi;\n\t\t};\n\n\t\tAngularPosition.prototype.toString = function () {\n\t\t\t\"use strict\";\n\t\t\treturn \"theta: \" + this.theta + \", phi: \" + this.phi;\n\t\t};\n\n\t\treturn AngularPosition;\n\t})();\n\n\t/**\n * HEALPix Javascript code derived from the jhealpix Java library\n * \n * Class LongRangeSetBuilder\n * \n * @author: Thomas Boch [CDS]\n */\n\n\tlet LongRangeSetBuilder = (function () {\n\t\t/* Constructor */\n\t\tfunction LongRangeSetBuilder() {\n\t\t\tthis.items = [];\n\t\t}\n\n\t\tLongRangeSetBuilder.prototype.appendRange = function (lo, hi) {\n\t\t\tfor (var i = lo; i <= hi; i++) {\n\t\t\t\tif (i in this.items) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthis.items.push(i);\n\t\t\t}\n\t\t};\n\t\treturn LongRangeSetBuilder;\n\t})();\n\n\n\n\t/** Constructor */\n\tfunction HealpixIndex(nside) {\n\t\t\"use strict\";\n\t\tthis.nside = nside;\n\t};\n\n\t/** Constants * */\n\tHealpixIndex.NS_MAX = 16384/*536870912*/;\n\n\tHealpixIndex.ORDER_MAX = 14/*29*/;\n\n\n\t/** Available nsides ..always power of 2 ..* */\n\tHealpixIndex.NSIDELIST = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048,\n\t\t4096, 8192, 16384/*, 32768, 65536, 131072, 262144, 524288,\n                               1048576, 2097152, 4194304, 8388608, 16777216, 33554432,\n                               67108864, 134217728,  268435456, 536870912*/ ];\n\n\t// coordinate of the lowest corner of each face\n\tHealpixIndex.JRLL = [2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4];\n\tHealpixIndex.JPLL = [1, 3, 5, 7, 0, 2, 4, 6, 1, 3, 5, 7];\n\n\tHealpixIndex.XOFFSET = [-1, -1, 0, 1, 1, 1, 0, -1];\n\tHealpixIndex.YOFFSET = [0, 1, 1, 1, 0, -1, -1, -1];\n\tHealpixIndex.FACEARRAY =\n\t\t[[8, 9, 10, 11, -1, -1, -1, -1, 10, 11, 8, 9],   // S\n\t\t[5, 6, 7, 4, 8, 9, 10, 11, 9, 10, 11, 8],   // SE\n\t\t[-1, -1, -1, -1, 5, 6, 7, 4, -1, -1, -1, -1],   // E\n\t\t[4, 5, 6, 7, 11, 8, 9, 10, 11, 8, 9, 10],   // SW\n\t\t[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],   // center\n\t\t[1, 2, 3, 0, 0, 1, 2, 3, 5, 6, 7, 4],   // NE\n\t\t[-1, -1, -1, -1, 7, 4, 5, 6, -1, -1, -1, -1],   // W\n\t\t[3, 0, 1, 2, 3, 0, 1, 2, 4, 5, 6, 7],   // NW\n\t\t[2, 3, 0, 1, -1, -1, -1, -1, 0, 1, 2, 3]]; // N\n\tHealpixIndex.SWAPARRAY =\n\t\t[[0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3],   // S\n\t\t[0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6],   // SE\n\t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],   // E\n\t\t[0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5],   // SW\n\t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],   // center\n\t\t[5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0],   // NE\n\t\t[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],   // W\n\t\t[6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0],   // NW\n\t\t[3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0]]; // N\n\t/** The Constant z0. */\n\tHealpixIndex.Z0 = Constants.TWOTHIRD; // 2/3\n\n\n\n\tHealpixIndex.prototype.init = function () {\n\t\t\"use strict\";\n\t\tvar tabmax = 0x100;\n\t\tthis.ctab = new Array(tabmax);\n\t\tthis.utab = new Array(tabmax);\n\t\tfor (var m = 0; m < 0x100; ++m) {\n\t\t\tthis.ctab[m] = ((m & 0x1) | ((m & 0x2) << 7) | ((m & 0x4) >> 1) | ((m & 0x8) << 6) |\n\t\t\t\t((m & 0x10) >> 2) | ((m & 0x20) << 5) | ((m & 0x40) >> 3) | ((m & 0x80) << 4));\n\t\t\tthis.utab[m] = ((m & 0x1) | ((m & 0x2) << 1) | ((m & 0x4) << 2) | ((m & 0x8) << 3) |\n\t\t\t\t((m & 0x10) << 4) | ((m & 0x20) << 5) | ((m & 0x40) << 6) | ((m & 0x80) << 7));\n\t\t}\n\n\t\t// end tablefiller\n\t\tthis.nl2 = 2 * this.nside;\n\t\tthis.nl3 = 3 * this.nside;\n\t\tthis.nl4 = 4 * this.nside;\n\t\tthis.npface = this.nside * this.nside;\n\t\tthis.ncap = 2 * this.nside * (this.nside - 1);// points in each polar cap,\n\t\t// =0 for\n\n\t\tthis.npix = 12 * this.npface;\n\t\tthis.fact2 = 4.0 / this.npix;\n\t\tthis.fact1 = (this.nside << 1) * this.fact2;\n\n\t\tthis.order = HealpixIndex.nside2order(this.nside);\n\t}\n\n    /**\n     * calculate required nside given pixel size in arcsec\n     *\n     * @param pixsize in arcsec\n     * @return long nside parameter\n     */\n\tHealpixIndex.calculateNSide = function (pixsize) {\n\t\tvar res = 0;\n\t\tvar pixelArea = pixsize * pixsize;\n\t\tvar degrad = 180. / Constants.PI;\n\t\tvar skyArea = 4. * Constants.PI * degrad * degrad * 3600. * 3600.;\n\t\tvar npixels = Utils.castToInt(skyArea / pixelArea);\n\t\tvar nsidesq = npixels / 12;\n\t\tvar nside_req = Math.sqrt(nsidesq);\n\t\tvar mindiff = HealpixIndex.NS_MAX;\n\t\tvar indmin = 0;\n\t\tfor (var i = 0; i < HealpixIndex.NSIDELIST.length; i++) {\n\t\t\tif (Math.abs(nside_req - HealpixIndex.NSIDELIST[i]) <= mindiff) {\n\t\t\t\tmindiff = Math.abs(nside_req - HealpixIndex.NSIDELIST[i]);\n\t\t\t\tres = HealpixIndex.NSIDELIST[i];\n\t\t\t\tindmin = i;\n\t\t\t}\n\t\t\tif ((nside_req > res) && (nside_req < HealpixIndex.NS_MAX))\n\t\t\t\tres = HealpixIndex.NSIDELIST[indmin + 1];\n\t\t\tif (nside_req > HealpixIndex.NS_MAX) {\n\t\t\t\tconsole.log(\"nside cannot be bigger than \" + HealpixIndex.NS_MAX);\n\t\t\t\treturn HealpixIndex.NS_MAX;\n\t\t\t}\n\n\t\t}\n\t\treturn res;\n\t}\n    /**\n     * static method to find order from nside\n     * \n     * @param nside\n     * @return order\n     */\n\tHealpixIndex.nside2order = function (nside) {\n\t\t\"use strict\";\n\t\tif ((nside & (nside - 1)) > 0) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn Utils.castToInt(HealpixIndex.log2(nside));\n\t}\n\n    /**\n     * Log base two\n     * \n     * @param num\n     * @return log2\n     */\n\tHealpixIndex.log2 = function (num) {\n\t\t\"use strict\";\n\t\treturn (Math.log(num) / Math.log(2));\n\t}\n\n\n    /**\n     * TESTED. Works OK for nside<=8192\n     *\n     * renders the pixel number ipix ( scheme as defined for object) for a pixel\n     * which contains a point on a sphere at coordinates theta and phi, given the\n     * map resolution parameter nside\n     * \n     * @param theta\n     *            angle (along meridian), in [0,Pi], theta=0 : north pole\n     * @param phi\n     *            angle (along parallel), in [0,2*Pi]\n     * @return pixel index number\n     * @throws Exception\n     */\n\tHealpixIndex.prototype.ang2pix_nest = function (theta, phi) {\n\t\t\"use strict\";\n\n\t\tvar ipix;\n\t\tvar z, za, tt, tp;\n\t\tvar ifp, ifm;\n\t\tvar jp, jm;\n\t\tvar ntt, face_num, ix, iy;\n\n\t\tif (phi >= Constants.TWOPI)\n\t\t\tphi = phi - Constants.TWOPI;\n\t\tif (phi < 0.)\n\t\t\tphi = phi + Constants.TWOPI;\n\t\tif (theta > Constants.PI || theta < 0) {\n\t\t\tthrow { name: \"Illegal argument\", message: \"theta must be between 0 and \" + Constants.PI };\n\t\t}\n\t\tif (phi > Constants.TWOPI || phi < 0) {\n\t\t\tthrow { name: \"Illegal argument\", message: \"phi must be between 0 and \" + Constants.TWOPI };\n\t\t}\n\n\t\tz = Math.cos(theta);\n\t\tza = Math.abs(z);\n\t\ttt = phi / Constants.PIOVER2;// in [0,4]\n\n\n\t\tif (za <= HealpixIndex.Z0) { // Equatorial region\n\t\t\t// (the index of edge lines increase when the longitude=phi goes up)\n\t\t\tvar temp1 = this.nside * (0.5 + tt);\n\t\t\tvar temp2 = this.nside * (z * 0.75);\n\n\t\t\tvar jp = (temp1 - temp2);\n\t\t\t// ascending edge line index\n\t\t\tvar jm = (temp1 + temp2);\n\t\t\t// descending edge line index\n\n\t\t\t// finds the face\n\t\t\tifp = jp >> this.order; // in {0,4}\n\t\t\tifm = jm >> this.order;\n\t\t\tif (ifp == ifm) { // faces 4 to 7\n\t\t\t\tface_num = (ifp == 4 ? 4 : ifp + 4);\n\t\t\t} else {\n\t\t\t\tif (ifp < ifm) { // (half-)faces 0 to 3\n\t\t\t\t\tface_num = ifp;\n\t\t\t\t} else { // (half-)faces 8 to 11\n\t\t\t\t\tface_num = ifm + 8;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tix = Utils.castToInt(jm & (this.nside - 1));\n\t\t\tiy = Utils.castToInt(this.nside - (jp & (this.nside - 1)) - 1);\n\t\t} else { // polar region, za > 2/3\n\t\t\tntt = Utils.castToInt(tt);\n\t\t\tif (ntt >= 4)\n\t\t\t\tntt = 3;\n\t\t\ttp = tt - ntt;\n\t\t\tvar tmp = this.nside * Math.sqrt(3.0 * (1.0 - za));\n\n\n\t\t\t// (the index of edge lines increase when distance from the closest\n\t\t\t// pole goes up)\n\t\t\tjp = Utils.castToInt(tp * tmp);// line going toward the\n\t\t\t// pole as phi increases\n\t\t\tjm = Utils.castToInt((1.0 - tp) * tmp); // that one goes\n\t\t\t// away of the closest pole\n\t\t\tjp = Math.min(HealpixIndex.NS_MAX - 1, jp);\n\t\t\t// for points too close to the boundary\n\t\t\tjm = Math.min(HealpixIndex.NS_MAX - 1, jm);\n\n\n\n\t\t\t// finds the face and pixel's (x,y)\n\t\t\tif (z >= 0) { // North Pole\n\t\t\t\t// System.out.println(\"Polar z>=0 ntt:\"+ntt+\" tt:\"+tt);\n\t\t\t\tface_num = ntt; // in {0,3}\n\t\t\t\tix = Utils.castToInt(this.nside - jm - 1);\n\t\t\t\tiy = Utils.castToInt(this.nside - jp - 1);\n\n\t\t\t} else {\n\t\t\t\t// System.out.println(\"Polar z<0 ntt:\"+ntt+\" tt:\"+tt);\n\t\t\t\tface_num = ntt + 8;// in {8,11}\n\t\t\t\tix = jp;\n\t\t\t\tiy = jm;\n\t\t\t}\n\t\t}\n\n\t\tipix = this.xyf2nest(ix, iy, face_num);\n\n\t\treturn ipix;\n\t}\n\n\tHealpixIndex.prototype.xyf2nest = function (ix, iy, face_num) {\n\t\t\"use strict\";\n\t\treturn ((face_num) << (2 * this.order)) +\n\t\t\t(((this.utab[ix & 0xff]))\n\t\t\t\t| ((this.utab[(ix >> 8) & 0xff]) << 16)\n\t\t\t\t| ((this.utab[(ix >> 16) & 0xff]) << 32)\n\t\t\t\t| ((this.utab[(ix >> 24) & 0xff]) << 48)\n\t\t\t\t| ((this.utab[iy & 0xff]) << 1)\n\t\t\t\t| ((this.utab[(iy >> 8) & 0xff]) << 17)\n\t\t\t\t| ((this.utab[(iy >> 16) & 0xff]) << 33)\n\t\t\t\t| ((this.utab[(iy >> 24) & 0xff]) << 49));\n\t}\n\n\tHealpixIndex.prototype.nest2xyf = function (ipix) {\n\t\t\"use strict\";\n\t\tvar ret = {};\n\t\tret.face_num = ipix >> (2 * this.order);\n\t\tvar pix = ipix & (this.npface - 1);\n\t\t// need o check the & here - they were unsigned in cpp ...\n\t\tvar raw = (((pix & 0x555500000000) >> 16)\n\t\t\t| ((pix & 0x5555000000000000) >> 31)\n\t\t\t| (pix & 0x5555)\n\t\t\t| ((pix & 0x55550000) >> 15));\n\t\tret.ix = this.ctab[raw & 0xff]\n\t\t\t| (this.ctab[(raw >> 8) & 0xff] << 4)\n\t\t\t| (this.ctab[(raw >> 16) & 0xff] << 16)\n\t\t\t| (this.ctab[(raw >> 24) & 0xff] << 20);\n\t\tpix >>= 1;\n\t\traw = (((pix & 0x555500000000) >> 16)\n\t\t\t| ((pix & 0x5555000000000000) >> 31)\n\t\t\t| (pix & 0x5555)\n\t\t\t| ((pix & 0x55550000) >> 15));\n\t\tret.iy = this.ctab[raw & 0xff]\n\t\t\t| (this.ctab[(raw >> 8) & 0xff] << 4)\n\t\t\t| (this.ctab[(raw >> 16) & 0xff] << 16)\n\t\t\t| (this.ctab[(raw >> 24) & 0xff] << 20);\n\n\t\treturn ret;\n\t}\n\n    /**\n     * TESTED. Works OK for nside<=8192\n     * \n     * Convert from pix number to angle renders theta and phi coordinates of the\n     * nominal pixel center for the pixel number ipix (NESTED scheme) given the\n     * map resolution parameter nside\n     *\n     * @param ipix\n     *            pixel index number\n     * @return double array of [theta, phi] angles in radians [0,Pi], [0,2*Pi]\n     * @throws Exception if ipix not in expected range for norder\n     */\n\tHealpixIndex.prototype.pix2ang_nest = function (ipix) {\n\t\t\"use strict\";\n\n\t\tif (ipix < 0 || ipix > this.npix - 1) {\n\t\t\tthrow { name: \"Illegal argument\", message: \"ipix out of range\" };\n\t\t}\n\n\t\tvar x = this.nest2xyf(ipix);\n\n\t\tvar ix = x.ix;\n\t\tvar iy = x.iy;\n\t\tvar face_num = x.face_num;\n\n\t\t// TODO this c++ bit shift givesa differnt jr to the Healpix Code - why ?\n\t\tvar jr = ((HealpixIndex.JRLL[face_num] << this.order)) - ix - iy - 1;\n\t\tvar nr, z, kshift;\n\n\t\t// ring number in {1,4*nside-1}\n\n\t\tif (jr < this.nside) { // north pole region\n\t\t\tnr = jr;\n\t\t\tz = 1.0 - nr * nr * this.fact2;\n\t\t\tkshift = 0;\n\t\t} else if (jr > this.nl3) { // south pole region\n\t\t\tnr = this.nl4 - jr;\n\t\t\tz = nr * nr * this.fact2 - 1.0;\n\t\t\tkshift = 0;\n\t\t} else {\n\t\t\tnr = this.nside;\n\t\t\tz = (this.nl2 - jr) * this.fact1;\n\t\t\tkshift = (jr - this.nside) & 1;\n\t\t}\n\t\tvar theta = Math.acos(z);\n\n\t\t// computes the phi coordinate on the sphere, in [0,2Pi]\n\t\tvar jp = (HealpixIndex.JPLL[face_num] * nr + ix - iy + 1 + kshift) / 2;\n\t\t// 'phi' number in the ring in {1,4*nr}\n\t\tif (jp > this.nl4) {\n\t\t\tjp = jp - this.nl4;\n\t\t}\n\t\tif (jp < 1) {\n\t\t\tjp = jp + this.nl4;\n\t\t}\n\n\t\tvar phi = (jp - (kshift + 1) * 0.50) * (Constants.PIOVER2 / nr);\n\n\t\t// if (phi < 0)\n\t\t// phi += 2.0 * Math.PI; // phi in [0, 2pi]\n\n\t\treturn { theta: theta, phi: phi };\n\t}\n\n\tHealpixIndex.nside2Npix = function (nside) {\n\t\t\"use strict\";\n\n\t\t// check if power of 2 and if nside<NS_MAX\n\t\tif (nside < 0 || (nside & -nside) != nside || nside > HealpixIndex.NS_MAX) {\n\t\t\tthrow { name: \"Illegal argument\", message: \"nside should be >0, power of 2, <\" + HealpixIndex.NS_MAX };\n\t\t}\n\t\tvar res = 12 * nside * nside;\n\t\treturn res;\n\t}\n\n\tHealpixIndex.prototype.xyf2ring = function (ix, iy, face_num) {\n\t\t\"use strict\";\n\n\t\tvar jr = HealpixIndex.JRLL[face_num] * this.nside - ix - iy - 1;\n\n\t\tvar nr, kshift, n_before;\n\t\tif (jr < this.nside) {\n\t\t\tnr = jr;\n\t\t\tn_before = 2 * nr * (nr - 1);\n\t\t\tkshift = 0;\n\t\t}\n\t\telse if (jr > 3 * this.nside) {\n\t\t\tnr = this.nl4 - jr;\n\t\t\tn_before = this.npix - 2 * (nr + 1) * nr;\n\t\t\tkshift = 0;\n\t\t}\n\t\telse {\n\t\t\tnr = this.nside;\n\t\t\tn_before = this.ncap + (jr - this.nside) * this.nl4;\n\t\t\tkshift = (jr - this.nside) & 1;\n\t\t}\n\n\t\tvar jp = (HealpixIndex.JPLL[face_num] * nr + ix - iy + 1 + kshift) / 2;\n\t\tif (jp > this.nl4) {\n\t\t\tjp -= this.nl4;\n\t\t}\n\t\telse {\n\t\t\tif (jp < 1) {\n\t\t\t\tjp += this.nl4;\n\t\t\t}\n\t\t}\n\n\t\treturn n_before + jp - 1;\n\t}\n\n    /**\n     * \n     * TESTED. Works OK for nside<=8192\n     * \n     * performs conversion from NESTED to RING pixel number\n     *\n     * @param ipnest\n     *            pixel NEST index number\n     * @return RING pixel index number\n     * @throws Exception\n     */\n\tHealpixIndex.prototype.nest2ring = function (ipnest) {\n\t\t\"use strict\";\n\t\tvar xyf = this.nest2xyf(ipnest);\n\t\tvar ipring = this.xyf2ring(xyf.ix, xyf.iy, xyf.face_num);\n\t\treturn ipring;\n\t}\n\n    /**\n     * \n     * TESTED. Works OK for nside<=8192\n     * \n     * Returns set of points along the boundary of the given pixel in NEST\n     * scheme. Step 1 gives 4 points on the corners.\n     *\n     * @param pix\n     *            pixel index number in nest scheme\n     * @param step\n     * @return {@link SpatialVector} for each points\n     * @throws Exception\n     */\n\tHealpixIndex.prototype.corners_nest = function (pix, step) {\n\t\t\"use strict\";\n\n\t\tvar pixr = this.nest2ring(pix);\n\t\treturn this.corners_ring(pixr, step);\n\t}\n\n\n    /**\n     * Convert from pix number to angle renders theta and phi coordinates of the\n     * nominal pixel center for the pixel number ipix (RING scheme) given the\n     * map resolution parameter nside\n     *\n     * @param ipix\n     *            pixel index number\n     * @return double array of [theta, phi] angles in radians [0,Pi], [0,2*Pi]\n     * @throws Exception\n     */\n\tHealpixIndex.prototype.pix2ang_ring = function (ipix) {\n\t\t\"use strict\";\n\n\t\tvar theta, phi;\n\t\tvar iring, iphi, ip, ipix1;\n\t\tvar fodd, hip, fihip;\n\t\t// -----------------------------------------------------------------------\n\t\tif (ipix < 0 || ipix > this.npix - 1) {\n\t\t\tthrow { name: \"Illegal argument\", message: \"ipix out of range\" };\n\t\t}\n\n\t\tipix1 = ipix + 1;// in {1, npix}\n\t\tif (ipix1 <= this.ncap) { // North Polar cap -------------\n\n\t\t\thip = ipix1 / 2.0;\n\t\t\tfihip = Utils.castToInt(hip);\n\t\t\tiring = Utils.castToInt(Math.sqrt(hip - Math.sqrt(fihip))) + 1;\n\t\t\t// counted from North pole\n\t\t\tiphi = ipix1 - 2 * iring * (iring - 1);\n\n\t\t\ttheta = Math.acos(1.0 - (iring * iring * this.fact2));\n\t\t\tphi = ((iphi) - 0.50) * Constants.PI / (2.0 * iring);\n\n\t\t} else {\n\t\t\tif (ipix < (this.npix - this.ncap)) { // Equatorial region\n\t\t\t\tip = ipix - this.ncap;\n\t\t\t\tiring = (ip / this.nl4) + this.nside;// counted from North pole\n\t\t\t\tiphi = ip % this.nl4 + 1;\n\n\t\t\t\tfodd = (((iring + this.nside) & 1) > 0) ? 1 : 0.5;\n\t\t\t\t// 1 if iring+nside is odd, 1/2 otherwise\n\t\t\t\ttheta = Math.acos((this.nl2 - iring) * this.fact1);\n\t\t\t\tphi = ((iphi) - fodd) * Constants.PI\n\t\t\t\t\t/ this.nl2;\n\t\t\t} else { // South Polar cap -----------------------------------\n\t\t\t\tip = this.npix - ipix;\n\t\t\t\tiring = Utils.castToInt(0.5 * (1 + Math.sqrt(2 * ip - 1)));\n\t\t\t\t// counted from South pole\n\t\t\t\tiphi = 4 * iring + 1 - (ip - 2 * iring * (iring - 1));\n\n\t\t\t\ttheta = Math.acos(-1.0 + Math.pow(iring, 2) * this.fact2);\n\t\t\t\tphi = ((iphi) - 0.50) * Constants.PI\n\t\t\t\t\t/ (2.0 * iring);\n\n\t\t\t}\n\t\t};\n\n\t\treturn [theta, phi];\n\t}\n\n    /**\n     * return ring number for given pix in ring scheme\n     *\n     * @param ipix\n     *            pixel index number in ring scheme\n     * @return ring number\n     * @throws Exception\n     */\n\tHealpixIndex.prototype.ring = function (ipix) {\n\t\t\"use strict\";\n\t\tvar iring = 0;\n\t\tvar ipix1 = ipix + 1;// in {1, npix}\n\t\tvar ip;\n\t\tvar hip, fihip = 0;\n\t\tif (ipix1 <= this.ncap) { // North Polar cap -------------\n\t\t\thip = (ipix1 / 2.0);\n\t\t\tfihip = Utils.castToInt(hip);\n\t\t\tiring = Utils.castToInt(Math.sqrt(hip - Math.sqrt(fihip))) + 1;// counted\n\t\t\t// from\n\t\t\t// North\n\t\t\t// pole\n\t\t} else {\n\t\t\tif (ipix1 <= this.nl2 * (5 * this.nside + 1)) { // Equatorial region\n\t\t\t\t// ------\n\t\t\t\tip = Utils.castToInt(ipix1 - this.ncap - 1);\n\t\t\t\tiring = Utils.castToInt((ip / this.nl4) + this.nside);// counted from North pole\n\t\t\t} else { // South Polar cap -----------------------------------\n\t\t\t\tip = (this.npix - ipix1 + 1);\n\t\t\t\thip = (ip / 2.0);\n\t\t\t\tfihip = Utils.castToInt(hip);\n\t\t\t\tiring = Utils.castToInt(Math.sqrt(hip - Math.sqrt(fihip))) + 1;// counted\n\t\t\t\t// from\n\t\t\t\t// South\n\t\t\t\t// pole\n\t\t\t\tiring = (this.nl4 - iring);\n\t\t\t}\n\t\t}\n\t\treturn iring;\n\t}\n\n    /**\n     * integration limits in cos(theta) for a given ring i_th, i_th > 0\n     *\n     * @param i_th\n     *            ith ring\n     * @return limits\n     */\n\tHealpixIndex.prototype.integration_limits_in_costh = function (i_th) {\n\t\t\"use strict\";\n\t\tvar a, ab, b, r_n_side;\n\t\t// integration limits in cos(theta) for a given ring i_th\n\t\t// i > 0 !!!\n\t\tr_n_side = 1.0 * this.nside;\n\t\tif (i_th <= this.nside) {\n\t\t\tab = 1.0 - (Math.pow(i_th, 2.0) / 3.0) / this.npface;\n\t\t\tb = 1.0 - (Math.pow((i_th - 1), 2.0) / 3.0) / this.npface;\n\t\t\tif (i_th == this.nside) {\n\t\t\t\ta = 2.0 * (this.nside - 1.0) / 3.0 / r_n_side;\n\t\t\t} else {\n\t\t\t\ta = 1.0 - Math.pow((i_th + 1), 2) / 3.0 / this.npface;\n\t\t\t}\n\t\t} else {\n\t\t\tif (i_th < this.nl3) {\n\t\t\t\tab = 2.0 * (2 * this.nside - i_th) / 3.0 / r_n_side;\n\t\t\t\tb = 2.0 * (2 * this.nside - i_th + 1) / 3.0 / r_n_side;\n\t\t\t\ta = 2.0 * (2 * this.nside - i_th - 1) / 3.0 / r_n_side;\n\t\t\t} else {\n\t\t\t\tif (i_th == this.nl3) {\n\t\t\t\t\tb = 2.0 * (-this.nside + 1) / 3.0 / r_n_side;\n\t\t\t\t} else {\n\t\t\t\t\tb = -1.0 + Math.pow((4 * this.nside - i_th + 1), 2) / 3.0\n\t\t\t\t\t\t/ this.npface;\n\t\t\t\t}\n\n\t\t\t\ta = -1.0 + Math.pow((this.nl4 - i_th - 1), 2) / 3.0\n\t\t\t\t\t/ this.npface;\n\t\t\t\tab = -1.0 + Math.pow((this.nl4 - i_th), 2) / 3.0 / this.npface;\n\t\t\t}\n\n\t\t}\n\t\t// END integration limits in cos(theta)\n\t\treturn [b, ab, a];\n\t}\n\n    /**\n     * calculate the points of crossing for a given theata on the boundaries of\n     * the pixel - returns the left and right phi crossings\n     *\n     * @param i_th\n     *            ith pixel\n     * @param i_phi\n     *            phi angle\n     * @param i_zone\n     *            ith zone (0,...,3), a quarter of sphere\n     * @param cos_theta\n     *            theta cosinus\n     * @return the left and right phi crossings\n     */\n\tHealpixIndex.prototype.pixel_boundaries = function (i_th, i_phi, i_zone, cos_theta) {\n\t\tvar sq3th, factor, jd, ju, ku, kd, phi_l, phi_r;\n\t\tvar r_n_side = 1.0 * this.nside;\n\n\t\t// HALF a pixel away from both poles\n\t\tif (Math.abs(cos_theta) >= 1.0 - 1.0 / 3.0 / this.npface) {\n\t\t\tphi_l = i_zone * Constants.PIOVER2;\n\t\t\tphi_r = (i_zone + 1) * Constants.PIOVER2;\n\t\t\treturn [phi_l, phi_r];\n\t\t}\n\t\t// -------\n\t\t// NORTH POLAR CAP\n\t\tif (1.50 * cos_theta >= 1.0) {\n\t\t\tsq3th = Math.sqrt(3.0 * (1.0 - cos_theta));\n\t\t\tfactor = 1.0 / r_n_side / sq3th;\n\t\t\tjd = (i_phi);\n\t\t\tju = jd - 1;\n\t\t\tku = (i_th - i_phi);\n\t\t\tkd = ku + 1;\n\n\t\t\tphi_l = Constants.PIOVER2\n\t\t\t\t* (Math.max((ju * factor), (1.0 - (kd * factor))) + i_zone);\n\t\t\tphi_r = Constants.PIOVER2\n\t\t\t\t* (Math.min((1.0 - (ku * factor)), (jd * factor)) + i_zone);\n\n\t\t} else {\n\t\t\tif (-1.0 < 1.50 * cos_theta) {\n\t\t\t\t// -------\n\t\t\t\t// -------\n\t\t\t\t// EQUATORIAL ZONE\n\t\t\t\tvar cth34 = 0.50 * (1.0 - 1.50 * cos_theta);\n\t\t\t\tvar cth34_1 = cth34 + 1.0;\n\t\t\t\tvar modfactor = (this.nside + (i_th % 2));\n\n\t\t\t\tjd = i_phi - (modfactor - i_th) / 2.0;\n\t\t\t\tju = jd - 1;\n\t\t\t\tku = (modfactor + i_th) / 2.0 - i_phi;\n\t\t\t\tkd = ku + 1;\n\n\t\t\t\tphi_l = Constants.PIOVER2\n\t\t\t\t\t* (Math.max((cth34_1 - (kd / r_n_side)),\n\t\t\t\t\t\t(-cth34 + (ju / r_n_side))) + i_zone);\n\n\t\t\t\tphi_r = Constants.PIOVER2\n\t\t\t\t\t* (Math.min((cth34_1 - (ku / r_n_side)),\n\t\t\t\t\t\t(-cth34 + (jd / r_n_side))) + i_zone);\n\t\t\t\t// -------\n\t\t\t\t// -------\n\t\t\t\t// SOUTH POLAR CAP\n\n\t\t\t} else {\n\t\t\t\tsq3th = Math.sqrt(3.0 * (1.0 + cos_theta));\n\t\t\t\tfactor = 1.0 / r_n_side / sq3th;\n\t\t\t\tvar ns2 = 2 * this.nside;\n\n\t\t\t\tjd = i_th - ns2 + i_phi;\n\t\t\t\tju = jd - 1;\n\t\t\t\tku = ns2 - i_phi;\n\t\t\t\tkd = ku + 1;\n\n\t\t\t\tphi_l = Constants.PIOVER2\n\t\t\t\t\t* (Math.max((1.0 - (ns2 - ju) * factor),\n\t\t\t\t\t\t((ns2 - kd) * factor)) + i_zone);\n\n\t\t\t\tphi_r = Constants.PIOVER2\n\t\t\t\t\t* (Math.min((1.0 - (ns2 - jd) * factor),\n\t\t\t\t\t\t((ns2 - ku) * factor)) + i_zone);\n\t\t\t}// of SOUTH POLAR CAP\n\t\t}\n\t\t// and that's it\n\t\t// System.out.println(\" nside:\"+nside+\" i_th:\"+i_th+\" i_phi:\"+i_phi+\"\n\t\t// izone:\"+i_zone+\" cos_theta:\"+cos_theta+\" phi_l:\"+phi_l+\"\n\t\t// phi_r:\"+phi_r);\n\n\t\treturn [phi_l, phi_r];\n\t}\n\n    /**\n     * Construct a {@link SpatialVector} from the angle (theta,phi)\n     *\n     * @param theta\n     *            angle (along meridian), in [0,Pi], theta=0 : north pole\n     * @param phi\n     *            angle (along parallel), in [0,2*Pi]\n     * @return vector {@link SpatialVector}\n     */\n\tHealpixIndex.vector = function (theta, phi) {\n\t\t\"use strict\";\n\t\tvar x = 1 * Math.sin(theta) * Math.cos(phi);\n\t\tvar y = 1 * Math.sin(theta) * Math.sin(phi);\n\t\tvar z = 1 * Math.cos(theta);\n\t\treturn new SpatialVector(x, y, z);\n\t}\n\n    /**\n     * Returns set of points along the boundary of the given pixel in RING\n     * scheme. Step 1 gives 4 points on the corners.\n     * Mainly for graphics = you may not want to use LARGE NSIDEs..\n     *\n     * @param pix\n     *            pixel index number in ring scheme\n     * @param step\n     * @return {@link SpatialVector} for each points\n     * @throws Exception\n     */\n\tHealpixIndex.prototype.corners_ring = function (pix, step) {\n\t\t\"use strict\";\n\n\t\tvar nPoints = step * 2 + 2;\n\t\tvar points = new Array(nPoints);\n\t\tvar p0 = this.pix2ang_ring(pix);\n\t\tvar cos_theta = Math.cos(p0[0]);\n\t\tvar theta = p0[0];\n\t\tvar phi = p0[1];\n\n\t\tvar i_zone = Utils.castToInt(phi / Constants.PIOVER2);\n\t\tvar ringno = this.ring(pix);\n\t\tvar i_phi_count = Math.min(ringno, Math.min(this.nside, (this.nl4) - ringno));\n\t\tvar i_phi = 0;\n\t\tvar phifac = Constants.PIOVER2 / i_phi_count;\n\t\tif (ringno >= this.nside && ringno <= this.nl3) {\n\t\t\t// adjust by 0.5 for odd numbered rings in equatorial since\n\t\t\t// they start out of phase by half phifac.\n\t\t\ti_phi = Utils.castToInt(phi / phifac + ((ringno % 2) / 2.0)) + 1;\n\t\t} else {\n\t\t\ti_phi = Utils.castToInt(phi / phifac) + 1;\n\t\t}\n\t\t// adjust for zone offset\n\t\ti_phi = i_phi - (i_zone * i_phi_count);\n\t\tvar spoint = (nPoints / 2);\n\n\t\t// get north south middle - middle should match theta !\n\t\tvar nms = this.integration_limits_in_costh(ringno);\n\t\tvar ntheta = Math.acos(nms[0]);\n\t\tvar stheta = Math.acos(nms[2]);\n\t\tvar philr = this.pixel_boundaries(ringno, i_phi, i_zone, nms[0]);\n\n\t\tif (i_phi > (i_phi_count / 2)) {\n\t\t\tpoints[0] = HealpixIndex.vector(ntheta, philr[1]);\n\t\t} else {\n\t\t\tpoints[0] = HealpixIndex.vector(ntheta, philr[0]);\n\t\t}\n\t\tphilr = this.pixel_boundaries(ringno, i_phi, i_zone, nms[2]);\n\t\tif (i_phi > (i_phi_count / 2)) {\n\t\t\tpoints[spoint] = HealpixIndex.vector(stheta, philr[1]);\n\t\t} else {\n\t\t\tpoints[spoint] = HealpixIndex.vector(stheta, philr[0]);\n\t\t}\n\t\tif (step == 1) {\n\t\t\tvar mtheta = Math.acos(nms[1]);\n\t\t\tphilr = this.pixel_boundaries(ringno, i_phi, i_zone, nms[1]);\n\t\t\tpoints[1] = HealpixIndex.vector(mtheta, philr[0]);\n\t\t\tpoints[3] = HealpixIndex.vector(mtheta, philr[1]);\n\t\t} else {\n\t\t\tvar cosThetaLen = nms[2] - nms[0];\n\t\t\tvar cosThetaStep = (cosThetaLen / (step + 1)); // skip\n\t\t\t// North\n\t\t\t// and south\n\t\t\tfor (var p = 1; p <= step; p++) {\n\t\t\t\t/* Integrate points along the sides */\n\t\t\t\tcos_theta = nms[0] + (cosThetaStep * p);\n\t\t\t\ttheta = Math.acos(cos_theta);\n\t\t\t\tphilr = this.pixel_boundaries(ringno, i_phi, i_zone, cos_theta);\n\t\t\t\tpoints[p] = HealpixIndex.vector(theta, philr[0]);\n\t\t\t\tpoints[nPoints - p] = HealpixIndex.vector(theta, philr[1]);\n\t\t\t}\n\t\t}\n\t\treturn points;\n\t}\n\n    /**\n     * converts a SpatialVector in a tuple of angles tup[0] = theta co-latitude\n     * measured from North pole, in [0,PI] radians, tup[1] = phi longitude\n     * measured eastward, in [0,2PI] radians\n     *\n     * @param v\n     *            SpatialVector\n     * @return double[] out_tup out_tup[0] = theta out_tup[1] = phi\n     */\n\tHealpixIndex.vec2Ang = function (v) {\n\t\t\"use strict\";\n\n\t\tvar z = v.z / v.length();\n\t\tvar theta = Math.acos(z);\n\t\tvar phi = 0.;\n\t\tif ((v.x != 0.) || (v.y != 0)) {\n\t\t\tphi = Math.atan2(v.y, v.x); // phi in [-pi,pi]\n\t\t}\n\t\tif (phi < 0)\n\t\t\tphi += 2.0 * Math.PI; // phi in [0, 2pi]\n\t\treturn [theta, phi];\n\t}\n\n    /**\n     * generates in the RING or NESTED scheme all pixels that lies within an\n     * angular distance Radius of the center.\n     *\n     * TESTED. Works OK for nside<=8192\n     *\n     * @param nside\n     *            long map resolution\n     * @param vector\n     *            Vector3d pointing to the disc center\n     * @param radius\n     *            double angular radius of the disk (in RADIAN )\n     * @param do_nest\n     *            if true, output in NESTED scheme\n     *            if false, output in RING scheme\n     * @param do_inclusive\n     *            if set to false: only pixels whose center lie in the triangle\n     *            are listed, if set to true, all pixels overlapping the triangle\n     *            are listed\n     * @return ArrayList of pixel numbers calls: RingNum(nside, ir)\n     *         InRing(nside, iz, phi0, dphi,nest)\n     */\n\tHealpixIndex.prototype.queryDisc = function (vector, radius, do_nest, do_inclusive) {\n\t\t\"use strict\";\n\n\t\tif (radius < 0.0 || radius > Constants.PI) {\n\t\t\tthrow { \"name\": \"Illegal argument\", \"message\": \"angular radius is in RADIAN and should be in [0,pi]\" };\n\t\t}\n\n\t\tvar res = new LongRangeSetBuilder();\n\t\tvar irmin, irmax, iz;\n\t\tvar ang = null;\n\t\tvar z0, radius_eff, theta, phi, cosang, x, ysq;\n\t\tvar dth1, dth2, dphi;\n\t\tvar rlat1, rlat2, zmin, zmax, z, xa;\n\n\t\tvar radius_eff = radius;\n\t\tif (do_inclusive) {\n\t\t\tradius_eff += Constants.PI / (this.nl4); // increase radius by\n\t\t\t// half pixel: different in C++ version where a 'magic' number is used.\n\t\t}\n\n\t\t// this pix back abnf fourth is ok until you put in  precise vector like a pole .\n\t\t// then it shifts the whole elipse...\n\t\tang = HealpixIndex.vec2Ang(vector);\n\n\t\ttheta = ang[0];\n\t\tphi = ang[1];\n\t\tdth1 = this.fact2;\n\t\tdth2 = this.fact1;\n\t\tz0 = Math.cos(theta);\n\t\txa = 1. / Math.sqrt((1.0 - z0) * (1.0 + z0));\n\n\t\t/* coordinate z of highest and lowest points in the disc */\n\n\t\trlat1 = theta - radius_eff;\n\t\trlat2 = theta + radius_eff;\n\n\n\t\tcosang = Math.cos(radius_eff);\n\t\tzmax = Math.cos(rlat1);\n\t\tirmin = this.ringAbove(zmax) + 1;\n\t\tzmin = Math.cos(rlat2);\n\t\tirmax = this.ringAbove(zmin);\n\n\t\tif (irmax < irmin) {// in this case no pixels are returned - need irmax=irmin to loop\n\t\t\tif (irmax == 0) {\n\t\t\t\tirmax = irmin;\n\t\t\t}\n\t\t}\n\n\t\tif (rlat1 <= 0) {// north pole in the disc\n\t\t\tfor (var m = 1; m < irmin; ++m) {// rings completely in the disc\n\t\t\t\tthis.inRing(m, 0, Math.PI, res);\n\t\t\t}\n\t\t}\n\n\t\t/* loop on ring number */\n\t\tfor (iz = irmin; iz <= irmax; ++iz) {\n\t\t\tif (iz < this.nside) { // north polar cap\n\t\t\t\tz = 1.0 - iz * iz * dth1;\n\t\t\t} else if (iz <= (this.nl3)) { // tropical band + equator\n\t\t\t\tz = (this.nl2 - iz) * dth2;\n\t\t\t} else {\n\t\t\t\tz = -1.0 + (this.nl4 - iz) * (this.nl4 - iz) * dth1;\n\t\t\t}\n\t\t\t/* find phi range in the disc for each z */\n\t\t\tx = (cosang - z * z0) * xa;\n\t\t\tysq = 1.0 - z * z - x * x;\n\t\t\t// up north (and south ?) this atan does not work\n\t\t\t// dphi becomes NaN.\n\t\t\tdphi = Math.atan2(Math.sqrt(ysq), x);\n\t\t\tif (isNaN(dphi)) {\n\t\t\t\tdphi = radius_eff;\n\t\t\t}\n\t\t\tthis.inRing(iz, phi, dphi, res);\n\n\t\t}\n\t\tif (rlat2 >= Math.PI) {// south pole in the disc\n\t\t\tfor (var m = irmax + 1; m < (this.nl4); ++m) {\n\t\t\t\t// rings completely in the disc\n\t\t\t\tthis.inRing(m, 0, Math.PI, res, false);\n\t\t\t}\n\t\t}\n\n\t\tvar ret;\n\t\tif (do_nest) {\n\t\t\tvar items = res.items;\n\t\t\tvar items_nest = [];\n\t\t\tfor (var i = 0; i < items.length; i++) {\n\t\t\t\tvar nestIdx = this.ring2nest(items[i]);\n\t\t\t\tif (items_nest.indexOf(nestIdx) >= 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\titems_nest.push(nestIdx);\n\t\t\t}\n\t\t\tret = items_nest;\n\t\t}\n\t\telse {\n\t\t\tret = res.items;\n\t\t}\n\n\t\treturn ret;\n\n\t}\n\n    /**\n     * returns the list of pixels in RING scheme with latitude in [phi0 -\n     * dpi, phi0 + dphi] on the ring iz in [1, 4*nside -1 ] The pixel id numbers\n     * are in [0, 12*nside^2 - 1] the indexing is in RING, unless nest is set to\n     * 1\n     * NOTE: this is the f90 code 'in_ring' method ported to java with 'conservative' flag to false\n     *\n     * @param nside\n     *            long the map resolution\n     * @param iz\n     *            long ring number\n     * @param phi0\n     *            double\n     * @param dphi\n     *            double\n     * @param res result\n     */\n\tHealpixIndex.prototype.inRing = function (iz, phi0, dphi, res, conservative) {\n\t\t\"use strict\";\n\n\t\tvar take_all = false;\n\t\tvar to_top = false;\n\n\t\t//\tString SID = \"InRing:\";\n\t\tvar epsilon = 1e-12;//Double.MIN_VALUE; // the constant to eliminate\n\t\t// java calculation jitter\n\t\tvar shift = 0.;\n\t\tvar ir = 0;\n\t\tvar kshift, nr, ipix1, ipix2;//nir1, nir2,\n\t\tvar ip_low = 0, ip_hi = 0; //,in, nir;\n\t\t//\tlong inext;\n\n\t\tvar phi_low = ((phi0 - dphi) % Constants.TWOPI) - epsilon; // phi min,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  // excluding\n\t\t// 2pi period\n\t\t//\tdouble phi_low = phi0 - dphi - epsilon; // phi min,\n\t\t// excluding\n\t\tvar phi_hi = phi0 + dphi + epsilon;\n\n\t\t// this was being moduloed but why ?? around the 2pi that casues a problem\n\t\tvar phi_hi_mod = ((phi0 + dphi) % Constants.TWOPI) + epsilon;\n\n\t\t//\n\t\tif (Math.abs(dphi - Constants.PI) < epsilon) {\n\t\t\ttake_all = true;\n\t\t}\n\t\t// what happens when phi_hi wraps round ??\n\n\t\t/* identifies ring number */\n\t\tif ((iz >= this.nside) && (iz <= this.nl3)) { // equatorial region\n\t\t\tir = iz - this.nside + 1; // in [1, 2*nside + 1]\n\t\t\tipix1 = this.ncap + this.nl4 * (ir - 1); // lowest pixel number in the\n\t\t\t// ring\n\t\t\tipix2 = ipix1 + this.nl4 - 1; // highest pixel number in the ring\n\t\t\tkshift = ir % 2;\n\n\t\t\tnr = this.nl4;\n\t\t}\n\t\telse {\n\t\t\tif (iz < this.nside) { // north pole\n\t\t\t\tir = iz;\n\t\t\t\tipix1 = 2 * ir * (ir - 1); // lowest pixel number\n\t\t\t\tipix2 = ipix1 + (4 * ir) - 1; // highest pixel number\n\t\t\t} else { // south pole\n\t\t\t\tir = 4 * this.nside - iz;\n\n\t\t\t\tipix1 = this.npix - 2 * ir * (ir + 1); // lowest pixel number\n\t\t\t\tipix2 = ipix1 + 4 * ir - 1;       // highest pixel number\n\t\t\t}\n\t\t\tnr = ir * 4;\n\t\t\tkshift = 1;\n\t\t}\n\n\t\t// Construct the pixel list\n\t\tif (take_all) {\n\t\t\tres.appendRange(ipix1, ipix2);\n\t\t\treturn;\n\t\t}\n\n\t\tshift = kshift / 2.0;\n\n\t\t// conservative : include every intersected pixel, even if the\n\t\t// pixel center is out of the [phi_low, phi_hi] region\n\t\tif (conservative) {\n\t\t\tip_low = Math.round((nr * phi_low) / Constants.TWOPI - shift);\n\t\t\tip_hi = Math.round((nr * phi_hi) / Constants.TWOPI - shift);\n\n\t\t\tip_low = (ip_low % nr); // in [0, nr - 1]\n\t\t\tif (ip_hi > nr) { // ifit is =nr then this sets it to zero - not good\n\t\t\t\tip_hi = (ip_hi % nr); // in [0, nr - 1]\n\t\t\t}\n\t\t\t//\t\tSystem.out.println(\"ip_low=\"+ip_low+\" ip_hi=\"+ip_hi);\n\t\t}\n\t\telse { // strict: includes only pixels whose center is in\n\t\t\t//                                                    [phi_low,phi_hi]\n\n\t\t\tip_low = Math.ceil((nr * phi_low) / Constants.TWOPI - shift);\n\t\t\tip_hi = Utils.castToInt((nr * phi_hi_mod) / Constants.TWOPI - shift);\n\t\t\tif (ip_hi < ip_low && iz == 1) {//this is not good - problem on pole with direction.\n\t\t\t\tip_hi = Utils.castToInt((nr * phi_hi) / Constants.TWOPI - shift);\n\t\t\t}\n\t\t\tif (ip_low == ip_hi + 1) {\n\t\t\t\tip_low = ip_hi;\n\t\t\t}\n\n\t\t\tif ((ip_low - ip_hi == 1) && (dphi * nr < Constants.PI)) {\n\t\t\t\t// the interval is too small ( and away from pixel center)\n\t\t\t\t// so no pixels is included in the list\n\n\t\t\t\tconsole.log(\"the interval is too small and avay from center\");\n\n\t\t\t\treturn; // return empty list\n\t\t\t}\n\n\t\t\tip_low = Math.min(ip_low, nr - 1);\n\t\t\tip_hi = Math.max(ip_hi, 0);\n\t\t}\n\n\t\t//\n\t\tif (ip_low > ip_hi) {\n\t\t\tto_top = true;\n\t\t}\n\n\t\tif (to_top) {\n\t\t\tip_low += ipix1;\n\t\t\tip_hi += ipix1;\n\n\t\t\tres.appendRange(ipix1, ip_hi);\n\t\t\tres.appendRange(ip_low, ipix2);\n\t\t} else {\n\t\t\tif (ip_low < 0) {\n\t\t\t\tip_low = Math.abs(ip_low);\n\n\t\t\t\tres.appendRange(ipix1, ipix1 + ip_hi);\n\t\t\t\tres.appendRange(ipix2 - ip_low + 1, ipix2);\n\t\t\t\treturn;\n\n\t\t\t}\n\t\t\tip_low += ipix1;\n\t\t\tip_hi += ipix1;\n\n\t\t\tres.appendRange(ip_low, ip_hi);\n\t\t}\n\t}\n\n\tHealpixIndex.prototype.ringAbove = function (z) {\n\t\t\"use strict\";\n\n\t\tvar az = Math.abs(z);\n\t\tif (az > Constants.TWOTHIRD) { // polar caps\n\t\t\tvar iring = Utils.castToInt(this.nside * Math.sqrt(3 * (1 - az)));\n\t\t\treturn (z > 0) ? iring : 4 * this.nside - iring - 1;\n\t\t}\n\t\telse { // ----- equatorial region ---------\n\t\t\treturn Utils.castToInt(this.nside * (2.0 - 1.5 * z));\n\t\t}\n\t}\n\n\tHealpixIndex.prototype.ring2nest = function (ipring) {\n\t\t\"use strict\";\n\n\t\tvar xyf = this.ring2xyf(ipring);\n\t\treturn this.xyf2nest(xyf.ix, xyf.iy, xyf.face_num);\n\t}\n\n\tHealpixIndex.prototype.ring2xyf = function (pix) {\n\t\t\"use strict\";\n\n\t\tvar ret = {};\n\t\tvar iring, iphi, kshift, nr;\n\n\t\tif (pix < this.ncap) { // North Polar cap\n\t\t\tiring = Utils.castToInt(0.5 * (1 + Math.sqrt(1 + 2 * pix))); //counted from North pole\n\t\t\tiphi = (pix + 1) - 2 * iring * (iring - 1);\n\t\t\tkshift = 0;\n\t\t\tnr = iring;\n\t\t\tret.face_num = 0;\n\t\t\tvar tmp = iphi - 1;\n\t\t\tif (tmp >= (2 * iring)) {\n\t\t\t\tret.face_num = 2;\n\t\t\t\ttmp -= 2 * iring;\n\t\t\t}\n\t\t\tif (tmp >= iring) {\n\t\t\t\t++ret.face_num;\n\t\t\t}\n\t\t}\n\t\telse if (pix < (this.npix - this.ncap)) { // Equatorial region\n\t\t\tvar ip = pix - this.ncap;\n\t\t\tif (this.order >= 0) {\n\t\t\t\tiring = (ip >> (this.order + 2)) + this.nside; // counted from North pole\n\t\t\t\tiphi = (ip & (this.nl4 - 1)) + 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tiring = (ip / (this.nl4)) + this.nside; // counted from North pole\n\t\t\t\tiphi = (ip % (this.nl4)) + 1;\n\t\t\t}\n\t\t\tkshift = (iring + this.nside) & 1;\n\t\t\tnr = this.nside;\n\t\t\tvar ire = iring - this.nside + 1;\n\t\t\tvar irm = this.nl2 + 2 - ire;\n\t\t\tvar ifm, ifp;\n\t\t\tif (this.order >= 0) {\n\t\t\t\tifm = (iphi - Utils.castToInt(ire / 2) + this.nside - 1) >> this.order;\n\t\t\t\tifp = (iphi - Utils.castToInt(irm / 2) + this.nside - 1) >> this.order;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tifm = (iphi - Utils.castToInt(ire / 2) + this.nside - 1) / this.nside;\n\t\t\t\tifp = (iphi - Utils.castToInt(irm / 2) + this.nside - 1) / this.nside;\n\t\t\t}\n\t\t\tif (ifp == ifm) { // faces 4 to 7\n\t\t\t\tret.face_num = (ifp == 4) ? 4 : Utils.castToInt(ifp) + 4;\n\t\t\t}\n\t\t\telse if (ifp < ifm) { // (half-)faces 0 to 3\n\t\t\t\tret.face_num = Utils.castToInt(ifp);\n\t\t\t}\n\t\t\telse { // (half-)faces 8 to 11\n\t\t\t\tret.face_num = Utils.castToInt(ifm) + 8;\n\t\t\t}\n\t\t}\n\t\telse { // South Polar cap\n\t\t\tvar ip = this.npix - pix;\n\t\t\tiring = Utils.castToInt(0.5 * (1 + Math.sqrt(2 * ip - 1))); //counted from South pole\n\t\t\tiphi = 4 * iring + 1 - (ip - 2 * iring * (iring - 1));\n\t\t\tkshift = 0;\n\t\t\tnr = iring;\n\t\t\tiring = 2 * this.nl2 - iring;\n\t\t\tret.face_num = 8;\n\t\t\tvar tmp = iphi - 1;\n\t\t\tif (tmp >= (2 * nr)) {\n\t\t\t\tret.face_num = 10;\n\t\t\t\ttmp -= 2 * nr;\n\t\t\t}\n\t\t\tif (tmp >= nr) {\n\t\t\t\t++ret.face_num;\n\t\t\t}\n\t\t}\n\n\t\tvar irt = iring - (HealpixIndex.JRLL[ret.face_num] * this.nside) + 1;\n\t\tvar ipt = 2 * iphi - HealpixIndex.JPLL[ret.face_num] * nr - kshift - 1;\n\t\tif (ipt >= this.nl2) {\n\t\t\tipt -= 8 * this.nside;\n\t\t}\n\n\n\t\tret.ix = ((ipt - irt) >> 1);\n\t\tret.iy = ((-(ipt + irt)) >> 1);\n\n\t\treturn ret;\n\t};\n\n\tHealpixIndex.utils = Utils;\n\n\treturn HealpixIndex;\n})();\n\n\n/**\n * The SpatialVector contains standard 3D vector with the addition that each\n * coordinate (x,y,z) is also kept in ra,dec since we expect the vector to live\n * on the surface of the unit sphere, i.e.\n * \n * <pre>\n *  2   2   2\n *  x + y + z  = 1\n * </pre>\n * \n * This is not enforced, so you can specify a vector that has not unit length.\n * If you request the ra/dec of such a vector, it will be automatically\n * normalized to length 1 and you get the ra/dec of that vector (the\n * intersection of the vector's direction with the unit sphere.\n * \n * This code comes originally from the HTM library of Peter Kunst during his\n * time at JHU.\n */\n\n\nexport let SpatialVector = (function () {\n\n\t/**\n\t * Constructor from three coordinates\n\t * \n\t * @param x\n\t * @param y\n\t * @param z\n\t */\n\tfunction SpatialVector(x, y, z) {\n\t\t\"use strict\";\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.ra_ = 0;\n\t\tthis.dec_ = 0;\n\t\tthis.okRaDec_ = false;\n\t}\n\t;\n\tSpatialVector.prototype.setXYZ = function (x, y, z) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.okRaDec_ = false;\n\t};\n\n\t/**\n\t * Returns the length of this vector.\n\t * \n\t * @return the length of this vector\n\t */\n\tSpatialVector.prototype.length = function () {\n\t\t\"use strict\";\n\t\treturn Math.sqrt(this.lengthSquared());\n\t};\n\n\t/**\n\t * Returns the squared length of this vector.\n\t * \n\t * @return the squared length of this vector\n\t */\n\tSpatialVector.prototype.lengthSquared = function () {\n\t\t\"use strict\";\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t};\n\n\t/**\n\t * Normalized this vector\n\t */\n\tSpatialVector.prototype.normalized = function () {\n\t\t\"use strict\";\n\t\tvar d = this.length();\n\t\t// zero-div may occur.\n\t\tthis.x /= d;\n\t\tthis.y /= d;\n\t\tthis.z /= d;\n\t};\n\n\t/**\n\t * Sets the ra and dec angles in degrees\n\t * \n\t * @param ra\n\t *            right ascension angle in degrees\n\t * @param dec\n\t *            declination angle in degrees\n\t * \n\t */\n\tSpatialVector.prototype.set = function (ra, dec) {\n\t\t\"use strict\";\n\t\tthis.ra_ = ra;\n\t\tthis.dec_ = dec;\n\t\tthis.okRaDec_ = true;\n\t\tthis.updateXYZ();\n\t};\n\n\t/**\n\t * Returns the angle in radians between this vector and the vector\n\t * parameter; the return value is constrained to the range [0,PI].\n\t * \n\t * @param v1\n\t *            the other vector\n\t * @return the angle in radians in the range [0,PI]\n\t */\n\tSpatialVector.prototype.angle = function (v1) {\n\t\t\"use strict\";\n\t\t// return (double)Math.acos(dot(v1)/v1.length()/v.length());\n\t\t// Numerically, near 0 and PI are very bad condition for acos.\n\t\t// In 3-space, |atan2(sin,cos)| is much stable.\n\t\tvar xx = this.y * v1.z - this.z * v1.y;\n\t\tvar yy = this.z * v1.x - this.x * v1.z;\n\t\tvar zz = this.x * v1.y - this.y * v1.x;\n\t\tvar cross = Math.sqrt(xx * xx + yy * yy + zz * zz);\n\t\treturn Math.abs(Math.atan2(cross, dot(v1)));\n\t};\n\n\t/**\n\t * Get the coordinates in a 3 elements 1D array\n\t * \n\t * @return coordinates [x,y,z]\n\t */\n\tSpatialVector.prototype.get = function () {\n\t\t\"use strict\";\n\t\treturn [x, y, z];\n\t};\n\n\tSpatialVector.prototype.toString = function () {\n\t\t\"use strict\";\n\t\treturn \"SpatialVector[\" + this.x + \", \" + this.y + \", \" + this.z + \"]\";\n\t};\n\n\t/**\n\t * vector cross product\n\t * \n\t * @param v\n\t *            the vector to cross\n\t * @return the vector cross product\n\t */\n\tSpatialVector.prototype.cross = function (v) {\n\t\t\"use strict\";\n\t\treturn new SpatialVector(this.y * v.z - v.y * this.z, this.z * v.x - v.z * this.x, this.x * v.y - v.x() * this.y);\n\t};\n\n\t/**\n\t * Compare vectors if coordinates are equals\n\t * \n\t * @param v\n\t *            the vector to be compared with\n\t * @return true if both coordinates of vectors are equal\n\t */\n\tSpatialVector.prototype.equal = function (v) {\n\t\t\"use strict\";\n\t\treturn ((this.x == v.x && this.y == v.y && this.z == v.z()) ? true : false);\n\t};\n\n\n\t/**\n\t * multiply with a number\n\t * \n\t * @param n\n\t *            the scale number to be multiply to the coordinates x,y,z\n\t * @return the vector with coordinates multiplied by n\n\t */\n\tSpatialVector.prototype.mult = function (n) {\n\t\t\"use strict\";\n\t\treturn new SpatialVector((n * this.x), (n * this.y), (n * this.z));\n\t};\n\n\t/**\n\t * Computes the dot product of the this vector and vector v1.\n\t * \n\t * @param v1\n\t *            the other vector\n\t * @return dot product\n\t */\n\tSpatialVector.prototype.dot = function (v1) {\n\t\t\"use strict\";\n\t\treturn this.x * v1.x + this.y * v1.y + this.z * v1.z;\n\t};\n\n\t/**\n\t * vector addition\n\t * \n\t * @param v\n\t *            the vector to be added\n\t * @return vector result by addition\n\t */\n\tSpatialVector.prototype.add = function (v) {\n\t\t\"use strict\";\n\t\treturn new SpatialVector(this.x + v.x, this.y + v.y, this.z + v.z);\n\t};\n\n\t/**\n\t * vector subtraction\n\t * \n\t * @param v\n\t *            the vector to be substracted\n\t * @return vector result by substraction\n\t */\n\tSpatialVector.prototype.sub = function (v) {\n\t\t\"use strict\";\n\t\treturn new SpatialVector(this.x - v.x, this.y - v.y, this.z - v.z);\n\t};\n\n\t/**\n\t * Get the dec angle in degrees\n\t * \n\t * @return declination angle\n\t */\n\tSpatialVector.prototype.dec = function () {\n\t\t\"use strict\";\n\t\tif (!this.okRaDec_) {\n\t\t\tthis.normalized();\n\t\t\tthis.updateRaDec();\n\t\t}\n\t\treturn this.dec_;\n\t};\n\n\t/**\n\t * Get the ra angle in degrees\n\t * \n\t * @return right ascension\n\t */\n\tSpatialVector.prototype.ra = function () {\n\t\t\"use strict\";\n\t\tif (!this.okRaDec_) {\n\t\t\tthis.normalized();\n\t\t\tthis.updateRaDec();\n\t\t}\n\t\treturn this.ra_;\n\t};\n\n\t/**\n\t * Update x_ y_ z_ from ra_ and dec_ variables\n\t */\n\tSpatialVector.prototype.updateXYZ = function () {\n\t\t\"use strict\";\n\t\tvar cd = Math.cos(this.dec_ * Constants.C_PR);\n\t\tthis.x = Math.cos(this.ra_ * Constants.C_PR) * cd;\n\t\tthis.y = Math.sin(this.ra_ * Constants.C_PR) * cd;\n\t\tthis.z = Math.sin(this.dec_ * Constants.C_PR);\n\t};\n\n\t/**\n\t * Update ra_ and dec_ from x_ y_ z_ variables\n\t */\n\tSpatialVector.prototype.updateRaDec = function () {\n\t\t\"use strict\";\n\t\tthis.dec_ = Math.asin(this.z) / Constants.C_PR; // easy.\n\t\tvar cd = Math.cos(this.dec_ * Constants.C_PR);\n\t\tif (cd > Constants.EPS || cd < -Constants.EPS) {\n\t\t\tif (this.y > Constants.EPS || this.y < -Constants.EPS) {\n\t\t\t\tif (this.y < 0.0) {\n\t\t\t\t\tthis.ra_ = 360 - Math.acos(this.x / cd) / Constants.C_PR;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.ra_ = Math.acos(this.x / cd) / Constants.C_PR;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.ra_ = (this.x < 0.0 ? 180 : 0.0);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.ra_ = 0.0;\n\t\t}\n\t\tthis.okRaDec_ = true;\n\t};\n\n\t/**\n\t * @return Right Ascension of this vector in radians\n\t */\n\tSpatialVector.prototype.toRaRadians = function () {\n\t\t\"use strict\";\n\t\tvar phi = 0.;\n\t\tif ((this.x != 0.) || (this.y != 0)) {\n\t\t\tphi = Math.atan2(this.y, this.x); // phi in [-pi,pi]\n\t\t}\n\n\t\tif (phi < 0) {\n\t\t\tphi += 2.0 * Math.PI; // phi in [0, 2pi]\n\t\t}\n\n\t\treturn phi;\n\t};\n\n\t/**\n\t * @return Declination of this vector in radians\n\t */\n\tSpatialVector.prototype.toDeRadians = function () {\n\t\tvar z2 = z / this.length();\n\t\tvar theta = Math.acos(z2);\n\t\treturn Math.PI / 2 - theta;\n\t};\n\n\treturn SpatialVector;\n})();","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File HealpixCache\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\n// class holding some HEALPix computations for better performances\n//\n// it is made of :\n// - a static cache for HEALPix corners at nside=8 \n// - a dynamic cache for \n\nimport { HealpixIndex }   from \"./libs/healpix.js\";\n\nexport let HealpixCache = (function() {\n\n    let HealpixCache = {};\n    \n    HealpixCache.staticCache = {corners: {nside8: []}};\n    // TODO : utilisation du dynamicCache\n    HealpixCache.dynamicCache = {};\n    \n    HealpixCache.lastNside = 8;\n    \n    HealpixCache.hpxIdxCache = null;\n    \n    // TODO : conserver en cache le dernier résultat ?\n    \n    HealpixCache.init = function() {\n    \t// pre-compute corners position for nside=8\n    \tvar hpxIdx = new HealpixIndex(8);\n    \thpxIdx.init();\n    \tvar npix = HealpixIndex.nside2Npix(8);\n        let corners;\n    \tfor (var ipix=0; ipix<npix; ipix++) {\n            corners =  hpxIdx.corners_nest(ipix, 1);\n    \t\tHealpixCache.staticCache.corners.nside8.push(corners);\n    \t}\n    \t\n    \tHealpixCache.hpxIdxCache = hpxIdx;\n    };\n\n    HealpixCache.init();\n    \n    HealpixCache.corners_nest = function(ipix, nside) {\n    \tif (nside==8) {\n    \t\treturn HealpixCache.staticCache.corners.nside8[ipix];\n    \t}\n    \t\n    \tif (nside != HealpixCache.lastNside) {\n    \t\tHealpixCache.hpxIdxCache = new HealpixIndex(nside);\n    \t\tHealpixCache.hpxIdxCache.init();\n    \t\tHealpixCache.lastNside = nside;\n    \t}\n    \t\n    \treturn HealpixCache.hpxIdxCache.corners_nest(ipix, 1);\n    \t\n    };\n    \n    return HealpixCache;\n})();\n\t\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File Tile\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nexport let Tile = (function() {\n    // constructor\n\tfunction Tile(img, url) {\n\t\tthis.img = img;\n\t\tthis.url = url;\n\t};\n\t\n\t// check whether the image corresponding to the tile is loaded and ready to be displayed\n\t//\n\t// source : http://www.sajithmr.me/javascript-check-an-image-is-loaded-or-not\n\tTile.isImageOk = function(img) {\n\t\tif (img.allSkyTexture) {\n\t\t\treturn true;\n\t\t}\n\t\t\n        if (!img.src) {\n            return false;\n        }\n\n\t    // During the onload event, IE correctly identifies any images that\n\t    // weren’t downloaded as not complete. Others should too. Gecko-based\n\t    // browsers act like NS4 in that they report this incorrectly.\n\t    if (!img.complete) {\n\t        return false;\n\t    }\n\n\t    // However, they do have two very useful properties: naturalWidth and\n\t    // naturalHeight. These give the true size of the image. If it failed\n\t    // to load, either of these should be zero.\n\n\t    if (typeof img.naturalWidth != \"undefined\" && img.naturalWidth == 0) {\n\t        return false;\n\t    }\n\n        // TODO: Add a method checking if the tile has been copied to the GPU texture\n        \n\n\t    // No other way of checking: assume it’s ok.\n\t    return true;\n\t};\n\t\n\n\treturn Tile;\n})();\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File TileBuffer\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\n import { Tile } from \"./Tile.js\";\n\nexport let TileBuffer = (function() {\n\tvar NB_MAX_TILES = 800; // buffer size\n\t\n\t// constructor\n\tfunction TileBuffer() {\n\t\tthis.pointer = 0;\n\t\tthis.tilesMap = {};\n\t\tthis.tilesArray = new Array(NB_MAX_TILES);\n\n\t\tfor (var i=0; i<NB_MAX_TILES; i++) {\n\t\t\tthis.tilesArray[i] = new Tile(new Image(), null);\n\t\t}\n\t};\n\t\n\tTileBuffer.prototype.addTile = function(url) {\n\t    // return null if already in buffer\n        if (this.getTile(url)) {\n            return null;\n        }\n\n        // delete existing tile\n        var curTile = this.tilesArray[this.pointer];\n        if (curTile.url != null) {\n            curTile.img.src = null;\n            delete this.tilesMap[curTile.url];\n        }\n\n        this.tilesArray[this.pointer].url = url;\n        this.tilesMap[url] = this.tilesArray[this.pointer];\n\n        this.pointer++;\n        if (this.pointer>=NB_MAX_TILES) {\n            this.pointer = 0;\n        }\n\n        return this.tilesMap[url];\n\t};\n\t\n\tTileBuffer.prototype.getTile = function(url) {\n        return this.tilesMap[url];\n\t};\n\t\n\treturn TileBuffer;\n})();\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File Downloader\n * Queue downloading for image elements\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nexport let Downloader = (function() {\n\n\tvar NB_MAX_SIMULTANEOUS_DL = 4;\n\t// TODO : le fading ne marche pas bien actuellement\n\tvar FADING_ENABLED = false;\n\tvar FADING_DURATION = 700; // in milliseconds\n\t\n\t\n\tlet Downloader = function(view) {\n\t\tthis.view = view; // reference to the view to be able to request redraw\n\t\tthis.nbDownloads = 0; // number of current downloads\n\t\tthis.dlQueue = []; // queue of items being downloaded\n        this.urlsInQueue = {};\n\t};\n\n\tDownloader.prototype.emptyQueue = function() {\n\t\tthis.dlQueue = [];\n        this.urlsInQueue = {};\n    };\n\t\n\tDownloader.prototype.requestDownload = function(img, url, cors) {\n        // first check if url already in queue\n        if (url in this.urlsInQueue)  {\n            return;\n        }\n\t\t// put in queue\n\t\tthis.dlQueue.push({img: img, url: url, cors: cors});\n\t\tthis.urlsInQueue[url] = 1;\n\t\t\n\t\tthis.tryDownload();\n\t};\n\t\n\t// try to download next items in queue if possible\n\tDownloader.prototype.tryDownload = function() {\n\t    //if (this.dlQueue.length>0 && this.nbDownloads<NB_MAX_SIMULTANEOUS_DL) {\n\t\twhile (this.dlQueue.length>0 && this.nbDownloads<NB_MAX_SIMULTANEOUS_DL) {\n\t\t\tthis.startDownloadNext();\n\t\t}\n\t};\n\t\n\tDownloader.prototype.startDownloadNext = function() {\n\t\t// get next in queue\n\t\tvar next = this.dlQueue.shift();\n\t\tif ( ! next) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.nbDownloads++;\n\t\tvar downloaderRef = this;\n\t\tnext.img.onload = function() {\n\t\t\tdownloaderRef.completeDownload(this, true); // in this context, 'this' is the Image\n\t\t};\n\t\t\t\n\t\tnext.img.onerror = function(e) {\n\t\t\tdownloaderRef.completeDownload(this, false); // in this context, 'this' is the Image\n\t\t};\n\t\tif (next.cors) {\n\t\t    next.img.crossOrigin = 'anonymous';\n\t\t}\n\t\t\n\t\telse {\n\t\t    if (next.img.crossOrigin !== undefined) {\n\t\t        delete next.img.crossOrigin;\n\t\t    }\n\t\t}\n\t\t\n\t\t\n\t\tnext.img.src = next.url;\n\t};\n\t\n\tDownloader.prototype.completeDownload = function(img, success) {\n        delete this.urlsInQueue[img.src];\n\t\timg.onerror = null;\n\t\timg.onload = null;\n\t\tthis.nbDownloads--;\n\t\tif (success) {\n\t\t\tif (FADING_ENABLED) {\n\t\t\t\tvar now = new Date().getTime();\n\t\t\t\timg.fadingStart = now;\n\t\t\t\timg.fadingEnd = now + FADING_DURATION;\n\t\t\t}\n\t\t\tthis.view.requestRedraw();\n\t\t}\n\t\telse {\n\t\t    img.dlError = true;\n\t\t}\n\t\t\n\t\tthis.tryDownload();\n\t};\n\t\n\t\n\t\n\treturn Downloader;\n})();\n","// stats.js r6 - http://github.com/mrdoob/stats.js\nexport let Stats=function(){function s(a,g,d){var f,c,e;for(c=0;c<30;c++)for(f=0;f<73;f++)e=(f+c*74)*4,a[e]=a[e+4],a[e+1]=a[e+5],a[e+2]=a[e+6];for(c=0;c<30;c++)e=(73+c*74)*4,c<g?(a[e]=b[d].bg.r,a[e+1]=b[d].bg.g,a[e+2]=b[d].bg.b):(a[e]=b[d].fg.r,a[e+1]=b[d].fg.g,a[e+2]=b[d].fg.b)}var r=0,t=2,g,u=0,j=(new Date).getTime(),F=j,v=j,l=0,w=1E3,x=0,k,d,a,m,y,n=0,z=1E3,A=0,f,c,o,B,p=0,C=1E3,D=0,h,i,q,E,b={fps:{bg:{r:16,g:16,b:48},fg:{r:0,g:255,b:255}},ms:{bg:{r:16,g:48,b:16},fg:{r:0,g:255,b:0}},mb:{bg:{r:48,g:16,\nb:26},fg:{r:255,g:0,b:128}}};g=document.createElement(\"div\");g.style.cursor=\"pointer\";g.style.width=\"80px\";g.style.opacity=\"0.9\";g.style.zIndex=\"10001\";g.addEventListener(\"click\",function(){r++;r==t&&(r=0);k.style.display=\"none\";f.style.display=\"none\";h.style.display=\"none\";switch(r){case 0:k.style.display=\"block\";break;case 1:f.style.display=\"block\";break;case 2:h.style.display=\"block\"}},!1);k=document.createElement(\"div\");k.style.backgroundColor=\"rgb(\"+Math.floor(b.fps.bg.r/2)+\",\"+Math.floor(b.fps.bg.g/\n2)+\",\"+Math.floor(b.fps.bg.b/2)+\")\";k.style.padding=\"2px 0px 3px 0px\";g.appendChild(k);d=document.createElement(\"div\");d.style.fontFamily=\"Helvetica, Arial, sans-serif\";d.style.textAlign=\"left\";d.style.fontSize=\"9px\";d.style.color=\"rgb(\"+b.fps.fg.r+\",\"+b.fps.fg.g+\",\"+b.fps.fg.b+\")\";d.style.margin=\"0px 0px 1px 3px\";d.innerHTML='<span style=\"font-weight:bold\">FPS</span>';k.appendChild(d);a=document.createElement(\"canvas\");a.width=74;a.height=30;a.style.display=\"block\";a.style.marginLeft=\"3px\";k.appendChild(a);\nm=a.getContext(\"2d\");m.fillStyle=\"rgb(\"+b.fps.bg.r+\",\"+b.fps.bg.g+\",\"+b.fps.bg.b+\")\";m.fillRect(0,0,a.width,a.height);y=m.getImageData(0,0,a.width,a.height);f=document.createElement(\"div\");f.style.backgroundColor=\"rgb(\"+Math.floor(b.ms.bg.r/2)+\",\"+Math.floor(b.ms.bg.g/2)+\",\"+Math.floor(b.ms.bg.b/2)+\")\";f.style.padding=\"2px 0px 3px 0px\";f.style.display=\"none\";g.appendChild(f);c=document.createElement(\"div\");c.style.fontFamily=\"Helvetica, Arial, sans-serif\";c.style.textAlign=\"left\";c.style.fontSize=\n\"9px\";c.style.color=\"rgb(\"+b.ms.fg.r+\",\"+b.ms.fg.g+\",\"+b.ms.fg.b+\")\";c.style.margin=\"0px 0px 1px 3px\";c.innerHTML='<span style=\"font-weight:bold\">MS</span>';f.appendChild(c);a=document.createElement(\"canvas\");a.width=74;a.height=30;a.style.display=\"block\";a.style.marginLeft=\"3px\";f.appendChild(a);o=a.getContext(\"2d\");o.fillStyle=\"rgb(\"+b.ms.bg.r+\",\"+b.ms.bg.g+\",\"+b.ms.bg.b+\")\";o.fillRect(0,0,a.width,a.height);B=o.getImageData(0,0,a.width,a.height);try{performance&&performance.memory&&performance.memory.totalJSHeapSize&&\n(t=3)}catch(G){}h=document.createElement(\"div\");h.style.backgroundColor=\"rgb(\"+Math.floor(b.mb.bg.r/2)+\",\"+Math.floor(b.mb.bg.g/2)+\",\"+Math.floor(b.mb.bg.b/2)+\")\";h.style.padding=\"2px 0px 3px 0px\";h.style.display=\"none\";g.appendChild(h);i=document.createElement(\"div\");i.style.fontFamily=\"Helvetica, Arial, sans-serif\";i.style.textAlign=\"left\";i.style.fontSize=\"9px\";i.style.color=\"rgb(\"+b.mb.fg.r+\",\"+b.mb.fg.g+\",\"+b.mb.fg.b+\")\";i.style.margin=\"0px 0px 1px 3px\";i.innerHTML='<span style=\"font-weight:bold\">MB</span>';\nh.appendChild(i);a=document.createElement(\"canvas\");a.width=74;a.height=30;a.style.display=\"block\";a.style.marginLeft=\"3px\";h.appendChild(a);q=a.getContext(\"2d\");q.fillStyle=\"#301010\";q.fillRect(0,0,a.width,a.height);E=q.getImageData(0,0,a.width,a.height);return{domElement:g,update:function(){u++;j=(new Date).getTime();n=j-F;z=Math.min(z,n);A=Math.max(A,n);s(B.data,Math.min(30,30-n/200*30),\"ms\");c.innerHTML='<span style=\"font-weight:bold\">'+n+\" MS</span> (\"+z+\"-\"+A+\")\";o.putImageData(B,0,0);F=j;if(j>\nv+1E3){l=Math.round(u*1E3/(j-v));w=Math.min(w,l);x=Math.max(x,l);s(y.data,Math.min(30,30-l/100*30),\"fps\");d.innerHTML='<span style=\"font-weight:bold\">'+l+\" FPS</span> (\"+w+\"-\"+x+\")\";m.putImageData(y,0,0);if(t==3)p=performance.memory.usedJSHeapSize*9.54E-7,C=Math.min(C,p),D=Math.max(D,p),s(E.data,Math.min(30,30-p/2),\"mb\"),i.innerHTML='<span style=\"font-weight:bold\">'+Math.round(p)+\" MB</span> (\"+Math.round(C)+\"-\"+Math.round(D)+\")\",q.putImageData(E,0,0);v=j;u=0}}}};\n\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File ColorMap.js\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nimport { AladinUtils } from \"./AladinUtils.js\";\n\nexport let ColorMap = (function() {\n    \n    \n    // constructor\n    let ColorMap = function(view) {\n        this.view = view;\n        this.reversed = false;\n        this.mapName = 'native';\n        this.sig = this.signature();\n    };\n    \nColorMap.MAPS = {};\n    \n    ColorMap.MAPS['eosb'] = {\n            name: 'Eos B',\n            r: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,9,18,27,36,45,49,57,72,81,91,100,109,118,127,\n                136,131,139,163,173,182,191,200,209,218,227,213,221,255,255,255,255,255,\n                255,255,255,229,229,255,255,255,255,255,255,255,255,229,229,255,255,255,\n                255,255,255,255,255,229,229,255,255,255,255,255,255,255,255,229,229,255,\n                255,255,255,255,255,255,255,229,229,255,255,255,255,255,255,255,255,229,\n                229,255,255,255,255,255,255,255,255,229,229,255,255,255,255,255,255,255,\n                255,229,229,255,255,255,255,255,255,255,255,229,229,255,253,251,249,247,\n                245,243,241,215,214,235,234,232,230,228,226,224,222,198,196,216,215,213,\n                211,209,207,205,203,181,179,197,196,194,192,190,188,186,184,164,162,178,\n                176,175,173,171,169,167,165,147,145,159,157,156,154,152,150,148,146,130,\n                128,140,138,137,135,133,131,129,127,113,111,121,119,117,117],\n            g: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,23,31,39,47,55,57,64,79,87,95,\n                103,111,119,127,135,129,136,159,167,175,183,191,199,207,215,200,207,239,\n                247,255,255,255,255,255,255,229,229,255,255,255,255,255,255,255,255,229,\n                229,255,255,255,255,255,255,255,255,229,229,255,250,246,242,238,233,229,\n                225,198,195,212,208,204,199,195,191,187,182,160,156,169,165,161,157,153,\n                148,144,140,122,118,127,125,123,121,119,116,114,112,99,97,106,104,102,\n                99,97,95,93,91,80,78,84,82,80,78,76,74,72,70,61,59,63,61,59,57,55,53,50,\n                48,42,40,42,40,38,36,33,31,29,27,22,21,21,19,16,14,12,13,8,6,3,1,0,0,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            b: [116,121,127,131,136,140,144,148,153,\n                157,145,149,170,174,178,182,187,191,195,199,183,187,212,216,221,225,229,\n                233,238,242,221,225,255,247,239,231,223,215,207,199,172,164,175,167,159,\n                151,143,135,127,119,100,93,95,87,79,71,63,55,47,39,28,21,15,7,0,0,0,0,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n                0,0,0,0,0,0,0]\n    };\n    ColorMap.MAPS['rainbow'] = {\n            name: 'Rainbow',\n            r: [0,4,9,13,18,22,27,31,36,40,45,50,54,\n                58,61,64,68,69,72,74,77,79,80,82,83,85,84,86,87,88,86,87,87,87,85,84,84,\n                84,83,79,78,77,76,71,70,68,66,60,58,55,53,46,43,40,36,33,25,21,16,12,4,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,8,12,21,25,29,33,42,\n                46,51,55,63,67,72,76,80,89,93,97,101,110,114,119,123,131,135,140,144,153,\n                157,161,165,169,178,182,187,191,199,203,208,212,221,225,229,233,242,246,\n                250,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n                255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n                255,255,255,255,255,255,255,255,255,255,255,255,255,255],\n            g: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n                0,0,0,0,0,0,0,0,4,8,16,21,25,29,38,42,46,51,55,63,67,72,76,84,89,93,97,\n                106,110,114,119,127,131,135,140,144,152,157,161,165,174,178,182,187,195,\n                199,203,208,216,220,225,229,233,242,246,250,255,255,255,255,255,255,255,\n                255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n                255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n                255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n                255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n                255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n                255,250,242,238,233,229,221,216,212,208,199,195,191,187,178,174,170,165,\n                161,153,148,144,140,131,127,123,119,110,106,102,97,89,85,80,76,72,63,59,\n                55,51,42,38,34,29,21,17,12,8,0],\n            b: [0,3,7,10,14,19,23,28,32,38,43,48,53,\n                59,63,68,72,77,81,86,91,95,100,104,109,113,118,122,127,132,136,141,145,\n                150,154,159,163,168,173,177,182,186,191,195,200,204,209,214,218,223,227,\n                232,236,241,245,250,255,255,255,255,255,255,255,255,255,255,255,255,255,\n                255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n                255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n                255,255,255,255,255,255,246,242,238,233,225,220,216,212,203,199,195,191,\n                187,178,174,170,165,157,152,148,144,135,131,127,123,114,110,106,102,97,\n                89,84,80,76,67,63,59,55,46,42,38,34,25,21,16,12,8,0,0,0,0,0,0,0,0,0,0,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n    };\n    ColorMap.MAPS['cubehelix'] = {\n            name: 'Cubehelix',\n            r: [0,1,3,4,6,8,9,10,12,13,14,15,17,18,\n                19,20,20,21,22,23,23,24,24,25,25,25,26,26,26,26,26,26,26,26,26,26,26,25,\n                25,25,25,24,24,24,23,23,23,23,22,22,22,21,21,21,21,21,21,20,20,20,21,21,\n                21,21,21,22,22,22,23,23,24,25,26,27,27,28,30,31,32,33,35,36,38,39,41,43,\n                45,47,49,51,53,55,57,60,62,65,67,70,72,75,78,81,83,86,89,92,95,98,101,104,\n                107,110,113,116,120,123,126,129,132,135,138,141,144,147,150,153,155,158,\n                161,164,166,169,171,174,176,178,181,183,185,187,189,191,193,194,196,198,\n                199,201,202,203,204,205,206,207,208,209,209,210,211,211,211,212,212,212,\n                212,212,212,212,212,211,211,211,210,210,210,209,208,208,207,207,206,205,\n                205,204,203,203,202,201,201,200,199,199,198,197,197,196,196,195,195,194,\n                194,194,193,193,193,193,193,193,193,193,193,193,194,194,195,195,196,196,\n                197,198,199,200,200,202,203,204,205,206,208,209,210,212,213,215,217,218,\n                220,222,223,225,227,229,231,232,234,236,238,240,242,244,245,247,249,251,\n                253,255],\n            g: [0,0,1,1,2,2,3,4,4,5,6,6,7,8,9,10,\n                11,11,12,13,14,15,17,18,19,20,21,22,24,25,26,28,29,31,32,34,35,37,38,40,\n                41,43,45,46,48,50,52,53,55,57,58,60,62,64,66,67,69,71,73,74,76,78,79,81,\n                83,84,86,88,89,91,92,94,95,97,98,99,101,102,103,104,106,107,108,109,110,\n                111,112,113,114,114,115,116,116,117,118,118,119,119,120,120,120,121,121,\n                121,121,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,121,\n                121,121,121,121,121,121,121,121,120,120,120,120,120,120,120,120,120,120,\n                121,121,121,121,121,122,122,122,123,123,124,124,125,125,126,127,127,128,\n                129,130,131,131,132,133,135,136,137,138,139,140,142,143,144,146,147,149,\n                150,152,154,155,157,158,160,162,164,165,167,169,171,172,174,176,178,180,\n                182,183,185,187,189,191,193,194,196,198,200,202,203,205,207,208,210,212,\n                213,215,216,218,219,221,222,224,225,226,228,229,230,231,232,233,235,236,\n                237,238,239,240,240,241,242,243,244,244,245,246,247,247,248,248,249,250,\n                250,251,251,252,252,253,253,254,255],\n            b: [0,1,3,4,6,8,9,11,13,15,17,19,21,23,\n                25,27,29,31,33,35,37,39,41,43,45,47,48,50,52,54,56,57,59,60,62,63,65,66,\n                67,69,70,71,72,73,74,74,75,76,76,77,77,77,78,78,78,78,78,78,78,77,77,77,\n                76,76,75,75,74,73,73,72,71,70,69,68,67,66,66,65,64,63,61,60,59,58,58,57,\n                56,55,54,53,52,51,51,50,49,49,48,48,47,47,47,46,46,46,46,46,47,47,47,48,\n                48,49,50,50,51,52,53,55,56,57,59,60,62,64,65,67,69,71,74,76,78,81,83,86,\n                88,91,94,96,99,102,105,108,111,114,117,120,124,127,130,133,136,140,143,\n                146,149,153,156,159,162,165,169,172,175,178,181,184,186,189,192,195,197,\n                200,203,205,207,210,212,214,216,218,220,222,224,226,227,229,230,231,233,\n                234,235,236,237,238,239,239,240,241,241,242,242,242,243,243,243,243,243,\n                243,243,243,243,243,242,242,242,242,241,241,241,241,240,240,240,239,239,\n                239,239,239,238,238,238,238,238,238,238,238,239,239,239,240,240,240,241,\n                242,242,243,244,245,246,247,248,249,250,252,253,255]\n    };\n\n\n    \n    ColorMap.MAPS_CUSTOM = ['cubehelix', 'eosb', 'rainbow'];\n    ColorMap.MAPS_NAMES = ['native', 'grayscale'].concat(ColorMap.MAPS_CUSTOM);\n    \n    ColorMap.prototype.reverse = function(val) {\n        if (val) {\n            this.reversed = val;\n        }\n        else {\n            this.reversed = ! this.reversed;\n        }\n        this.sig = this.signature();\n        this.view.requestRedraw();\n    };\n    \n    \n    ColorMap.prototype.signature = function() {\n        var s = this.mapName;\n        \n        if (this.reversed) {\n            s += ' reversed';\n        }\n        \n        return s;\n    };\n    \n    ColorMap.prototype.update = function(mapName) {\n        this.mapName = mapName;\n        this.sig = this.signature();\n        this.view.requestRedraw();\n    };\n    \n    ColorMap.prototype.apply = function(img) {\n        if ( this.sig=='native' ) {\n            return img;\n        }\n        \n        if (img.cmSig==this.sig) {\n            return img.cmImg; // return cached pixels\n        }\n        \n        var canvas = document.createElement(\"canvas\");\n        canvas.width = img.width;\n        canvas.height = img.height;\n        var ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        \n        var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        var pixelData = imageData.data;\n        var length = pixelData.length;\n        var a, b, c;\n        var switchCase = 3;\n        if (this.mapName=='grayscale') {\n            switchCase = 1;\n        }\n        else if (ColorMap.MAPS_CUSTOM.indexOf(this.mapName)>=0) {\n            switchCase = 2;\n        }\n        for (var i = 0; i < length; i+= 4) {\n            switch(switchCase) {\n                case 1:\n                    a = b = c = AladinUtils.myRound((pixelData[i]+pixelData[i+1]+pixelData[i+2])/3);\n                    break;\n                case 2:\n                    if (this.reversed) {\n                        a = ColorMap.MAPS[this.mapName].r[255-pixelData[i]];\n                        b = ColorMap.MAPS[this.mapName].g[255-pixelData[i+1]];\n                        c = ColorMap.MAPS[this.mapName].b[255-pixelData[i+2]];\n                    }\n                    else {\n                        a = ColorMap.MAPS[this.mapName].r[pixelData[i]];\n                        b = ColorMap.MAPS[this.mapName].g[pixelData[i+1]];\n                        c = ColorMap.MAPS[this.mapName].b[pixelData[i+2]];\n                    }\n                    break;\n                default:\n                    a = pixelData[i];\n                    b = pixelData[i + 1];\n                    c = pixelData[i + 2];\n                    \n            }\n            if (switchCase!=2 && this.reversed) {\n                a = 255-a;\n                b = 255-b;\n                c = 255-c;\n              \n            }\n            pixelData[i]     = a;\n            pixelData[i + 1] = b;\n            pixelData[i + 2] = c;\n            \n        }\n        //imageData.data = pixelData;  // not needed, and create an error in strict mode !\n        ctx.putImageData(imageData, 0, 0);\n        \n        // cache image with color map applied\n        img.cmSig = this.sig;\n        img.cmImg = canvas;\n\n        return img.cmImg;\n    };\n    \n    return ColorMap;\n})();\n    \n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File Footprint\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nimport { Utils } from \"./Utils.js\";\n\nexport let Footprint = (function() {\n    // constructor\n    let Footprint = function(polygons) {\n        this.polygons = polygons;\n    \tthis.overlay = null;\n\n        // TODO : all graphic overlays should have an id\n        this.id = 'footprint-' + Utils.uuidv4();\n    \t\n    \tthis.isShowing = true;\n    \tthis.isSelected = false;\n    };\n    \n    Footprint.prototype.setOverlay = function(overlay) {\n        this.overlay = overlay;\n    };\n    \n    Footprint.prototype.show = function() {\n        if (this.isShowing) {\n            return;\n        }\n        this.isShowing = true;\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n    \n    Footprint.prototype.hide = function() {\n        if (! this.isShowing) {\n            return;\n        }\n        this.isShowing = false;\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n\n    Footprint.prototype.dispatchClickEvent = function() {\n        if (this.overlay) {\n            // footprint selection code adapted from Fabrizio Giordano dev. from Serco for ESA/ESDC\n            //window.dispatchEvent(new CustomEvent(\"footprintClicked\", {\n            this.overlay.view.aladinDiv.dispatchEvent(new CustomEvent(\"footprintClicked\", {\n                detail: {\n                    footprintId: this.id,\n                    overlayName: this.overlay.name\n                }\n            }));\n        }\n    };\n    \n    Footprint.prototype.select = function() {\n        if (this.isSelected) {\n            return;\n        }\n        this.isSelected = true;\n        if (this.overlay) {\n/*\n            // footprint selection code adapted from Fabrizio Giordano dev. from Serco for ESA/ESDC\n            //window.dispatchEvent(new CustomEvent(\"footprintClicked\", {\n            this.overlay.view.aladinDiv.dispatchEvent(new CustomEvent(\"footprintClicked\", {\n                detail: {\n                    footprintId: this.id,\n                    overlayName: this.overlay.name\n                }\n            }));\n*/\n\n            this.overlay.reportChange();\n        }\n    };\n\n    Footprint.prototype.deselect = function() {\n        if (! this.isSelected) {\n            return;\n        }\n        this.isSelected = false;\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n    \n    return Footprint;\n})();\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File Circle\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nimport { Utils } from \"./Utils.js\";\nimport { AladinUtils } from \"./AladinUtils.js\";\nimport { CooFrameEnum } from \"./CooFrameEnum.js\";\nimport { Aladin } from \"./Aladin.js\";\n\n// TODO : Circle and Footprint should inherit from the same root object\nexport let Circle = (function() {\n    // constructor\n    let Circle = function(centerRaDec, radiusDegrees, options) {\n        options = options || {};\n\n        this.color = options['color'] || undefined;\n\n        // TODO : all graphic overlays should have an id\n        this.id = 'circle-' + Utils.uuidv4();\n\n        this.setCenter(centerRaDec);\n        this.setRadius(radiusDegrees);\n    \tthis.overlay = null;\n    \t\n    \tthis.isShowing = true;\n    \tthis.isSelected = false;\n    };\n\n    Circle.prototype.setOverlay = function(overlay) {\n        this.overlay = overlay;\n    };\n    \n    Circle.prototype.show = function() {\n        if (this.isShowing) {\n            return;\n        }\n        this.isShowing = true;\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n    \n    Circle.prototype.hide = function() {\n        if (! this.isShowing) {\n            return;\n        }\n        this.isShowing = false;\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n    \n    Circle.prototype.dispatchClickEvent = function() {\n        if (this.overlay) {\n            // footprint selection code adapted from Fabrizio Giordano dev. from Serco for ESA/ESDC\n            //window.dispatchEvent(new CustomEvent(\"footprintClicked\", {\n            this.overlay.view.aladinDiv.dispatchEvent(new CustomEvent(\"footprintClicked\", {\n                detail: {\n                    footprintId: this.id,\n                    overlayName: this.overlay.name\n                }\n            }));\n        }\n    };\n    \n    Circle.prototype.select = function() {\n        if (this.isSelected) {\n            return;\n        }\n        this.isSelected = true;\n        if (this.overlay) {\n/*\n            this.overlay.view.aladinDiv.dispatchEvent(new CustomEvent(\"footprintClicked\", {\n                detail: {\n                    footprintId: this.id,\n                    overlayName: this.overlay.name\n                }\n            }));\n*/\n\n            this.overlay.reportChange();\n        }\n    };\n\n    Circle.prototype.deselect = function() {\n        if (! this.isSelected) {\n            return;\n        }\n        this.isSelected = false;\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n\n\n    \n    Circle.prototype.setCenter = function(centerRaDec) {\n        this.centerRaDec = centerRaDec;\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n\n    Circle.prototype.setRadius = function(radiusDegrees) {\n        this.radiusDegrees = radiusDegrees;\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n\n    // TODO\n    Circle.prototype.draw = function(ctx, view, projection, frame, width, height, largestDim, zoomFactor, noStroke) {\n        if (! this.isShowing) {\n            return;\n        }\n        noStroke = noStroke===true || false;\n\n        /*var centerXy;\n        if (frame.system != CooFrameEnum.SYSTEMS.J2000) {\n            var lonlat = CooConversion.J2000ToGalactic([this.centerRaDec[0], this.centerRaDec[1]]);\n            centerXy = projection.project(lonlat[0], lonlat[1]);\n        }\n        else {\n            centerXy = projection.project(this.centerRaDec[0], this.centerRaDec[1]);\n        }\n        if (!centerXy) {\n            return;\n        }\n        var centerXyview = AladinUtils.xyToView(centerXy.X, centerXy.Y, width, height, largestDim, zoomFactor, false);*/\n        var centerXyview = AladinUtils.radecToViewXy(this.centerRaDec[0], this.centerRaDec[1], view);\n        if (!centerXyview) {\n            // the center goes out of the projection\n            // we do not draw it\n            return;\n        }\n        // compute value of radius in pixels in current projection\n        var ra = this.centerRaDec[0];\n        var dec = this.centerRaDec[1] + (ra>0 ? - this.radiusDegrees : this.radiusDegrees);\n        /*\n        var circlePtXy;\n        if (frame.system != CooFrameEnum.SYSTEMS.J2000) {\n            var lonlat = CooConversion.J2000ToGalactic([ra, dec]);\n            circlePtXy = projection.project(lonlat[0], lonlat[1]);\n        }\n        else {\n            circlePtXy = projection.project(ra, dec);\n        }\n        if (!circlePtXy) {\n            return;\n        }\n        var circlePtXyView = AladinUtils.xyToView(circlePtXy.X, circlePtXy.Y, width, height, largestDim, zoomFactor, false);\n        */\n        let circlePtXyView = AladinUtils.radecToViewXy(ra, dec, view);\n        if (!circlePtXyView) {\n            // the circle border goes out of the projection\n            // we do not draw it\n            return;\n        }\n        var dx = circlePtXyView[0] - centerXyview[0];\n        var dy = circlePtXyView[1] - centerXyview[1];\n        var radiusInPix = Math.sqrt(dx*dx + dy*dy);\n\n        // TODO : check each 4 point until show\n        var baseColor = this.color;\n        if (! baseColor && this.overlay) {\n            baseColor = this.overlay.color;\n        }\n        if (! baseColor) {\n            baseColor = '#ff0000';\n        }\n        \n        if (this.isSelected) {\n            ctx.strokeStyle= Overlay.increaseBrightness(baseColor, 50);\n        }\n        else {\n            ctx.strokeStyle= baseColor;\n        }\n\n        ctx.beginPath();\n        ctx.arc(centerXyview[0], centerXyview[1], radiusInPix, 0, 2*Math.PI, false);\n        if (!noStroke) {\n            ctx.stroke();\n        }\n    }; \n    \n    return Circle;\n})();\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\nexport let CooConversion = (function() {\n\n    let CooConversion = {};\n    \n    CooConversion.GALACTIC_TO_J2000 = [\n       -0.0548755604024359,  0.4941094279435681, -0.8676661489811610,\n       -0.8734370902479237, -0.4448296299195045, -0.1980763734646737,\n       -0.4838350155267381,  0.7469822444763707,  0.4559837762325372 ];\n    \n    CooConversion.J2000_TO_GALACTIC = [\n        -0.0548755604024359, -0.873437090247923, -0.4838350155267381,\n         0.4941094279435681, -0.4448296299195045, 0.7469822444763707,\n        -0.8676661489811610, -0.1980763734646737, 0.4559837762325372 ];\n    \n    // adapted from www.robertmartinayers.org/tools/coordinates.html\n    // radec : array of ra, dec in degrees\n    // return coo in degrees\n    CooConversion.Transform = function( radec, matrix ) {// returns a radec array of two elements\n        radec[0] = radec[0]*Math.PI/180;\n        radec[1] = radec[1]*Math.PI/180;\n      var r0 = new Array ( \n       Math.cos(radec[0]) * Math.cos(radec[1]),\n       Math.sin(radec[0]) * Math.cos(radec[1]),\n       Math.sin(radec[1]) );\n        \n     var s0 = new Array (\n       r0[0]*matrix[0] + r0[1]*matrix[1] + r0[2]*matrix[2], \n       r0[0]*matrix[3] + r0[1]*matrix[4] + r0[2]*matrix[5], \n       r0[0]*matrix[6] + r0[1]*matrix[7] + r0[2]*matrix[8] ); \n     \n      var r = Math.sqrt ( s0[0]*s0[0] + s0[1]*s0[1] + s0[2]*s0[2] ); \n    \n      var result = new Array ( 0.0, 0.0 );\n      result[1] = Math.asin ( s0[2]/r ); // New dec in range -90.0 -- +90.0 \n      // or use sin^2 + cos^2 = 1.0  \n      var cosaa = ( (s0[0]/r) / Math.cos(result[1] ) );\n      var sinaa = ( (s0[1]/r) / Math.cos(result[1] ) );\n      result[0] = Math.atan2 (sinaa,cosaa);\n      if ( result[0] < 0.0 ) result[0] = result[0] + 2*Math.PI;\n    \n        result[0] = result[0]*180/Math.PI;\n        result[1] = result[1]*180/Math.PI;\n      return result;\n    };\n    \n    // coo : array of lon, lat in degrees\n    CooConversion.GalacticToJ2000 = function(coo) {\n        return CooConversion.Transform(coo, CooConversion.GALACTIC_TO_J2000);\n    };\n    // coo : array of lon, lat in degrees\n    CooConversion.J2000ToGalactic = function(coo) {\n        return CooConversion.Transform(coo, CooConversion.J2000_TO_GALACTIC);\n    };\n    return CooConversion;\n})();\n","// requestAnimationFrame() shim by Paul Irish\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n/*export let requestAnimFrame = (function() {\n\treturn  window.requestAnimationFrame       || \n\t\t\twindow.webkitRequestAnimationFrame || \n\t\t\twindow.mozRequestAnimationFrame    || \n\t\t\twindow.oRequestAnimationFrame      || \n\t\t\twindow.msRequestAnimationFrame     || \n\t\t\tfunction( callback, element){\n\t\t\t\twindow.setTimeout(callback, 1000 / 60);\n\t\t\t};\n})();\n*/\n\nexport let requestAnimFrame = (function() {\n\treturn  window.requestAnimationFrame       || \n\t\t\twindow.webkitRequestAnimationFrame || \n\t\t\twindow.mozRequestAnimationFrame    || \n\t\t\twindow.oRequestAnimationFrame      || \n\t\t\twindow.msRequestAnimationFrame;\n})();\n","/* Import all the shaders here*/ \n// Catalog shaders\nimport CatalogAitoffVS from '../core/src/shaders/webgl1/catalogs/aitoff.vert';\nimport CatalogMercatVS from '../core/src/shaders/webgl1/catalogs/mercator.vert';\nimport CatalogArcVS from '../core/src/shaders/webgl1/catalogs/arc.vert';\nimport CatalogTanVS from '../core/src/shaders/webgl1/catalogs/tan.vert';\nimport CatalogMollVS from '../core/src/shaders/webgl1/catalogs/mollweide.vert';\nimport CatalogOrthoVS from '../core/src/shaders/webgl1/catalogs/ortho.vert';\nimport CatalogOrthoFS from '../core/src/shaders/webgl1/catalogs/ortho.frag';\nimport CatalogFS from '../core/src/shaders/webgl1/catalogs/catalog.frag';\n\n// Colormap shaders\nimport ColormapCatalogVS from '../core/src/shaders/webgl1/colormaps/colormap.vert'\nimport ColormapCatalogFS from '../core/src/shaders/webgl1/colormaps/colormap.frag'\n\n// Grid shader\nimport GridVS from '../core/src/shaders/webgl1/grid/grid.vert'\nimport GridAitoffFS from '../core/src/shaders/webgl1/grid/aitoff.frag'\nimport GridMollFS from '../core/src/shaders/webgl1/grid/mollweide.frag'\nimport GridOrthoFS from '../core/src/shaders/webgl1/grid/ortho.frag'\nimport GridMercatorFS from '../core/src/shaders/webgl1/grid/mercator.frag'\nimport GridArcFS from '../core/src/shaders/webgl1/grid/arc.frag'\nimport GridTanFS from '../core/src/shaders/webgl1/grid/tan.frag'\nimport GridVS_CPU from '../core/src/shaders/webgl1/grid/grid_cpu.vert'\nimport GridFS_CPU from '../core/src/shaders/webgl1/grid/grid_cpu.frag'\n\n// HiPS shaders\n// Raytracer\nimport RayTracerVS from '../core/src/shaders/webgl1/hips/raytracer/raytracer.vert'\nimport RayTracerColorFS from '../core/src/shaders/webgl1/hips/raytracer/color.frag'\nimport RayTracerGrayscale2ColorFS from '../core/src/shaders/webgl1/hips/raytracer/grayscale_to_color.frag'\nimport RayTracerGrayscale2ColormapFS from '../core/src/shaders/webgl1/hips/raytracer/grayscale_to_colormap.frag'\n// Rasterizer\nimport RasterizerOrthoVS from '../core/src/shaders/webgl1/hips/rasterizer/ortho.vert'\nimport RasterizerMercatorVS from '../core/src/shaders/webgl1/hips/rasterizer/mercator.vert'\nimport RasterizerAitoffVS from '../core/src/shaders/webgl1/hips/rasterizer/aitoff.vert'\nimport RasterizerGnomonicVS from '../core/src/shaders/webgl1/hips/rasterizer/gnomonic.vert'\nimport RasterizerArcVS from '../core/src/shaders/webgl1/hips/rasterizer/arc.vert'\nimport RasterizerMollVS from '../core/src/shaders/webgl1/hips/rasterizer/mollweide.vert'\nimport RasterizerColorFS from '../core/src/shaders/webgl1/hips/rasterizer/color.frag'\nimport RasterizerGrayscale2ColorFS from '../core/src/shaders/webgl1/hips/rasterizer/grayscale_to_color.frag'\nimport RasterizerGrayscale2ColormapFS from '../core/src/shaders/webgl1/hips/rasterizer/grayscale_to_colormap.frag'\n\nlet shaders = [\n    // Catalog shaders\n    {\n        id: \"CatalogAitoffVS\",\n        content: CatalogAitoffVS,\n    },\n    {\n        id: \"CatalogMercatVS\",\n        content: CatalogMercatVS,\n    },\n    {\n        id: \"CatalogArcVS\",\n        content: CatalogArcVS,\n    },\n    {\n        id: \"CatalogTanVS\",\n        content: CatalogTanVS,\n    },\n    {\n        id: \"CatalogMollVS\",\n        content: CatalogMollVS,\n    },\n    {\n        id: \"CatalogOrthoVS\",\n        content: CatalogOrthoVS,\n    },\n    {\n        id: \"CatalogOrthoFS\",\n        content: CatalogOrthoFS,\n    },\n    {\n        id: \"CatalogFS\",\n        content: CatalogFS,    \n    },\n    // Colormap shaders\n    {\n        id: \"ColormapCatalogVS\",\n        content: ColormapCatalogVS,\n    },\n    {\n        id: \"ColormapCatalogFS\",\n        content: ColormapCatalogFS,\n    },\n    // Grid shader\n    {\n        id: \"GridVS\",\n        content: GridVS,\n    },\n    {\n        id: \"GridAitoffFS\",\n        content: GridAitoffFS,\n    },\n    {\n        id: \"GridMollFS\",\n        content: GridMollFS,\n    },\n    {\n        id: \"GridOrthoFS\",\n        content: GridOrthoFS,\n    },\n    {\n        id: \"GridMercatorFS\",\n        content: GridMercatorFS,\n    },\n    {\n        id: \"GridArcFS\",\n        content: GridArcFS,\n    },\n    {\n        id: \"GridTanFS\",\n        content: GridTanFS,\n    },\n    {\n        id: \"GridFS_CPU\",\n        content: GridFS_CPU,\n    },\n    {\n        id: \"GridVS_CPU\",\n        content: GridVS_CPU,\n    },\n    // HiPS shaders\n    // Raytracer\n    {\n        id: \"RayTracerVS\",\n        content: RayTracerVS,\n    },\n    {\n        id: \"RayTracerColorFS\",\n        content: RayTracerColorFS,\n    },\n    {\n        id: \"RayTracerGrayscale2ColorFS\",\n        content: RayTracerGrayscale2ColorFS,\n    },\n    {\n        id: \"RayTracerGrayscale2ColormapFS\",\n        content: RayTracerGrayscale2ColormapFS,\n    },\n    /// Rasterizer\n    {\n        id: \"RasterizerOrthoVS\",\n        content: RasterizerOrthoVS,\n    },\n    {\n        id: \"RasterizerMercatorVS\",\n        content: RasterizerMercatorVS,\n    },\n    {\n        id: \"RasterizerAitoffVS\",\n        content: RasterizerAitoffVS,\n    },\n    {\n        id: \"RasterizerArcVS\",\n        content: RasterizerArcVS,\n    },\n    {\n        id: \"RasterizerGnomonicVS\",\n        content: RasterizerGnomonicVS,\n    },\n    {\n        id: \"RasterizerMollVS\",\n        content: RasterizerMollVS,\n    },\n    {\n        id: \"RasterizerColorFS\",\n        content: RasterizerColorFS,\n    },\n    {\n        id: \"RasterizerGrayscale2ColorFS\",\n        content: RasterizerGrayscale2ColorFS,\n    },\n    {\n        id: \"RasterizerGrayscale2ColormapFS\",\n        content: RasterizerGrayscale2ColormapFS,\n    },\n];\n\nexport function loadShadersWebGL1() {\n    return shaders;\n}\n","/* Import all the shaders here*/ \n// Catalog shaders\nimport CatalogAitoffVS from '../core/src/shaders/webgl2/catalogs/aitoff.vert';\nimport CatalogMercatVS from '../core/src/shaders/webgl2/catalogs/mercator.vert';\nimport CatalogArcVS from '../core/src/shaders/webgl2/catalogs/arc.vert';\nimport CatalogTanVS from '../core/src/shaders/webgl2/catalogs/tan.vert';\nimport CatalogMollVS from '../core/src/shaders/webgl2/catalogs/mollweide.vert';\nimport CatalogOrthoVS from '../core/src/shaders/webgl2/catalogs/ortho.vert';\nimport CatalogOrthoFS from '../core/src/shaders/webgl2/catalogs/ortho.frag';\nimport CatalogFS from '../core/src/shaders/webgl2/catalogs/catalog.frag';\n\n// Colormap shaders\nimport ColormapCatalogVS from '../core/src/shaders/webgl2/colormaps/colormap.vert'\nimport ColormapCatalogFS from '../core/src/shaders/webgl2/colormaps/colormap.frag'\n\n// Grid shader\nimport GridVS from '../core/src/shaders/webgl2/grid/grid.vert'\nimport GridAitoffFS from '../core/src/shaders/webgl2/grid/aitoff.frag'\nimport GridMollFS from '../core/src/shaders/webgl2/grid/mollweide.frag'\nimport GridOrthoFS from '../core/src/shaders/webgl2/grid/ortho.frag'\nimport GridMercatorFS from '../core/src/shaders/webgl2/grid/mercator.frag'\nimport GridArcFS from '../core/src/shaders/webgl2/grid/arc.frag'\nimport GridTanFS from '../core/src/shaders/webgl2/grid/tan.frag'\nimport GridVS_CPU from '../core/src/shaders/webgl2/grid/grid_cpu.vert'\nimport GridFS_CPU from '../core/src/shaders/webgl2/grid/grid_cpu.frag'\n\n// HiPS shaders\n// Raytracer\nimport RayTracerVS from '../core/src/shaders/webgl2/hips/raytracer/raytracer.vert'\nimport RayTracerColorFS from '../core/src/shaders/webgl2/hips/raytracer/color.frag'\nimport RayTracerGrayscale2ColorFS from '../core/src/shaders/webgl2/hips/raytracer/grayscale_to_color.frag'\nimport RayTracerGrayscale2ColormapFS from '../core/src/shaders/webgl2/hips/raytracer/grayscale_to_colormap.frag'\nimport RayTracerGrayscale2ColorIntegerFS from '../core/src/shaders/webgl2/hips/raytracer/grayscale_to_color_i.frag'\nimport RayTracerGrayscale2ColormapIntegerFS from '../core/src/shaders/webgl2/hips/raytracer/grayscale_to_colormap_i.frag'\nimport RayTracerGrayscale2ColorUnsignedFS from '../core/src/shaders/webgl2/hips/raytracer/grayscale_to_color_u.frag'\nimport RayTracerGrayscale2ColormapUnsignedFS from '../core/src/shaders/webgl2/hips/raytracer/grayscale_to_colormap_u.frag'\n// Rasterizer\nimport RasterizerOrthoVS from '../core/src/shaders/webgl2/hips/rasterizer/ortho.vert'\nimport RasterizerMercatorVS from '../core/src/shaders/webgl2/hips/rasterizer/mercator.vert'\nimport RasterizerAitoffVS from '../core/src/shaders/webgl2/hips/rasterizer/aitoff.vert'\nimport RasterizerGnomonicVS from '../core/src/shaders/webgl2/hips/rasterizer/gnomonic.vert'\nimport RasterizerArcVS from '../core/src/shaders/webgl2/hips/rasterizer/arc.vert'\nimport RasterizerMollVS from '../core/src/shaders/webgl2/hips/rasterizer/mollweide.vert'\nimport RasterizerColorFS from '../core/src/shaders/webgl2/hips/rasterizer/color.frag'\nimport RasterizerGrayscale2ColorFS from '../core/src/shaders/webgl2/hips/rasterizer/grayscale_to_color.frag'\nimport RasterizerGrayscale2ColormapFS from '../core/src/shaders/webgl2/hips/rasterizer/grayscale_to_colormap.frag'\nimport RasterizerGrayscale2ColorIntegerFS from '../core/src/shaders/webgl2/hips/rasterizer/grayscale_to_color_i.frag'\nimport RasterizerGrayscale2ColormapIntegerFS from '../core/src/shaders/webgl2/hips/rasterizer/grayscale_to_colormap_i.frag'\nimport RasterizerGrayscale2ColorUnsignedFS from '../core/src/shaders/webgl2/hips/rasterizer/grayscale_to_color_u.frag'\nimport RasterizerGrayscale2ColormapUnsignedFS from '../core/src/shaders/webgl2/hips/rasterizer/grayscale_to_colormap_u.frag'\n\nlet shaders = [\n    // Catalog shaders\n    {\n        id: \"CatalogAitoffVS\",\n        content: CatalogAitoffVS,\n    },\n    {\n        id: \"CatalogMercatVS\",\n        content: CatalogMercatVS,\n    },\n    {\n        id: \"CatalogArcVS\",\n        content: CatalogArcVS,\n    },\n    {\n        id: \"CatalogTanVS\",\n        content: CatalogTanVS,\n    },\n    {\n        id: \"CatalogMollVS\",\n        content: CatalogMollVS,\n    },\n    {\n        id: \"CatalogOrthoVS\",\n        content: CatalogOrthoVS,\n    },\n    {\n        id: \"CatalogOrthoFS\",\n        content: CatalogOrthoFS,\n    },\n    {\n        id: \"CatalogFS\",\n        content: CatalogFS,    \n    },\n    // Colormap shaders\n    {\n        id: \"ColormapCatalogVS\",\n        content: ColormapCatalogVS,\n    },\n    {\n        id: \"ColormapCatalogFS\",\n        content: ColormapCatalogFS,\n    },\n    // Grid shader\n    {\n        id: \"GridVS\",\n        content: GridVS,\n    },\n    {\n        id: \"GridAitoffFS\",\n        content: GridAitoffFS,\n    },\n    {\n        id: \"GridMollFS\",\n        content: GridMollFS,\n    },\n    {\n        id: \"GridOrthoFS\",\n        content: GridOrthoFS,\n    },\n    {\n        id: \"GridMercatorFS\",\n        content: GridMercatorFS,\n    },\n    {\n        id: \"GridArcFS\",\n        content: GridArcFS,\n    },\n    {\n        id: \"GridTanFS\",\n        content: GridTanFS,\n    },\n    {\n        id: \"GridFS_CPU\",\n        content: GridFS_CPU,\n    },\n    {\n        id: \"GridVS_CPU\",\n        content: GridVS_CPU,\n    },\n    // HiPS shaders\n    // Raytracer\n    {\n        id: \"RayTracerVS\",\n        content: RayTracerVS,\n    },\n    {\n        id: \"RayTracerColorFS\",\n        content: RayTracerColorFS,\n    },\n    {\n        id: \"RayTracerGrayscale2ColorFS\",\n        content: RayTracerGrayscale2ColorFS,\n    },\n    {\n        id: \"RayTracerGrayscale2ColormapFS\",\n        content: RayTracerGrayscale2ColormapFS,\n    },\n    {\n        id: \"RayTracerGrayscale2ColorIntegerFS\",\n        content: RayTracerGrayscale2ColorIntegerFS,\n    },\n    {\n        id: \"RayTracerGrayscale2ColormapIntegerFS\",\n        content: RayTracerGrayscale2ColormapIntegerFS,\n    },\n    {\n        id: \"RayTracerGrayscale2ColorUnsignedFS\",\n        content: RayTracerGrayscale2ColorUnsignedFS,\n    },\n    {\n        id: \"RayTracerGrayscale2ColormapUnsignedFS\",\n        content: RayTracerGrayscale2ColormapUnsignedFS,\n    },\n    /// Rasterizer\n    {\n        id: \"RasterizerOrthoVS\",\n        content: RasterizerOrthoVS,\n    },\n    {\n        id: \"RasterizerMercatorVS\",\n        content: RasterizerMercatorVS,\n    },\n    {\n        id: \"RasterizerAitoffVS\",\n        content: RasterizerAitoffVS,\n    },\n    {\n        id: \"RasterizerArcVS\",\n        content: RasterizerArcVS,\n    },\n    {\n        id: \"RasterizerGnomonicVS\",\n        content: RasterizerGnomonicVS,\n    },\n    {\n        id: \"RasterizerMollVS\",\n        content: RasterizerMollVS,\n    },\n    {\n        id: \"RasterizerColorFS\",\n        content: RasterizerColorFS,\n    },\n    {\n        id: \"RasterizerGrayscale2ColorFS\",\n        content: RasterizerGrayscale2ColorFS,\n    },\n    {\n        id: \"RasterizerGrayscale2ColormapFS\",\n        content: RasterizerGrayscale2ColormapFS,\n    },\n    {\n        id: \"RasterizerGrayscale2ColorIntegerFS\",\n        content: RasterizerGrayscale2ColorIntegerFS,\n    },\n    {\n        id: \"RasterizerGrayscale2ColormapIntegerFS\",\n        content: RasterizerGrayscale2ColormapIntegerFS,\n    },\n    {\n        id: \"RasterizerGrayscale2ColorUnsignedFS\",\n        content: RasterizerGrayscale2ColorUnsignedFS,\n    },\n    {\n        id: \"RasterizerGrayscale2ColormapUnsignedFS\",\n        content: RasterizerGrayscale2ColormapUnsignedFS,\n    },\n];\n\nexport function loadShadersWebGL2() {\n    return shaders;\n}\n","export default __webpack_public_path__ + \"ccdb93d24585bd08a4261722b95e9e3d.png\";","export default __webpack_public_path__ + \"d51a99cc94312e8e9de793a5d67aa20e.png\";","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File ImageSurveyLayer\n * \n * Authors: Thomas Boch & Matthieu Baumann [CDS]\n * \n *****************************************************************************/\nimport { Utils } from \"./Utils.js\";\nimport { HpxImageSurvey } from \"./HpxImageSurvey.js\";\n\nexport let ImageSurveyLayer = (function() {\n    /** Constructor\n     * cooFrame and maxOrder can be set to null\n     * They will be determined by reading the properties file\n     *  \n     */\n    /** Constructor\n     *  \n     */\n    let ImageSurveyLayer = function(name) {\n        this.surveys = new Map();\n        this.name = name;\n    }\n\n    ImageSurveyLayer.prototype.addImageSurvey = async function(rootUrlOrId) {\n        const survey = await HpxImageSurvey.create(rootUrlOrId);\n        this.surveys.set(rootUrlOrId, survey);\n    };\n\n    ImageSurveyLayer.prototype.removeImageSurvey = function(rootUrlOrId) {\n        this.surveys.remove(rootUrlOrId);\n    };\n\n    ImageSurveyLayer.prototype.clear = function() {\n        this.surveys.clear();\n    };\n\n    ImageSurveyLayer.prototype.getSurveys = function() {\n        return this.surveys.values();\n    };\n\n    return ImageSurveyLayer;\n})();","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File View.js\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nimport { Aladin }   from \"./Aladin.js\";\nimport { Popup }          from \"./Popup.js\";\nimport { HealpixGrid }    from \"./HealpixGrid.js\";\nimport { HpxImageSurvey } from \"./HpxImageSurvey.js\";\nimport { ProjectionEnum } from \"./ProjectionEnum.js\";\nimport { Projection }     from \"./libs/astro/projection.js\";\nimport { Coo }            from \"./libs/astro/coo.js\";\nimport { AladinUtils }    from \"./AladinUtils.js\";\nimport { HealpixIndex }   from \"./libs/healpix.js\";\nimport { HealpixCache }   from \"./HealpixCache.js\";\nimport { SpatialVector }  from \"./libs/healpix.js\";\nimport { Utils }          from \"./Utils.js\";\nimport { SimbadPointer }  from \"./SimbadPointer.js\";\nimport { TileBuffer }     from \"./TileBuffer.js\";\nimport { Downloader }     from \"./Downloader.js\";\nimport { Stats }          from \"./libs/Stats.js\";\nimport { ColorMap } from \"./ColorMap.js\";\nimport { Footprint } from \"./Footprint.js\";\nimport { Circle } from \"./Circle.js\";\nimport { CooFrameEnum } from \"./CooFrameEnum.js\";\nimport { CooConversion } from \"./CooConversion.js\";\nimport { requestAnimFrame } from \"./libs/RequestAnimationFrame.js\";\n\nimport { loadShadersWebGL1 } from './ShadersWebGL1.js';\nimport { loadShadersWebGL2 } from './ShadersWebGL2.js';\n\n// Import kernel image\nimport kernel from '../core/img/kernel.png';\nimport colormaps from '../core/img/colormaps/colormaps.png';\n\nimport { ImageSurveyLayer } from \"./ImageSurveyLayer.js\";\n\nfunction checkForWebGL2Support() {\n    const gl = document.createElement('canvas').getContext('webgl2');\n    return gl;\n}\n\nexport let View = (function() {\n\n    /** Constructor */\n    function View (aladin, location, fovDiv, cooFrame, zoom) {\n            this.aladin = aladin;\n            // Add a reference to the WebGL API\n            //this.webglAPI = aladin.webglAPI;\n            this.options = aladin.options;\n            this.aladinDiv = this.aladin.aladinDiv;\n            this.popup = new Popup(this.aladinDiv, this);\n\n            this.createCanvases();\n            // Check whether a webgl2 context is available\n            //const webGL2Supported = checkForWebGL2Support();\n            const webGL2Supported = false;\n            this.webGL2Supported = webGL2Supported;\n            // Init the WebGL context\n            // At this point, the view has been created so the image canvas too\n            const shaders = webGL2Supported ? loadShadersWebGL2() : loadShadersWebGL1();\n        \n            let resources = {\n                'kernel': kernel,\n                'colormaps': colormaps,\n            };\n\n            try {\n                // Start our Rust application. You can find `WebClient` in `src/lib.rs`\n                // The Rust part should also create a new WebGL2 or WebGL1 context depending on the WebGL2 brower support.\n                this.aladin.webglAPI = new Aladin.wasmLibs.webgl.WebClient(this.aladinDiv.id, shaders, resources);\n            } catch(e) {\n                // For browsers not supporting WebGL2:\n                // 1. Print the original exception message in the console\n                console.log(e)\n                // 2. Add a more explicite message to the end user\n                alert(\"Problem initializing Aladin Lite. Please contact the support by contacting Matthieu Baumann (baumannmatthieu0@gmail.com) or Thomas Boch (thomas.boch@astro.unistra.fr). You can also open an issue on the Aladin Lite github repository here: https://github.com/cds-astro/aladin-lite\")\n            }\n\n            this.location = location;\n            this.fovDiv = fovDiv;\n            this.mustClearCatalog = true;\n            this.mustRedrawReticle = true;\n            this.imageSurveysToSet = [];\n            this.mode = View.PAN;\n            \n            this.minFOV = this.maxFOV = null; // by default, no restriction\n            this.fov_limit = 180.0;\n            \n            this.healpixGrid = new HealpixGrid(this.imageCanvas);\n\n            \n            var lon, lat;\n            lon = lat = 0;\n            \n            this.projectionMethod = ProjectionEnum.SIN;\n            this.projection = new Projection(lon, lat);\n            this.projection.setProjection(this.projectionMethod);\n            //this.zoomLevel = 0;\n            // Prev time of the last frame\n            this.prev = 0;\n            //this.zoomFactor = this.computeZoomFactor(this.zoomLevel);\n            this.zoomFactor = this.aladin.webglAPI.getClipZoomFactor();\n    \n            this.viewCenter = {lon: lon, lat: lat}; // position of center of view\n\n            if (cooFrame) {\n                this.cooFrame = cooFrame;\n            } else {\n                this.cooFrame = CooFrameEnum.GAL;\n            }\n            if (cooFrame.system === CooFrameEnum.SYSTEMS.GAL) {\n                console.log()\n                const GAL = Aladin.wasmLibs.webgl.GALCooSys();\n                this.aladin.webglAPI.setCooSystem(GAL);\n            } else {\n                const ICRSJ2000 = Aladin.wasmLibs.webgl.ICRSJ2000CooSys();\n                this.aladin.webglAPI.setCooSystem(ICRSJ2000);\n            }\n\n            if (zoom) {\n                this.setZoom(zoom);\n            }\n            \n            // current reference image survey displayed\n            this.imageSurveys = new Map();\n            // current catalogs displayed\n            this.catalogs = [];\n            // a dedicated catalog for the popup\n            var c = document.createElement('canvas');\n            c.width = c.height = 24;\n            var ctx= c.getContext('2d');\n            ctx.lineWidth = 6.0;\n            ctx.beginPath();\n            ctx.strokeStyle = '#eee';\n            ctx.arc(12, 12, 8, 0, 2*Math.PI, true);\n            ctx.stroke();\n            ctx.lineWidth = 3.0;\n            ctx.beginPath();\n            ctx.strokeStyle = '#c38';\n            ctx.arc(12, 12, 8, 0, 2*Math.PI, true);\n            ctx.stroke();\n            this.catalogForPopup = A.catalog({shape: c, sourceSize: 24});\n            //this.catalogForPopup = A.catalog({sourceSize: 18, shape: 'circle', color: '#c38'});\n            this.catalogForPopup.hide();\n            this.catalogForPopup.setView(this);\n            // overlays (footprints for instance)\n            this.overlays = [];\n            // MOCs\n            this.mocs = [];\n            // reference to all overlay layers (= catalogs + overlays + mocs)\n            this.allOverlayLayers = []\n            \n    \n            \n            this.tileBuffer = new TileBuffer(); // tile buffer is shared across different image surveys\n            this.fixLayoutDimensions();\n            \n            this.firstHiPS = true;\n            this.curNorder = 1;\n            this.realNorder = 1;\n            this.curOverlayNorder = 1;\n            \n            // some variables for mouse handling\n            this.dragging = false;\n            this.dragx = null;\n            this.dragy = null;\n            this.needRedraw = true;\n\n            // zoom pinching\n            this.pinchZoomParameters = {\n                isPinching: false, // true if a pinch zoom is ongoing\n                initialFov: undefined,\n                initialDistance: undefined\n            };\n\n            // two-fingers rotation\n            this.fingersRotationParameters = {\n                initialViewAngleFromCenter: undefined,\n                initialFingerAngle: undefined,\n                rotationInitiated: false\n            }\n    \n            this.downloader = new Downloader(this); // the downloader object is shared across all HpxImageSurveys\n            this.flagForceRedraw = false;\n    \n            this.fadingLatestUpdate = null;\n            \n            this.dateRequestRedraw = null;\n            \n            this.showGrid = false; // coordinates grid\n            \n            init(this);\n            \n\n            // listen to window resize and reshape canvases\n            this.resizeTimer = null;\n            var self = this;\n            $(window).resize(function() {\n                clearTimeout(self.resizeTimer);\n                self.resizeTimer = setTimeout(function() {self.fixLayoutDimensions(self)}, 100);\n            });\n\n\n            // in some contexts (Jupyter notebook for instance), the parent div changes little time after Aladin Lite creation\n            // this results in canvas dimension to be incorrect.\n            // The following line tries to fix this issue\n            setTimeout(function() {\n                var computedWidth = $(self.aladinDiv).width();\n                var computedHeight = $(self.aladinDiv).height();\n\n                if (self.width!==computedWidth || self.height===computedHeight) {\n                    self.fixLayoutDimensions();\n                    // As the WebGL backend has been resized correctly by\n                    // the previous call, we can get the zoom factor from it\n                    \n                    self.updateZoomState(); // needed to force recomputation of displayed FoV\n                }\n           }, 1000);\n\n        };\n    \n    // different available modes\n    View.PAN = 0;\n    View.SELECT = 1;\n    View.TOOL_SIMBAD_POINTER = 2;\n        \n    \n    // TODO: should be put as an option at layer level    \n    View.DRAW_SOURCES_WHILE_DRAGGING = true;\n    View.DRAW_MOCS_WHILE_DRAGGING = true;\n\n    View.CALLBACKS_THROTTLE_TIME_MS = 100; // minimum time between two consecutive callback calls\n\n    \n    // (re)create needed canvases\n    View.prototype.createCanvases = function() {\n        var a = $(this.aladinDiv);\n\n\n        //a.find('.aladin-webglCanvas').remove();\n        a.find('.aladin-imageCanvas').remove();\n        a.find('.aladin-catalogCanvas').remove();\n        a.find('.aladin-reticleCanvas').remove();\n        a.find('.aladin-gridCanvas').remove();\n\n        // canvas to draw the images\n        //this.webglCanvas = $(\"<canvas class='aladin-webglCanvas'></canvas>\").appendTo(this.aladinDiv)[0];\n        // canvas to draw the overlays\n                // canvas to draw the gui\n                //this.guiCanvas = $(\"<canvas id='aladin-guiCanvas' style={width: 200px}≈></canvas>\").appendTo(this.aladinDiv)[0];\n        this.imageCanvas = $(\"<canvas class='aladin-imageCanvas'></canvas>\").appendTo(this.aladinDiv)[0];\n        // canvas to draw the grid\n        this.gridCanvas = $(\"<canvas class='aladin-gridCanvas'></canvas>\").appendTo(this.aladinDiv)[0];\n        // canvas to draw the catalogs\n        this.catalogCanvas = $(\"<canvas class='aladin-catalogCanvas'></canvas>\").appendTo(this.aladinDiv)[0];\n        // canvas to draw the reticle\n        this.reticleCanvas = $(\"<canvas class='aladin-reticleCanvas'></canvas>\").appendTo(this.aladinDiv)[0];\n    };\n    \n    // called at startup and when window is resized\n    // The WebGL backend is resized\n    View.prototype.fixLayoutDimensions = function() {\n        Utils.cssScale = undefined;\n        \n        var computedWidth = $(this.aladinDiv).width();\n        var computedHeight = $(this.aladinDiv).height();\n\n        this.width = Math.max(computedWidth, 1);\n        this.height = Math.max(computedHeight, 1); // this prevents many problems when div size is equal to 0\n        \n        \n        this.cx = this.width/2;\n        this.cy = this.height/2;\n        \n        this.largestDim = Math.max(this.width, this.height);\n        this.smallestDim = Math.min(this.width, this.height);\n        this.ratio = this.largestDim/this.smallestDim;\n\n        \n        this.mouseMoveIncrement = 160/this.largestDim;\n\n        // reinitialize 2D context\n        this.imageCtx = this.imageCanvas.getContext(this.webGL2Supported ? \"webgl2\" : \"webgl\");\n        this.aladin.webglAPI.resize(this.width, this.height);\n        \n        this.catalogCtx = this.catalogCanvas.getContext(\"2d\");\n        this.reticleCtx = this.reticleCanvas.getContext(\"2d\");\n        this.gridCtx = this.gridCanvas.getContext(\"2d\");\n        //this.guiCtx = this.guiCanvas.getContext(\"webgl2\");\n\n        //this.imageCtx.canvas.width = this.width;\n        this.catalogCtx.canvas.width = this.width;\n        this.reticleCtx.canvas.width = this.width;\n        this.gridCtx.canvas.width = this.width;\n        \n        //this.imageCtx.canvas.height = this.height;\n        this.catalogCtx.canvas.height = this.height;\n        this.reticleCtx.canvas.height = this.height;\n        this.gridCtx.canvas.height = this.height;\n\n        pixelateCanvasContext(this.imageCtx, this.aladin.options.pixelateCanvas);\n\n        // change logo\n        if (!this.logoDiv) {\n            this.logoDiv = $(this.aladinDiv).find('.aladin-logo')[0];\n        }\n        if (this.width>800) {\n            $(this.logoDiv).removeClass('aladin-logo-small');\n            $(this.logoDiv).addClass('aladin-logo-large');\n            $(this.logoDiv).css('width', '90px');\n        }\n        else {\n            $(this.logoDiv).addClass('aladin-logo-small');\n            $(this.logoDiv).removeClass('aladin-logo-large');\n            $(this.logoDiv).css('width', '32px');\n        }\n\n        \n        this.computeNorder();\n        //this.requestRedraw();\n    };\n\n    var pixelateCanvasContext = function(ctx, pixelateFlag) {\n        var enableSmoothing = ! pixelateFlag;\n        ctx.imageSmoothingEnabled = enableSmoothing;\n        ctx.webkitImageSmoothingEnabled = enableSmoothing;\n        ctx.mozImageSmoothingEnabled = enableSmoothing;\n        ctx.msImageSmoothingEnabled = enableSmoothing;\n        ctx.oImageSmoothingEnabled = enableSmoothing;\n    }\n    \n\n    View.prototype.setMode = function(mode) {\n        this.mode = mode;\n        if (this.mode==View.SELECT) {\n            this.setCursor('crosshair');\n        }\n        else if (this.mode==View.TOOL_SIMBAD_POINTER) {\n            this.popup.hide();\n            this.reticleCanvas.style.cursor = '';\n            $(this.reticleCanvas).addClass('aladin-sp-cursor');\n        }\n        else {\n            this.setCursor('default');\n        }\n    };\n    \n    View.prototype.setCursor = function(cursor) {\n        if (this.reticleCanvas.style.cursor==cursor) {\n            return;\n        }\n        if (this.mode==View.TOOL_SIMBAD_POINTER) {\n            return;\n        }\n        this.reticleCanvas.style.cursor = cursor;\n    };\n\n    \n    \n    /**\n     * return dataURL string corresponding to the current view\n     */\n    View.prototype.getCanvasDataURL = function(imgType, width, height) {\n        imgType = imgType || \"image/png\"; \n        var c = document.createElement('canvas');\n        width = width || this.width;\n        height = height || this.height;\n        c.width = width;\n        c.height = height;\n        var ctx = c.getContext('2d');\n\n        //ctx.drawImage(this.imageCanvas, 0, 0, c.width, c.height);\n        const canvas = this.aladin.webglAPI.canvas();\n        ctx.drawImage(canvas, 0, 0, c.width, c.height);\n        ctx.drawImage(this.catalogCanvas, 0, 0, c.width, c.height);\n        ctx.drawImage(this.reticleCanvas, 0, 0, c.width, c.height);\n        ctx.drawImage(this.gridCanvas, 0, 0, c.width, c.height);\n\n        return c.toDataURL(imgType);\n        //return c.toDataURL(\"image/jpeg\", 0.01); // setting quality only works for JPEG (?)\n    };\n\n\n    /**\n     * Compute the FoV in degrees of the view and update mouseMoveIncrement\n     * \n     * @param view\n     * @returns FoV (array of 2 elements : width and height) in degrees\n     */\n/*   function computeFov(view) {\n        var fov = doComputeFov(view, view.zoomFactor);\n        \n        \n        view.mouseMoveIncrement = fov/view.imageCanvas.width;\n            \n        return fov;\n    }\n\n    function doComputeFov(view, zoomFactor) {\n        // if zoom factor < 1, we view 180°\n        var fov;\n        if (view.zoomFactor<1) {\n            fov = 180.0;\n            //fov = 360;\n        }\n        else {\n            // TODO : fov sur les 2 dimensions !!\n            // to compute FoV, we first retrieve 2 points at coordinates (0, view.cy) and (width-1, view.cy)\n            var xy1 = AladinUtils.viewToXy(0, view.cy, view.width, view.height, view.largestDim, zoomFactor);\n            var lonlat1 = view.projection.unproject(xy1.x, xy1.y);\n            \n            var xy2 = AladinUtils.viewToXy(view.imageCanvas.width-1, view.cy, view.width, view.height, view.largestDim, zoomFactor);\n            var lonlat2 = view.projection.unproject(xy2.x, xy2.y);\n            \n            \n            fov = new Coo(lonlat1.ra, lonlat1.dec).distance(new Coo(lonlat2.ra, lonlat2.dec));\n        }\n\n        fov = Math.min(180.0, fov);\n        \n        return fov;\n    }\n    */\n    function updateFovDiv(view) {\n        if (isNaN(view.fov)) {\n            view.fovDiv.html(\"FoV:\");\n            return;\n        }\n        // update FoV value\n        var fovStr;\n        if (view.fov>1) {\n            fovStr = Math.round(view.fov*100)/100 + \"°\";\n        }\n        else if (view.fov*60>1) {\n            fovStr = Math.round(view.fov*60*100)/100 + \"'\";\n        }\n        else {\n            fovStr = Math.round(view.fov*3600*100)/100 + '\"';\n        }\n        view.fovDiv.html(\"FoV: \" + fovStr);\n    }\n    \n    \n    var createListeners = function(view) {\n        var hasTouchEvents = false;\n        if ('ontouchstart' in window) {\n            hasTouchEvents = true;\n        }\n        \n        // various listeners\n        let onDblClick = function(e) {\n            var xymouse = view.imageCanvas.relMouseCoords(e);\n            if(view.aladin.webglAPI.posOnUi()) {\n                return;\n            }\n            try {\n                var lonlat = view.aladin.webglAPI.screenToWorld(xymouse.x, xymouse.y);\n            }\n            catch(err) {\n                return;\n            }\n            var radec;\n            /*if (view.aladin.webglAPI.cooSystem() === Aladin.wasmLibs.webgl.GALCooSys()) {\n                radec = view.aladin.webglAPI.Gal2J2000(lonlat[0], lonlat[1]);\n            } else {*/\n                radec = lonlat;\n            //}\n            //var radec = view.aladin.webglAPI.;\n            // convert to J2000 if needed\n            /*if (view.cooFrame.system==CooFrameEnum.SYSTEMS.GAL) {\n                radec = CooConversion.GalacticToJ2000([lonlat.ra, lonlat.dec]);\n            }\n            else {\n                radec = lonlat;\n            }*/\n            \n            view.pointTo(radec[0], radec[1], {forceAnimation: true});\n        };\n        if (! hasTouchEvents) {\n            $(view.reticleCanvas).dblclick(onDblClick);\n        }\n        \n        $(view.reticleCanvas).bind(\"mousedown touchstart\", function(e) {\n            var xymouse = view.imageCanvas.relMouseCoords(e);\n            if(view.aladin.webglAPI.posOnUi()) {\n                return;\n            }\n            // zoom pinching\n            if (e.type==='touchstart' && e.originalEvent && e.originalEvent.targetTouches && e.originalEvent.targetTouches.length==2) {\n                view.dragging = false;\n\n                view.pinchZoomParameters.isPinching = true;\n                //var fov = view.aladin.getFov();\n                //view.pinchZoomParameters.initialFov = Math.max(fov[0], fov[1]);\n                var fov = view.aladin.webglAPI.getFieldOfView();\n                view.pinchZoomParameters.initialFov = fov;\n                view.pinchZoomParameters.initialDistance = Math.sqrt(Math.pow(e.originalEvent.targetTouches[0].clientX - e.originalEvent.targetTouches[1].clientX, 2) + Math.pow(e.originalEvent.targetTouches[0].clientY - e.originalEvent.targetTouches[1].clientY, 2));\n\n                view.fingersRotationParameters.initialViewAngleFromCenter = view.aladin.webglAPI.getRotationAroundCenter();\n                view.fingersRotationParameters.initialFingerAngle = Math.atan2(e.originalEvent.targetTouches[1].clientY - e.originalEvent.targetTouches[0].clientY, e.originalEvent.targetTouches[1].clientX - e.originalEvent.targetTouches[0].clientX) * 180.0 / Math.PI;\n\n                return;\n            }\n\n            var xymouse = view.imageCanvas.relMouseCoords(e);\n            if (e.originalEvent && e.originalEvent.targetTouches) {\n                view.dragx = e.originalEvent.targetTouches[0].clientX;\n                view.dragy = e.originalEvent.targetTouches[0].clientY;\n            }\n            else {\n                /*\n                view.dragx = e.clientX;\n                view.dragy = e.clientY;\n                */\n                view.dragx = xymouse.x;\n                view.dragy = xymouse.y;\n            }\n\n\n            view.dragging = true;\n            if (view.mode==View.PAN) {\n                view.setCursor('move');\n            }\n            else if (view.mode==View.SELECT) {\n                view.selectStartCoo = {x: view.dragx, y: view.dragy};\n            }\n            view.aladin.webglAPI.pressLeftMouseButton(view.dragx, view.dragy);\n            return false; // to disable text selection\n        });\n\n        //$(view.reticleCanvas).bind(\"mouseup mouseout touchend\", function(e) {\n        $(view.reticleCanvas).bind(\"click mouseout touchend\", function(e) { // reacting on 'click' rather on 'mouseup' is more reliable when panning the view\n            var xymouse = view.imageCanvas.relMouseCoords(e);\n            if (e.type==='touchend' && view.pinchZoomParameters.isPinching) {\n                view.pinchZoomParameters.isPinching = false;\n                view.pinchZoomParameters.initialFov = view.pinchZoomParameters.initialDistance = undefined;\n    \n                return;\n            }\n            if (e.type==='touchend' && view.fingersRotationParameters.rotationInitiated) {\n                view.fingersRotationParameters.initialViewAngleFromCenter = undefined;\n                view.fingersRotationParameters.initialFingerAngle = undefined;\n                view.fingersRotationParameters.rotationInitiated = false;\n    \n                return;\n            }\n\n\n            var wasDragging = view.realDragging === true;\n            var selectionHasEnded = view.mode===View.SELECT && view.dragging;\n\n            if (view.dragging) { // if we were dragging, reset to default cursor\n                view.setCursor('default');\n                view.dragging = false;\n\n                if (wasDragging) {\n                    view.realDragging = false;\n                \n                    // call positionChanged one last time after dragging, with dragging: false\n                    var posChangedFn = view.aladin.callbacksByEventName['positionChanged'];\n                    if (typeof posChangedFn === 'function') {\n                        var pos = view.aladin.pix2world(view.width/2, view.height/2);\n                        if (pos !== undefined) {\n                            posChangedFn({ra: pos[0], dec: pos[1], dragging: false});\n                        }\n                    }\n                }\n            } // end of \"if (view.dragging) ... \"\n\n            if (selectionHasEnded) {\n                view.aladin.fire('selectend', \n                                 view.getObjectsInBBox(view.selectStartCoo.x, view.selectStartCoo.y,\n                                                       view.dragx-view.selectStartCoo.x, view.dragy-view.selectStartCoo.y));    \n\n                view.mustRedrawReticle = true; // pour effacer selection bounding box\n                view.requestRedraw();\n\n                return;\n            }\n\n\n\n            view.mustClearCatalog = true;\n            view.mustRedrawReticle = true; // pour effacer selection bounding box\n            view.dragx = view.dragy = null;\n\n\n\n            if (e.type===\"mouseout\" || e.type===\"touchend\") {\n                view.requestRedraw(true);\n                updateLocation(view, view.width/2, view.height/2, true);\n\n\n                if (e.type===\"mouseout\") {\n                    if (view.mode===View.TOOL_SIMBAD_POINTER) {\n                        view.setMode(View.PAN);\n                    }\n\n                    return;\n                }\n            }\n\n\n            if (view.mode==View.TOOL_SIMBAD_POINTER) {\n                var radec = view.aladin.pix2world(xymouse.x, xymouse.y);\n\n                view.setMode(View.PAN);\n                view.setCursor('wait');\n\n                SimbadPointer.query(radec[0], radec[1], Math.min(1, 15 * view.fov / view.largestDim), view.aladin);\n\n                return; // when in TOOL_SIMBAD_POINTER mode, we do not call the listeners\n            }\n\n            // popup to show ?\n            var objs = view.closestObjects(xymouse.x, xymouse.y, 5);\n            if (! wasDragging && objs) {\n                var o = objs[0];\n\n                // footprint selection code adapted from Fabrizio Giordano dev. from Serco for ESA/ESDC\n                if (o instanceof Footprint || o instanceof Circle) {\n                    o.dispatchClickEvent();\n                }\n\n                // display marker\n                else if (o.marker) {\n                    // could be factorized in Source.actionClicked\n                    view.popup.setTitle(o.popupTitle);\n                    view.popup.setText(o.popupDesc);\n                    view.popup.setSource(o);\n                    view.popup.show();\n                }\n                // show measurements\n                else {\n                    if (view.lastClickedObject) {\n                        view.lastClickedObject.actionOtherObjectClicked && view.lastClickedObject.actionOtherObjectClicked();\n                    }\n                    o.actionClicked();\n                }\n                view.lastClickedObject = o;\n                var objClickedFunction = view.aladin.callbacksByEventName['objectClicked'];\n                (typeof objClickedFunction === 'function') && objClickedFunction(o);\n            }\n            else {\n                if (view.lastClickedObject && ! wasDragging) {\n                    view.aladin.measurementTable.hide();\n                    view.popup.hide();\n\n                    if (view.lastClickedObject instanceof Footprint) {\n                        //view.lastClickedObject.deselect();\n                    }\n                    else {\n                        view.lastClickedObject.actionOtherObjectClicked();\n                    }\n\n                    view.lastClickedObject = null;\n                    var objClickedFunction = view.aladin.callbacksByEventName['objectClicked'];\n                    (typeof objClickedFunction === 'function') && objClickedFunction(null);\n                }\n            }\n\n            // call listener of 'click' event\n            var onClickFunction = view.aladin.callbacksByEventName['click'];\n            if (typeof onClickFunction === 'function') {\n                var pos = view.aladin.pix2world(xymouse.x, xymouse.y);\n                if (pos !== undefined) {\n                    onClickFunction({ra: pos[0], dec: pos[1], x: xymouse.x, y: xymouse.y, isDragging: wasDragging});\n                }\n            }\n\n\n            // TODO : remplacer par mecanisme de listeners\n            // on avertit les catalogues progressifs\n            view.refreshProgressiveCats();\n\n            view.requestRedraw(true);\n            view.aladin.webglAPI.releaseLeftButtonMouse();\n        });\n        var lastHoveredObject; // save last object hovered by mouse\n        var lastMouseMovePos = null;\n        let p = null;\n        $(view.reticleCanvas).bind(\"mousemove touchmove\", function(e) {\n            e.preventDefault();\n            var xymouse = view.imageCanvas.relMouseCoords(e);\n            p = xymouse;\n            if(view.aladin.webglAPI.posOnUi()) {\n\n                return;\n            }\n\n            if (e.type==='touchmove' && view.pinchZoomParameters.isPinching && e.originalEvent && e.originalEvent.touches && e.originalEvent.touches.length==2) {\n\n                // rotation\n                var currentFingerAngle = Math.atan2(e.originalEvent.targetTouches[1].clientY - e.originalEvent.targetTouches[0].clientY, e.originalEvent.targetTouches[1].clientX - e.originalEvent.targetTouches[0].clientX) * 180.0 / Math.PI;\n                var fingerAngleDiff = view.fingersRotationParameters.initialFingerAngle - currentFingerAngle;\n                // rotation is initiated when angle is equal or greater than 7 degrees\n                if (! view.fingersRotationParameters.rotationInitiated && Math.abs(fingerAngleDiff)>=7) {\n                    view.fingersRotationParameters.rotationInitiated = true;\n                    view.fingersRotationParameters.initialFingerAngle = currentFingerAngle;\n                    fingerAngleDiff = 0;\n                }\n                if (view.fingersRotationParameters.rotationInitiated) {\n                    view.aladin.webglAPI.setRotationAroundCenter(fingerAngleDiff + view.fingersRotationParameters.initialViewAngleFromCenter);\n                }\n\n                // zoom\n                var dist = Math.sqrt(Math.pow(e.originalEvent.touches[0].clientX - e.originalEvent.touches[1].clientX, 2) + Math.pow(e.originalEvent.touches[0].clientY - e.originalEvent.touches[1].clientY, 2));\n                view.setZoom(view.pinchZoomParameters.initialFov * view.pinchZoomParameters.initialDistance / dist);\n\n                return;\n            }\n\n\n\n            if (!view.dragging || hasTouchEvents) {\n                // update location box\n                updateLocation(view, xymouse.x, xymouse.y);\n                // call listener of 'mouseMove' event\n                var onMouseMoveFunction = view.aladin.callbacksByEventName['mouseMove'];\n                if (typeof onMouseMoveFunction === 'function') {\n                    var pos = view.aladin.pix2world(xymouse.x, xymouse.y);\n                    if (pos !== undefined) {\n                        onMouseMoveFunction({ra: pos[0], dec: pos[1], x: xymouse.x, y: xymouse.y});\n                    }\n                    // send null ra and dec when we go out of the \"sky\"\n                    else if (lastMouseMovePos != null) {\n                        onMouseMoveFunction({ra: null, dec: null, x: xymouse.x, y: xymouse.y});\n                    }\n                    lastMouseMovePos = pos;\n                }\n\n\n                if (!view.dragging && ! view.mode==View.SELECT) {\n                    // objects under the mouse ?\n                    var closest = view.closestObjects(xymouse.x, xymouse.y, 5);\n                    if (closest) {\n                        view.setCursor('pointer');\n                        var objHoveredFunction = view.aladin.callbacksByEventName['objectHovered'];\n                        if (typeof objHoveredFunction === 'function' && closest[0]!=lastHoveredObject) {\n                            var ret = objHoveredFunction(closest[0]);\n                        }\n                        lastHoveredObject = closest[0];\n        \n                    }\n                    else {\n                        view.setCursor('default');\n                        var objHoveredFunction = view.aladin.callbacksByEventName['objectHovered'];\n                        if (typeof objHoveredFunction === 'function' && lastHoveredObject) {\n                            lastHoveredObject = null;\n                            // call callback function to notify we left the hovered object\n                            var ret = objHoveredFunction(null);\n                        }\n                    }\n                }\n                if (!hasTouchEvents) {\n                    return;\n                }\n            }\n\n            if (! view.dragging) {\n                return;\n            }\n\n            //var xoffset, yoffset;\n            var s1, s2;\n            if (e.originalEvent && e.originalEvent.targetTouches) {\n                /*xoffset = e.originalEvent.targetTouches[0].clientX-view.dragx;\n                yoffset = e.originalEvent.targetTouches[0].clientY-view.dragy;\n                var xy1 = AladinUtils.viewToXy(e.originalEvent.targetTouches[0].clientX, e.originalEvent.targetTouches[0].clientY, view.width, view.height, view.largestDim, view.zoomFactor);\n                var xy2 = AladinUtils.viewToXy(view.dragx, view.dragy, view.width, view.height, view.largestDim, view.zoomFactor);\n\n                pos1 = view.projection.unproject(xy1.x, xy1.y);\n                pos2 = view.projection.unproject(xy2.x, xy2.y);*/\n                s1 = {x: view.dragx, y: view.dragy};\n                s2 = {x: e.originalEvent.targetTouches[0].clientX, y: e.originalEvent.targetTouches[0].clientY};\n            }\n            else {\n                /*\n                xoffset = e.clientX-view.dragx;\n                yoffset = e.clientY-view.dragy;\n\n                xoffset = xymouse.x-view.dragx;\n                yoffset = xymouse.y-view.dragy;\n                var xy1 = AladinUtils.viewToXy(xymouse.x, xymouse.y, view.width, view.height, view.largestDim, view.zoomFactor);\n                var xy2 = AladinUtils.viewToXy(view.dragx, view.dragy, view.width, view.height, view.largestDim, view.zoomFactor);\n                */\n                //pos1 = view.projection.unproject(xy1.x, xy1.y);\n                //pos2 = view.projection.unproject(xy2.x, xy2.y);\n                //console.log(view.dragx, view.dragy)\n                //console.log(xymouse)\n\n                /*pos1 = webglAPI.screenToWorld(view.dragx, view.dragy);\n                pos2 = webglAPI.screenToWorld(xymouse.x, xymouse.y);\n\n                if (pos2 == undefined)  {\n                    return;\n                }*/\n                s1 = {x: view.dragx, y: view.dragy};\n                s2 = {x: xymouse.x, y: xymouse.y};\n            }\n\n\n            \n            // TODO : faut il faire ce test ??\n//            var distSquared = xoffset*xoffset+yoffset*yoffset;\n//            if (distSquared<3) {\n//                return;\n//            }\n            if (e.originalEvent && e.originalEvent.targetTouches) {\n                view.dragx = e.originalEvent.targetTouches[0].clientX;\n                view.dragy = e.originalEvent.targetTouches[0].clientY;\n            }\n            else {\n                view.dragx = xymouse.x;\n                view.dragy = xymouse.y;\n                /*\n                view.dragx = e.clientX;\n                view.dragy = e.clientY;\n                */\n            }\n            \n            if (view.mode==View.SELECT) {\n                  view.requestRedraw();\n                  return;\n            }\n\n            //view.viewCenter.lon += xoffset*view.mouseMoveIncrement/Math.cos(view.viewCenter.lat*Math.PI/180.0);\n            /*\n            view.viewCenter.lon += xoffset*view.mouseMoveIncrement;\n            view.viewCenter.lat += yoffset*view.mouseMoveIncrement;\n            */\n            \n            //view.viewCenter.lon = pos2.ra -  pos1.ra;\n            //view.viewCenter.lat = pos2.dec - pos1.dec;\n            //view.viewCenter.lon = pos2.ra;\n            //view.viewCenter.lon = pos2.ra;\n\n            \n            // can not go beyond poles\n            if (view.viewCenter.lat>90) {\n                view.viewCenter.lat = 90;\n            }\n            else if (view.viewCenter.lat < -90) {\n                view.viewCenter.lat = -90;\n            }\n            \n            // limit lon to [0, 360]\n            if (view.viewCenter.lon < 0) {\n                view.viewCenter.lon = 360 + view.viewCenter.lon;\n            }\n            else if (view.viewCenter.lon > 360) {\n                view.viewCenter.lon = view.viewCenter.lon % 360;\n            }\n            view.realDragging = true;\n\n            //webglAPI.goFromTo(pos1[0], pos1[1], pos2[0], pos2[1]);\n            view.aladin.webglAPI.goFromTo(s1.x, s1.y, s2.x, s2.y);\n            //webglAPI.setCenter(pos2[0], pos2[1]);\n            let viewCenter = view.aladin.webglAPI.getCenter();\n            view.viewCenter.lon = viewCenter[0];\n            view.viewCenter.lat = viewCenter[1];\n\n\n            //console.log(view.viewCenter);\n\n            view.requestRedraw();\n        }); //// endof mousemove ////\n        \n        // disable text selection on IE\n        $(view.aladinDiv).onselectstart = function () { return false; }\n\n        $(view.reticleCanvas).on('wheel', function(event) {            \n            event.preventDefault();\n            event.stopPropagation();\n            //var xymouse = view.imageCanvas.relMouseCoords(event);\n\n            if(view.aladin.webglAPI.posOnUi()) {\n                return;\n            }\n            //var xymouse = view.imageCanvas.relMouseCoords(event);\n            //var level = view.zoomLevel;\n\n            var delta = event.deltaY;\n            // this seems to happen in context of Jupyter notebook --> we have to invert the direction of scroll\n            // hope this won't trigger some side effects ...\n            if (event.hasOwnProperty('originalEvent')) {\n                delta = -event.originalEvent.deltaY;\n            } \n            /*if (delta>0) {\n                level += 1;\n                //zoom\n            }\n            else {\n                level -= 1;\n                //unzoom\n            }*/\n            // The value of the field of view is determined\n            // inside the backend\n            view.aladin.webglAPI.registerWheelEvent(delta);\n            view.updateZoomState();\n\n            if (! view.debounceProgCatOnZoom) {\n                var self = view;\n                view.debounceProgCatOnZoom = Utils.debounce(function() {self.refreshProgressiveCats();}, 300);\n            }\n            view.debounceProgCatOnZoom();\n            //view.setZoomLevel(level);\n            //view.refreshProgressiveCats();\n            return false;\n        });\n\n    };\n    \n    var init = function(view) {\n        var stats = new Stats();\n        stats.domElement.style.top = '50px';\n        if ($('#aladin-statsDiv').length>0) {\n            $('#aladin-statsDiv')[0].appendChild( stats.domElement );\n        }\n        \n        view.stats = stats;\n\n        createListeners(view);\n\n        view.executeCallbacksThrottled = Utils.throttle(\n            function() {\n                var pos = view.aladin.pix2world(view.width/2, view.height/2);\n                var fov = view.fov;\n                if (pos===undefined || fov===undefined) {\n                    return;\n                }\n\n                var ra = pos[0];\n                var dec = pos[1];\n                // trigger callback only if position has changed !\n                if (ra!==this.ra || dec!==this.dec) {\n                    var posChangedFn = view.aladin.callbacksByEventName['positionChanged'];\n                    (typeof posChangedFn === 'function') && posChangedFn({ra: ra, dec: dec, dragging: true});\n    \n                    // finally, save ra and dec value\n                    this.ra = ra;\n                    this.dec = dec;\n                }\n\n                // trigger callback only if FoV (zoom) has changed !\n                if (fov!==this.old_fov) {\n                    var fovChangedFn = view.aladin.callbacksByEventName['zoomChanged'];\n                    (typeof fovChangedFn === 'function') && fovChangedFn(fov);\n    \n                    // finally, save fov value\n                    this.old_fov = fov;\n                }\n\n            },\n            View.CALLBACKS_THROTTLE_TIME_MS);\n\n\n        view.displayHpxGrid = false;\n        view.displaySurvey = true;\n        view.displayCatalog = false;\n        view.displayReticle = true;\n\n        // initial draw\n        //view.fov = computeFov(view);\n        //updateFovDiv(view);\n        //view.redraw();\n    };\n\n    function updateLocation(view, x, y, isViewCenterPosition) {\n        if (!view.projection) {\n            return;\n        }\n        //var xy = AladinUtils.viewToXy(x, y, view.width, view.height, view.largestDim, view.zoomFactor);\n\n        var lonlat;\n        try {\n            lonlat = view.aladin.webglAPI.screenToWorld(x, y);\n        } catch(err) {\n        }\n        \n        if (lonlat) {\n            // Convert it to galactic\n            if (view.aladin.webglAPI.cooSystem() === Aladin.wasmLibs.webgl.GALCooSys()) {\n                lonlat = view.aladin.webglAPI.J20002Gal(lonlat[0], lonlat[1]);\n            }\n\n            //console.log(view.aladin.webglAPI.readPixel(x, y, 'base'));\n            view.location.update(lonlat[0], lonlat[1], view.cooFrame, isViewCenterPosition);\n        }\n    }\n    \n    View.prototype.requestRedrawAtDate = function(date) {\n        this.dateRequestDraw = date;\n    };\n\n    /**\n     * Return the color of the lowest intensity pixel \n     * in teh current color map of the current background image HiPS\n     */\n    View.prototype.getBackgroundColor = function() {\n        var white = 'rgb(255, 255, 255)';\n        var black = 'rgb(0, 0, 0)';\n\n        if (! this.imageSurvey) {\n            return black;\n        }\n\n        var cm = this.imageSurvey.getColorMap();\n        if (!cm) {\n            return black;\n        }\n        if (cm.mapName == 'native' || cm.mapName == 'grayscale') {\n            return cm.reversed ? white : black;\n        }\n\n        var idx = cm.reversed ? 255 : 0;\n        var r = ColorMap.MAPS[cm.mapName].r[idx];\n        var g = ColorMap.MAPS[cm.mapName].g[idx];\n        var b = ColorMap.MAPS[cm.mapName].b[idx];\n\n        return 'rgb(' + r + ',' + g + ',' + b + ')';\n    };\n\n    View.prototype.getViewParams = function() {\n        var resolution = this.width > this.height ? this.fov / this.width : this.fov / this.height;\n        return {\n            fov: [this.width * resolution, this.height * resolution],   \n            width: this.width,   \n            height: this.height   \n        };\n    };\n\n    View.prototype.setGridColor = function(r, g, b, a) {\n        this.aladin.webglAPI.setGridColor(r, g, b, a);\n    }\n\n    /**\n     * redraw the whole view\n     */\n    View.prototype.redraw = function() {\n\n        var saveNeedRedraw = this.needRedraw;\n        var now = Date.now();\n        var dt = now - this.prev;\n\n        this.ready = this.aladin.webglAPI.isReady();\n        if (this.imageSurveysToSet !== null && (this.firstHiPS || this.ready)) {\n            try {\n                console.log(\"sdfff \", this.imageSurveysToSet)\n                this.aladin.webglAPI.setImageSurveys(this.imageSurveysToSet);\n            } catch(e) {\n                console.warn(e)\n            }\n\n            this.imageSurveysToSet = null;\n            this.firstHiPS = false;\n        }\n\n        try {\n            this.aladin.webglAPI.update(dt, this.needRedraw);\n        } catch(e) {\n            console.error(e)\n        }\n        // This is called at each frame\n        // Better way is to give this function\n        // to Rust so that the backend executes it\n        // only when necessary, i.e. during the zoom\n        // animation\n        updateFovDiv(this);\n        // check whether a catalog has been parsed and\n        // is ready to be plot\n        let catReady = this.aladin.webglAPI.isCatalogLoaded();\n        if (catReady) {\n            var callbackFn = this.aladin.callbacksByEventName['catalogReady'];\n            (typeof callbackFn === 'function') && callbackFn();\n        }\n\n        try {\n            this.aladin.webglAPI.render(this.needRedraw);\n        } catch(e) {\n            console.error(\"Error: \", e);\n        }\n\n        var imageCtx = this.imageCtx;\n        //////// 1. Draw images ////////\n        /*if (imageCtx.start2D) {\n            imageCtx.start2D();\n        }*/\n        //// clear canvas ////\n        // TODO : do not need to clear if fov small enough ?\n        /*imageCtx.clearRect(0, 0, this.imageCanvas.width, this.imageCanvas.height);\n        ////////////////////////\n    \n        var bkgdColor = this.getBackgroundColor();    \n        // fill with background of the same color than the first color map value (lowest intensity)\n        if (this.projectionMethod==ProjectionEnum.SIN) {\n            if (this.fov>=60) {\n                imageCtx.fillStyle = bkgdColor;\n                imageCtx.beginPath();\n                var maxCxCy = this.cx>this.cy ? this.cx : this.cy;\n                imageCtx.arc(this.cx, this.cy, maxCxCy * this.zoomFactor, 0, 2*Math.PI, true);\n                imageCtx.fill();\n            }\n            // pour eviter les losanges blancs qui apparaissent quand les tuiles sont en attente de chargement\n            else {\n                imageCtx.fillStyle = bkgdColor;\n                imageCtx.fillRect(0, 0, this.imageCanvas.width, this.imageCanvas.height);\n            }\n        }\n        else if (this.projectionMethod==ProjectionEnum.AITOFF) {\n            if (imageCtx.ellipse) {\n                imageCtx.fillStyle = bkgdColor;\n                imageCtx.beginPath();\n                imageCtx.ellipse(this.cx, this.cy, 2.828*this.cx*this.zoomFactor, this.cx*this.zoomFactor*1.414, 0, 0, 2*Math.PI);\n                imageCtx.fill();\n            }\n        }*/\n        /*if (imageCtx.finish2D) {\n            imageCtx.finish2D();\n        }*/\n\n        \n        this.projection.setCenter(this.viewCenter.lon, this.viewCenter.lat);\n        // do we have to redo that every time? Probably not\n        //this.projection.setProjection(this.projectionMethod);\n\n\n        // ************* Draw allsky tiles (low resolution) *****************\n\n        var cornersXYViewMapHighres = null;\n        // Pour traitement des DEFORMATIONS --> TEMPORAIRE, draw deviendra la methode utilisee systematiquement\n\n        /*if (this.imageSurvey && this.imageSurvey.isReady && this.displaySurvey) {\n                if (this.aladin.reduceDeformations==null) {\n                    this.imageSurvey.draw(imageCtx, this, !this.dragging, this.curNorder);\n                }\n\n                else {\n                    this.imageSurvey.draw(imageCtx, this, this.aladin.reduceDeformations, this.curNorder);\n                }\n        }*/\n        /*\n        else {\n            var cornersXYViewMapAllsky = this.getVisibleCells(3);\n            var cornersXYViewMapHighres = null;\n            if (this.curNorder>=3) {\n                if (this.curNorder==3) {\n                    cornersXYViewMapHighres = cornersXYViewMapAllsky;\n                }\n                else {\n                    cornersXYViewMapHighres = this.getVisibleCells(this.curNorder);\n                }\n            }\n\n            // redraw image survey\n            if (this.imageSurvey && this.imageSurvey.isReady && this.displaySurvey) {\n                // TODO : a t on besoin de dessiner le allsky si norder>=3 ?\n                // TODO refactoring : should be a method of HpxImageSurvey\n                this.imageSurvey.redrawAllsky(imageCtx, cornersXYViewMapAllsky, this.fov, this.curNorder);\n                if (this.curNorder>=3) {\n                    this.imageSurvey.redrawHighres(imageCtx, cornersXYViewMapHighres, this.curNorder);\n                }\n            }\n        }\n        */\n        \n\n        // redraw overlay image survey\n        // TODO : does not work if different frames \n        // TODO: use HpxImageSurvey.draw method !!\n        if (this.overlayImageSurvey && this.overlayImageSurvey.isReady) {\n            /*imageCtx.globalAlpha = this.overlayImageSurvey.getAlpha();\n\n            if (this.aladin.reduceDeformations==null) {\n                this.overlayImageSurvey.draw(imageCtx, this, !this.dragging, this.curOverlayNorder);\n            }\n\n            else {\n                this.overlayImageSurvey.draw(imageCtx, this, this.aladin.reduceDeformations, this.curOverlayNorder);\n            }*/\n            /*\n            if (this.fov>50) {\n                this.overlayImageSurvey.redrawAllsky(imageCtx, cornersXYViewMapAllsky, this.fov, this.curOverlayNorder);\n            }\n            if (this.curOverlayNorder>=3) {\n                var norderOverlay = Math.min(this.curOverlayNorder, this.overlayImageSurvey.maxOrder);\n                if ( cornersXYViewMapHighres==null || norderOverlay != this.curNorder ) {\n                    cornersXYViewMapHighres = this.getVisibleCells(norderOverlay);\n                }\n                this.overlayImageSurvey.redrawHighres(imageCtx, cornersXYViewMapHighres, norderOverlay);\n            }\n            */\n\n           //imageCtx.globalAlpha = 1.0;\n\n        }\n        \n        // redraw HEALPix grid\n        if( this.displayHpxGrid) {\n            var cornersXYViewMapAllsky = this.getVisibleCells(3);\n            var cornersXYViewMapHighres = null;\n            if (this.curNorder>=3) {\n                if (this.curNorder==3) {\n                    cornersXYViewMapHighres = cornersXYViewMapAllsky;\n                }\n                else {\n                    cornersXYViewMapHighres = this.getVisibleCells(this.curNorder);\n                }\n            }\n            this.gridCtx.clearRect(0, 0, this.imageCanvas.width, this.imageCanvas.height);\n            if (cornersXYViewMapHighres && this.curNorder>3) {\n                this.healpixGrid.redraw(this.gridCtx, cornersXYViewMapHighres, this.fov, this.curNorder);\n            }\n            else {\n                this.healpixGrid.redraw(this.gridCtx, cornersXYViewMapAllsky, this.fov, 3);\n            }\n        }\n        \n        // redraw coordinates grid\n        /*if (this.showGrid) {\n            if (this.cooGrid==null) {\n                this.cooGrid = new CooGrid();\n            }\n            \n            this.cooGrid.redraw(this.gridCtx, this.projection, this.cooFrame, this.width, this.height, this.largestDim, this.zoomFactor, this.fov);\n        }*/\n         \n\n\n        ///*\n        ////// 2. Draw catalogues////////\n        var catalogCtx = this.catalogCtx;\n\n        var catalogCanvasCleared = false;\n        if (this.mustClearCatalog) {\n            catalogCtx.clearRect(0, 0, this.width, this.height);\n            catalogCanvasCleared = true;\n            this.mustClearCatalog = false;\n        }\n        if (this.catalogs && this.catalogs.length>0 && this.displayCatalog && (! this.dragging  || View.DRAW_SOURCES_WHILE_DRAGGING)) {\n              // TODO : do not clear every time\n            //// clear canvas ////\n            if (! catalogCanvasCleared) {\n                catalogCtx.clearRect(0, 0, this.width, this.height);\n                catalogCanvasCleared = true;\n            }\n            for (var i=0; i<this.catalogs.length; i++) {\n                var cat = this.catalogs[i];\n                //console.log( this.projection, this.cooFrame, this.width, this.height, this.largestDim, this.zoomFactor);\n                cat.draw(catalogCtx, this.projection, this.cooFrame, this.width, this.height, this.largestDim, this.zoomFactor);\n            }\n        }\n        // draw popup catalog\n        if (this.catalogForPopup.isShowing && this.catalogForPopup.sources.length>0) {\n            if (! catalogCanvasCleared) {\n                catalogCtx.clearRect(0, 0, this.width, this.height);\n                catalogCanvasCleared = true;\n            }\n            this.catalogForPopup.draw(catalogCtx, this.projection, this.cooFrame, this.width, this.height, this.largestDim, this.zoomFactor);\n        }\n\n        ////// 3. Draw overlays////////\n        var overlayCtx = this.catalogCtx;\n        if (this.overlays && this.overlays.length>0 && (! this.dragging  || View.DRAW_SOURCES_WHILE_DRAGGING)) {\n            if (! catalogCanvasCleared) {\n                catalogCtx.clearRect(0, 0, this.width, this.height);\n                catalogCanvasCleared = true;\n            }\n            for (var i=0; i<this.overlays.length; i++) {\n                this.overlays[i].draw(overlayCtx, this.projection, this.cooFrame, this.width, this.height, this.largestDim, this.zoomFactor);\n            }\n        }\n        \n\n        // draw MOCs\n        var mocCtx = this.catalogCtx;\n        if (this.mocs && this.mocs.length>0 && (! this.dragging  || View.DRAW_MOCS_WHILE_DRAGGING)) {\n            if (! catalogCanvasCleared) {\n                catalogCtx.clearRect(0, 0, this.width, this.height);\n                catalogCanvasCleared = true;\n            }\n            for (var i=0; i<this.mocs.length; i++) {\n                this.mocs[i].draw(mocCtx, this.projection, this.cooFrame, this.width, this.height, this.largestDim, this.zoomFactor, this.fov);\n            }\n        }\n\n        //*/\n        if (this.mode==View.SELECT) {\n            mustRedrawReticle = true;\n        }\n        \n        ////// 4. Draw reticle ///////\n        // TODO: reticle should be placed in a static DIV, no need to waste a canvas\n        var reticleCtx = this.reticleCtx;\n        if (this.mustRedrawReticle || this.mode==View.SELECT) {\n            reticleCtx.clearRect(0, 0, this.width, this.height);\n        }\n        if (this.displayReticle) {\n            \n            if (! this.reticleCache) {\n                // build reticle image\n                var c = document.createElement('canvas');\n                var s = this.options.reticleSize;\n                c.width = s;\n                c.height = s;\n                var ctx = c.getContext('2d');\n                ctx.lineWidth = 2;\n                ctx.strokeStyle = this.options.reticleColor;\n                ctx.beginPath();\n                ctx.moveTo(s/2, s/2+(s/2-1));\n                ctx.lineTo(s/2, s/2+2);\n                ctx.moveTo(s/2, s/2-(s/2-1));\n                ctx.lineTo(s/2, s/2-2);\n                \n                ctx.moveTo(s/2+(s/2-1), s/2);\n                ctx.lineTo(s/2+2,  s/2);\n                ctx.moveTo(s/2-(s/2-1), s/2);\n                ctx.lineTo(s/2-2,  s/2);\n                \n                ctx.stroke();\n                \n                this.reticleCache = c;\n            }\n                \n            reticleCtx.drawImage(this.reticleCache, this.width/2 - this.reticleCache.width/2, this.height/2 - this.reticleCache.height/2);\n            \n            \n            this.mustRedrawReticle = false;\n        }\n        /*\n        ////// 5. Draw all-sky ring /////\n        if (this.projectionMethod==ProjectionEnum.SIN && this.fov>=60 && this.aladin.options['showAllskyRing'] === true) {\n                    imageCtx.strokeStyle = this.aladin.options['allskyRingColor'];\n                    var ringWidth = this.aladin.options['allskyRingWidth'];\n                    imageCtx.lineWidth = ringWidth;\n                    imageCtx.beginPath();\n                    var maxCxCy = this.cx>this.cy ? this.cx : this.cy;\n                    imageCtx.arc(this.cx, this.cy, (maxCxCy-(ringWidth/2.0)+1) * this.zoomFactor, 0, 2*Math.PI, true);\n                    imageCtx.stroke();\n        }\n\n        \n        // draw selection box\n        if (this.mode==View.SELECT && this.dragging) {\n            reticleCtx.fillStyle = \"rgba(100, 240, 110, 0.25)\";\n            var w = this.dragx - this.selectStartCoo.x;\n            var h =  this.dragy - this.selectStartCoo.y;\n            \n            reticleCtx.fillRect(this.selectStartCoo.x, this.selectStartCoo.y, w, h);\n        }\n        */\n        \n         // TODO : is this the right way?\n         if (saveNeedRedraw==this.needRedraw) {\n             this.needRedraw = false;\n         }\n\n\n        // objects lookup\n        if (!this.dragging) {\n            this.updateObjectsLookup();\n        }\n\n        // execute 'positionChanged' and 'zoomChanged' callbacks\n        //this.executeCallbacksThrottled();\n        this.prev = now;\n        requestAnimFrame(this.redraw.bind(this));\n\n    };\n\n    View.prototype.forceRedraw = function() {\n        this.flagForceRedraw = true;\n    };\n    \n    View.prototype.refreshProgressiveCats = function() {\n        if (! this.catalogs) {\n            return;\n        }\n\n        for (var i=0; i<this.catalogs.length; i++) {\n            if (this.catalogs[i].type=='progressivecat') {\n                this.catalogs[i].loadNeededTiles();\n            }\n        }\n    };\n\n    View.prototype.getVisiblePixList = function(norder, frameSurvey) {\n        var nside = Math.pow(2, norder);\n\n        var pixList;\n        var npix = HealpixIndex.nside2Npix(nside);\n        if (this.fov>80) {\n            pixList = [];\n            for (var ipix=0; ipix<npix; ipix++) {\n                pixList.push(ipix);\n            }\n        }\n        else {\n            var hpxIdx = new HealpixIndex(nside);\n            hpxIdx.init();\n            var spatialVector = new SpatialVector();\n            // if frame != frame image survey, we need to convert to survey frame system\n            //var xy = AladinUtils.viewToXy(this.cx, this.cy, this.width, this.height, this.largestDim, this.zoomFactor);\n            //var radec = this.projection.unproject(xy.x, xy.y);\n            let pos_world = this.aladin.webglAPI.screenToWorld(this.cx, this.cy);\n            let radec = {\n                ra: pos_world[0],\n                dec: pos_world[1]\n            };\n            var lonlat = [];\n            /*if (frameSurvey && frameSurvey.system != this.cooFrame.system) {\n                if (frameSurvey.system==CooFrameEnum.SYSTEMS.J2000) {\n                    lonlat = CooConversion.GalacticToJ2000([radec.ra, radec.dec]);\n                }\n                else if (frameSurvey.system==CooFrameEnum.SYSTEMS.GAL) {\n                    lonlat = CooConversion.J2000ToGalactic([radec.ra, radec.dec]);\n                }\n            }\n            else {\n                lonlat = [radec.ra, radec.dec];\n            }*/\n            lonlat = [radec.ra, radec.dec];\n            spatialVector.set(lonlat[0], lonlat[1]);\n\n            var radius = this.fov*0.5*this.ratio;\n            // we need to extend the radius\n            if (this.fov>60) {\n                radius *= 1.6;\n            }\n            else if (this.fov>12) {\n                radius *=1.45;\n            }\n            else {\n                radius *= 1.1;\n            }\n\n\n\n            pixList = hpxIdx.queryDisc(spatialVector, radius*Math.PI/180.0, true, true);\n            // add central pixel at index 0\n            var polar = HealpixIndex.utils.radecToPolar(lonlat[0], lonlat[1]);\n            var ipixCenter = hpxIdx.ang2pix_nest(polar.theta, polar.phi);\n            pixList.unshift(ipixCenter);\n\n        }\n\n        return pixList;\n    };\n    \n    View.prototype.setAngleRotation = function(theta) {\n\n    }\n\n    // TODO: optimize this method !!\n    View.prototype.getVisibleCells = function(norder, frameSurvey) {\n        if (! frameSurvey && this.imageSurvey) {\n            frameSurvey = this.imageSurvey.cooFrame;\n        }\n        var cells = []; // array to be returned\n        var cornersXY = [];\n        var spVec = new SpatialVector();\n        var nside = Math.pow(2, norder); // TODO : to be modified\n        var npix = HealpixIndex.nside2Npix(nside);\n        var ipixCenter = null;\n        \n        // build list of pixels\n        // TODO: pixList can be obtained from getVisiblePixList\n        var pixList;\n        if (this.fov>80) {\n            pixList = [];\n            for (var ipix=0; ipix<npix; ipix++) {\n                pixList.push(ipix);\n            }\n        }\n        else {\n            var hpxIdx = new HealpixIndex(nside);\n            hpxIdx.init();\n            var spatialVector = new SpatialVector();\n            // if frame != frame image survey, we need to convert to survey frame system\n            var xy = AladinUtils.viewToXy(this.cx, this.cy, this.width, this.height, this.largestDim, this.zoomFactor);\n            //var radec = this.projection.unproject(xy.x, xy.y);\n            var radec = this.aladin.webglAPI.screenToWorld(this.cx, this.cy);\n            var radec = {\n                ra: radec[0],\n                dec: radec[1],\n            };\n            var lonlat = [];\n            if (frameSurvey && frameSurvey.system != this.cooFrame.system) {\n                if (frameSurvey.system==CooFrameEnum.SYSTEMS.J2000) {\n                    lonlat = CooConversion.GalacticToJ2000([radec.ra, radec.dec]); \n                }\n                else if (frameSurvey.system==CooFrameEnum.SYSTEMS.GAL) {\n                    lonlat = CooConversion.J2000ToGalactic([radec.ra, radec.dec]);\n                }\n            }\n            else {\n                lonlat = [radec.ra, radec.dec];\n            }\n            spatialVector.set(lonlat[0], lonlat[1]);\n\n            var radius = this.fov*0.5*this.ratio;\n            // we need to extend the radius\n            if (this.fov>60) {\n                radius *= 1.6;\n            }\n            else if (this.fov>12) {\n                radius *=1.45;\n            }\n            else {\n                radius *= 1.1;\n            }\n            \n            \n                \n            pixList = hpxIdx.queryDisc(spatialVector, radius*Math.PI/180.0, true, true);\n            // add central pixel at index 0\n            var polar = HealpixIndex.utils.radecToPolar(lonlat[0], lonlat[1]);\n            ipixCenter = hpxIdx.ang2pix_nest(polar.theta, polar.phi);\n            pixList.unshift(ipixCenter);\n        }\n        \n        \n        var ipix;\n        var lon, lat;\n        var corners;\n        for (var ipixIdx=0, len=pixList.length; ipixIdx<len; ipixIdx++) {\n            ipix = pixList[ipixIdx];\n            if (ipix==ipixCenter && ipixIdx>0) { \n                continue;\n            }\n            var cornersXYView = [];\n            corners = HealpixCache.corners_nest(ipix, nside);\n\n            for (var k=0; k<4; k++) {\n                spVec.setXYZ(corners[k].x, corners[k].y, corners[k].z);\n                \n                // need for frame transformation ?\n                if (frameSurvey && frameSurvey.system != this.cooFrame.system) {\n                    if (frameSurvey.system == CooFrameEnum.SYSTEMS.J2000) {\n                        var radec = CooConversion.J2000ToGalactic([spVec.ra(), spVec.dec()]); \n                        lon = radec[0];\n                        lat = radec[1];\n                    }\n                    else if (frameSurvey.system == CooFrameEnum.SYSTEMS.GAL) {\n                        var radec = CooConversion.GalacticToJ2000([spVec.ra(), spVec.dec()]); \n                        lon = radec[0];\n                        lat = radec[1];\n                    }\n                }\n                else {\n                    lon = spVec.ra();\n                    lat = spVec.dec();\n                }\n                \n                //cornersXY[k] = this.projection.project(lon, lat);\n                cornersXY[k] = this.aladin.webglAPI.worldToScreen(lon, lat);\n            }\n\n\n            if (cornersXY[0] == null ||  cornersXY[1] == null  ||  cornersXY[2] == null ||  cornersXY[3] == null ) {\n                continue;\n            }\n\n\n\n            for (var k=0; k<4; k++) {\n                //cornersXYView[k] = AladinUtils.xyToView(cornersXY[k].X, cornersXY[k].Y, this.width, this.height, this.largestDim, this.zoomFactor);\n                cornersXYView[k] = {\n                    vx: cornersXY[k][0],\n                    vy: cornersXY[k][1],\n                };\n            }\n\n            var indulge = 10;\n            // detect pixels outside view. Could be improved !\n            // we minimize here the number of cells returned\n            if( cornersXYView[0].vx<0 && cornersXYView[1].vx<0 && cornersXYView[2].vx<0 &&cornersXYView[3].vx<0) {\n                continue;\n            }\n            if( cornersXYView[0].vy<0 && cornersXYView[1].vy<0 && cornersXYView[2].vy<0 &&cornersXYView[3].vy<0) {\n                continue;\n            }\n            if( cornersXYView[0].vx>=this.width && cornersXYView[1].vx>=this.width && cornersXYView[2].vx>=this.width &&cornersXYView[3].vx>=this.width) {\n                continue;\n            }\n            if( cornersXYView[0].vy>=this.height && cornersXYView[1].vy>=this.height && cornersXYView[2].vy>=this.height &&cornersXYView[3].vy>=this.height) {\n                continue;\n            }\n\n\n            // check if pixel is visible\n//            if (this.fov<160) { // don't bother checking if fov is large enough\n//                if ( ! AladinUtils.isHpxPixVisible(cornersXYView, this.width, this.height) ) {\n//                    continue;\n//                }\n//            }\n            // check if we have a pixel at the edge of the view in allsky projections\n            if (this.projection.PROJECTION!=ProjectionEnum.SIN && this.projection.PROJECTION!=ProjectionEnum.TAN) {\n               /* console.log(this.largestDim);\n                var xdiff = cornersXYView[0].vx-cornersXYView[2].vx;\n                var ydiff = cornersXYView[0].vy-cornersXYView[2].vy;\n                var distDiag = Math.sqrt(xdiff*xdiff + ydiff*ydiff);\n                if (distDiag>this.largestDim/5) {\n                    continue;\n                }\n                xdiff = cornersXYView[1].vx-cornersXYView[3].vx;\n                ydiff = cornersXYView[1].vy-cornersXYView[3].vy;\n                distDiag = Math.sqrt(xdiff*xdiff + ydiff*ydiff);\n                if (distDiag>this.largestDim/5) {\n                    continue;\n                }*/\n\n                // New faster approach: when a vertex from a cell gets to the other side of the projection\n                // its vertices order change from counter-clockwise to clockwise!\n                // So if the vertices describing a cell are given in clockwise order\n                // we know it crosses the projection, so we do not plot them!\n                if (!AladinUtils.counterClockwiseTriangle(cornersXYView[0].vx, cornersXYView[0].vy, cornersXYView[1].vx, cornersXYView[1].vy, cornersXYView[2].vx, cornersXYView[2].vy) ||\n                    !AladinUtils.counterClockwiseTriangle(cornersXYView[0].vx, cornersXYView[0].vy, cornersXYView[2].vx, cornersXYView[2].vy, cornersXYView[3].vx, cornersXYView[3].vy)) {\n                    continue;\n                }\n            }\n            \n            cornersXYView.ipix = ipix;\n            cells.push(cornersXYView);\n        }\n        \n        return cells;\n    };\n\n    // get position in view for a given HEALPix cell\n    View.prototype.getPositionsInView = function(ipix, norder) {\n        var cornersXY = [];\n        var lon, lat;\n        var spVec = new SpatialVector();\n        var nside = Math.pow(2, norder); // TODO : to be modified\n        \n        \n        var cornersXYView = [];  // will be returned\n        var corners = HealpixCache.corners_nest(ipix, nside);\n\n        for (var k=0; k<4; k++) {\n            spVec.setXYZ(corners[k].x, corners[k].y, corners[k].z);\n                \n            // need for frame transformation ?\n            if (this.imageSurvey && this.imageSurvey.cooFrame.system != this.cooFrame.system) {\n                if (this.imageSurvey.cooFrame.system == CooFrameEnum.SYSTEMS.J2000) {\n                    var radec = CooConversion.J2000ToGalactic([spVec.ra(), spVec.dec()]); \n                    lon = radec[0];\n                    lat = radec[1];\n                }\n                else if (this.imageSurvey.cooFrame.system == CooFrameEnum.SYSTEMS.GAL) {\n                    var radec = CooConversion.GalacticToJ2000([spVec.ra(), spVec.dec()]); \n                    lon = radec[0];\n                    lat = radec[1];\n                }\n            }\n            else {\n                lon = spVec.ra();\n                lat = spVec.dec();\n            }\n            //cornersXY[k] = this.projection.project(lon, lat);\n            let xy = this.aladin.webglAPI.worldToScreen(lon, lat);\n            cornersXYView[k] = {\n                vx: xy.x,\n                vy: xy.y\n            };\n        }\n        \n        if (cornersXYView[0] == null ||  cornersXYView[1] == null  ||  cornersXYView[2] == null ||  cornersXYView[3] == null ) {\n            return null;\n        }\n        /*if (cornersXY[0] == null ||  cornersXY[1] == null  ||  cornersXY[2] == null ||  cornersXY[3] == null ) {\n            return null;\n        }*/\n        /*for (var k=0; k<4; k++) {\n            cornersXYView[k] = AladinUtils.xyToView(cornersXY[k].X, cornersXY[k].Y, this.width, this.height, this.largestDim, this.zoomFactor);\n        }*/\n\n        return cornersXYView;\n    };\n    \n    \n    /*View.prototype.computeZoomFactor = function(level) {\n        if (level>0) {\n            return AladinUtils.getZoomFactorForAngle(180.0/Math.pow(1.35, level), this.projectionMethod);\n        }\n        else {\n            return 1 + 0.1*level;\n        }\n    };*/\n    /*View.prototype.computeZoomLevelFromFOV = function() {\n        if (level>0) {\n            return AladinUtils.getZoomFactorForAngle(180/Math.pow(1.15, level), this.projectionMethod);\n        }\n        else {\n            return 1 + 0.1*level;\n        }\n    };*/\n    \n    // Called for touchmove events\n    View.prototype.setZoom = function(fovDegrees) {\n        if (fovDegrees<0) {\n            return;\n        }\n        // Erase the field of view state of the backend by\n        this.aladin.webglAPI.setFieldOfView(fovDegrees);\n        //var zoomLevel = Math.log(180/fovDegrees)/Math.log(1.15);\n        //this.setZoomLevel(zoomLevel);\n        this.updateZoomState();\n    };\n\n    View.prototype.increaseZoom = function() {\n        for (let i = 0; i < 5; i++) {\n            this.aladin.webglAPI.registerWheelEvent(0.01);\n        }\n    }\n    View.prototype.decreaseZoom = function() {\n        for (let i = 0; i < 5; i++) {\n            this.aladin.webglAPI.registerWheelEvent(-0.01);\n        }\n    }\n    View.prototype.setShowGrid = function(showGrid) {\n        this.showGrid = showGrid;\n        if (showGrid) {\n            this.aladin.webglAPI.enableGrid();\n        } else {\n            this.aladin.webglAPI.disableGrid();\n        }\n        this.requestRedraw();\n    };\n\n    //View.prototype.setZoom = function(level) {\n    View.prototype.updateZoomState = function() {\n        /*let zoom = {\"action\": undefined};\n\n        if (this.zoomLevel > level) {\n            console.log(\"unzoom\")\n            zoom[\"action\"] = \"unzoom\";\n        } else if (this.zoomLevel < level) {\n            zoom[\"action\"] = \"zoom\";\n        }*/\n\n        /*if (this.minFOV || this.maxFOV) {\n            var newFov = doComputeFov(this, this.computeZoomFactor(Math.max(-2, level)));\n            if (this.maxFOV && newFov>this.maxFOV  ||  this.minFOV && newFov<this.minFOV)  {\n                return;\n            }\n        }*/\n\n        /*if (this.projectionMethod==ProjectionEnum.SIN) {\n            //this.zoomLevel = Math.max(-2, level); // TODO : canvas freezes in firefox when max level is small\n            this.zoomLevel = Math.max(-7, level); // TODO : canvas freezes in firefox when max level is small\n        } else {\n            this.zoomLevel = Math.max(-7, level); // TODO : canvas freezes in firefox when max level is small\n        }*/\n        //this.zoomLevel = Math.max(-7, level);\n        \n        /// Old\n        /*this.zoomFactor = this.computeZoomFactor(this.zoomLevel);\n        this.fov = computeFov(this);\n\n        if (this.zoomFactor >= 1.0) {\n            this.aladin.webglAPI.setFieldOfView(this.fov);\n        } else {\n            //console.log(\"FOV, \", this.fov / this.zoomFactor);\n\n            // zoom factor\n            this.aladin.webglAPI.setFieldOfView(this.fov / this.zoomFactor);\n        }*/\n        this.zoomFactor = this.aladin.webglAPI.getClipZoomFactor();\n        this.fov = this.aladin.webglAPI.getFieldOfView();\n\n        // TODO: event/listener should be better\n        //updateFovDiv(this);\n        \n        this.computeNorder();\n        \n        this.forceRedraw();\n        //this.requestRedraw();\n        // on avertit les catalogues progressifs\n\n    };\n    \n    /**\n     * compute and set the norder corresponding to the current view resolution\n     */\n    View.prototype.computeNorder = function() {\n        var resolution = this.fov / this.largestDim; // in degree/pixel\n        var tileSize = 512; // TODO : read info from HpxImageSurvey.tileSize\n        var nside = HealpixIndex.calculateNSide(3600*tileSize*resolution); // 512 = size of a \"tile\" image\n        var norder = Math.log(nside)/Math.log(2);\n        norder = Math.max(norder, 1);\n        this.realNorder = norder;\n\n            \n        // here, we force norder to 3 (otherwise, the display is \"blurry\" for too long when zooming in)\n        if (this.fov<=50 && norder<=2) {\n            norder = 3;\n        }\n           \n\n        // that happens if we do not wish to display tiles coming from Allsky.[jpg|png]\n        if (this.imageSurvey && norder<=2 && this.imageSurvey.minOrder>2) {\n            norder = this.imageSurvey.minOrder;\n        }\n\n        var overlayNorder  = norder;\n        if (this.imageSurvey && norder>this.imageSurvey.maxOrder) {\n            norder = this.imageSurvey.maxOrder;\n        }\n        if (this.overlayImageSurvey && overlayNorder>this.overlayImageSurvey.maxOrder) {\n            overlayNorder = this.overlayImageSurvey.maxOrder;\n        }\n        // should never happen, as calculateNSide will return something <=HealpixIndex.ORDER_MAX\n        if (norder>HealpixIndex.ORDER_MAX) {\n            norder = HealpixIndex.ORDER_MAX;\n        }\n        if (overlayNorder>HealpixIndex.ORDER_MAX) {\n            overlayNorder = HealpixIndex.ORDER_MAX;\n        }\n            \n        this.curNorder = norder;\n        this.curOverlayNorder = overlayNorder;\n    };\n    \n    View.prototype.untaintCanvases = function() {\n        this.createCanvases();\n        createListeners(this);\n        this.fixLayoutDimensions();\n    };\n    \n    View.prototype.setOverlayImageSurvey = async function(idOrUrl) {\n        /*if (! overlayImageSurvey) {\n            this.overlayImageSurvey = null;\n            this.requestRedraw();\n            return;\n        }\n        \n        // reset canvas to \"untaint\" canvas if needed\n        // we test if the previous base image layer was using CORS or not\n        if ($.support.cors && this.overlayImageSurvey && ! this.overlayImageSurvey.useCors) {\n            this.untaintCanvases();\n        }\n        \n        var newOverlayImageSurvey;\n        if (typeof overlayImageSurvey == \"string\") {\n            newOverlayImageSurvey = HpxImageSurvey.getSurveyFromId(overlayImageSurvey);\n            if ( ! newOverlayImageSurvey) {\n                newOverlayImageSurvey = HpxImageSurvey.getSurveyFromId(HpxImageSurvey.DEFAULT_SURVEY_ID);\n            }\n        }\n        else {\n            newOverlayImageSurvey = overlayImageSurvey;\n        }\n        newOverlayImageSurvey.isReady = false;\n        this.overlayImageSurvey = newOverlayImageSurvey;\n        \n        var self = this;\n        newOverlayImageSurvey.init(this, function() {\n            //self.imageSurvey = newImageSurvey;\n            self.computeNorder();\n            newOverlayImageSurvey.isReady = true;\n            self.requestRedraw();\n            self.updateObjectsLookup();\n            \n            if (callback) {\n                callback();\n            }\n        });*/\n        if (!idOrUrl) {\n            return;\n        }\n\n        let overlaySurvey = await new HpxImageSurvey(idOrUrl);\n        this.aladin.webglAPI.setOverlayHiPS(overlaySurvey);\n    };\n\n    View.prototype.setUnknownSurveyIfNeeded = function() {\n        if (unknownSurveyId) {\n            this.setImageSurvey(unknownSurveyId);\n            unknownSurveyId = undefined;\n        }\n    }\n\n    var unknownSurveyId = undefined;\n    // @param imageSurvey : HpxImageSurvey object or image survey identifier\n    View.prototype.addImageSurvey = function(survey, layer) {\n        // We wait for the HpxImageSurvey to complete\n        // Register to the view\n        const url = survey.properties.url;\n        survey.layer = layer;\n\n        this.imageSurveys.get(layer).set(url, survey);\n        // Then we send the current surveys to the backend\n        this.setHiPS();\n    };\n\n    View.prototype.setImageSurvey = function(survey, layer) {\n        const url = survey.properties.url;\n        survey.layer = layer;\n        \n        this.imageSurveys.set(layer, new Map());\n        this.imageSurveys.get(layer).set(url, survey);\n        // Then we send the current surveys to the backend\n        this.setHiPS();\n    };\n\n    View.prototype.setImageSurveysLayer = function(surveys, layer) {\n        this.imageSurveys.set(layer, new Map());\n\n        surveys.forEach(survey => {\n            const url = survey.properties.url;\n            survey.layer = layer;\n            \n            this.imageSurveys.get(layer).set(url, survey);\n        });\n\n        // Then we send the current surveys to the backend\n        this.setHiPS();\n    };\n\n    View.prototype.removeImageSurveysLayer = function (layer) {\n        this.imageSurveys.delete(layer);\n\n        this.setHiPS();\n    };\n\n    View.prototype.moveImageSurveysLayerForward = function(layer) {\n        this.aladin.webglAPI.moveImageSurveysLayerForward(layer);\n    }\n\n    View.prototype.setHiPS = function() {\n        let surveys = [];\n        for (let layer of this.imageSurveys.values()) {\n            for (let survey of layer.values()) {\n                surveys.push(survey);\n            }\n        }\n\n        this.imageSurveysToSet = surveys;\n    };\n\n    View.prototype.requestRedraw = function() {\n        this.needRedraw = true;\n    };\n    \n    View.prototype.changeProjection = function(projectionName) {\n        switch (projectionName) {\n            case \"aitoff\":\n                this.projectionMethod = ProjectionEnum.AITOFF;\n                break;\n            case \"tan\":\n                this.projectionMethod = ProjectionEnum.TAN;\n                break;\n            case \"arc\":\n                this.projectionMethod = ProjectionEnum.ARC;\n                break;\n            case \"mercator\":\n                this.projectionMethod = ProjectionEnum.MERCATOR;\n                break;\n            case \"mollweide\":\n                this.projectionMethod = ProjectionEnum.MOL;\n                break;\n            case \"sinus\":\n            default:\n                this.projectionMethod = ProjectionEnum.SIN;\n        }\n        // Change the projection here\n        this.projection.setProjection(this.projectionMethod);\n        this.aladin.webglAPI = this.aladin.webglAPI.setProjection(projectionName);\n\n        this.requestRedraw();\n    };\n\n    View.prototype.changeFrame = function(cooFrame) {\n        var oldCooFrame = this.cooFrame;\n        this.cooFrame = cooFrame;\n        // recompute viewCenter\n        console.log(\"change frame\")\n        if (this.cooFrame.system == CooFrameEnum.SYSTEMS.GAL && this.cooFrame.system != oldCooFrame.system) {\n            var lb = CooConversion.J2000ToGalactic([this.viewCenter.lon, this.viewCenter.lat]);\n            this.viewCenter.lon = lb[0];\n            this.viewCenter.lat = lb[1]; \n\n            const GAL = Aladin.wasmLibs.webgl.GALCooSys();\n            this.aladin.webglAPI.setCooSystem(GAL);\n        }\n        else if (this.cooFrame.system == CooFrameEnum.SYSTEMS.J2000 && this.cooFrame.system != oldCooFrame.system) {\n            var radec = CooConversion.GalacticToJ2000([this.viewCenter.lon, this.viewCenter.lat]);\n            this.viewCenter.lon = radec[0];\n            this.viewCenter.lat = radec[1];\n\n            const ICRSJ2000 = Aladin.wasmLibs.webgl.ICRSJ2000CooSys();\n            this.aladin.webglAPI.setCooSystem(ICRSJ2000);\n        }\n\n        this.location.update(this.viewCenter.lon, this.viewCenter.lat, this.cooFrame, true);\n\n        this.requestRedraw();\n    };\n\n    View.prototype.showHealpixGrid = function(show) {\n        // Clear the grid ctx when not showing it\n        if (!show) {\n            this.gridCtx.clearRect(0, 0, this.imageCanvas.width, this.imageCanvas.height);\n        }\n        this.displayHpxGrid = show;\n        this.requestRedraw();\n    };\n    \n    View.prototype.showSurvey = function(show) {\n        this.displaySurvey = show;\n\n        this.requestRedraw();\n    };\n    \n    View.prototype.showCatalog = function(show) {\n        this.displayCatalog = show;\n\n        if (!this.displayCatalog) {\n            this.mustClearCatalog = true;\n        }\n        this.requestRedraw();\n    };\n    \n    View.prototype.showReticle = function(show) {\n        this.displayReticle = show;\n\n        this.mustRedrawReticle = true;\n        this.requestRedraw();\n    };\n\n    View.prototype.pointTo = function(ra, dec, options) {\n        options = options || {};\n        ra = parseFloat(ra);\n        dec = parseFloat(dec);\n\n        if (isNaN(ra) || isNaN(dec)) {\n            return;\n        }\n        //if (this.cooFrame.system==CooFrameEnum.SYSTEMS.J2000) {\n            this.viewCenter.lon = ra;\n            this.viewCenter.lat = dec;\n        //}\n        /*else if (this.cooFrame.system==CooFrameEnum.SYSTEMS.GAL) {\n            var lb = CooConversion.J2000ToGalactic([ra, dec]);\n            this.viewCenter.lon = lb[0];\n            this.viewCenter.lat = lb[1];\n        }*/\n        this.location.update(this.viewCenter.lon, this.viewCenter.lat, this.cooFrame, true);\n\n        if (options && options.forceAnimation === false) {\n            this.aladin.webglAPI.setCenter(this.viewCenter.lon, this.viewCenter.lat);\n        } else if (options && options.forceAnimation === true) {\n            this.aladin.webglAPI.moveToLocation(this.viewCenter.lon, this.viewCenter.lat)\n        } else {\n            if (this.fov > 30.0) {\n                this.aladin.webglAPI.moveToLocation(this.viewCenter.lon, this.viewCenter.lat);\n            } else {\n                this.aladin.webglAPI.setCenter(this.viewCenter.lon, this.viewCenter.lat);\n            }\n        }\n        \n        this.forceRedraw();\n        this.requestRedraw();\n\n        var self = this;\n        setTimeout(function() {self.refreshProgressiveCats();}, 1000);\n    };\n    View.prototype.makeUniqLayerName = function(name) {\n        if (! this.layerNameExists(name)) {\n            return name;\n        }\n        for (var k=1;;++k) {\n            var newName = name + '_' + k;\n            if ( ! this.layerNameExists(newName)) {\n                return newName;\n            }\n        }\n    };\n    View.prototype.layerNameExists = function(name) {\n        var c = this.allOverlayLayers;\n        for (var k=0; k<c.length; k++) {\n            if (name==c[k].name) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    View.prototype.removeLayers = function() {\n        this.catalogs = [];\n        this.overlays = [];\n        this.mocs = [];\n        this.allOverlayLayers = [];\n        this.requestRedraw();\n    };\n\n    View.prototype.addCatalog = function(catalog) {\n        catalog.name = this.makeUniqLayerName(catalog.name);\n        this.allOverlayLayers.push(catalog);\n        this.catalogs.push(catalog);\n        if (catalog.type=='catalog') {\n            catalog.setView(this);\n        }\n        else if (catalog.type=='progressivecat') {\n            catalog.init(this);\n        }\n    };\n    View.prototype.addOverlay = function(overlay) {\n        overlay.name = this.makeUniqLayerName(overlay.name);\n        this.overlays.push(overlay);\n        this.allOverlayLayers.push(overlay);\n        overlay.setView(this);\n    };\n    \n    View.prototype.addMOC = function(moc) {\n        moc.name = this.makeUniqLayerName(moc.name);\n        this.mocs.push(moc);\n        this.allOverlayLayers.push(moc);\n        moc.setView(this);\n    };\n    \n    View.prototype.getObjectsInBBox = function(x, y, w, h) {\n        if (w<0) {\n            x = x+w;\n            w = -w;\n        }\n        if (h<0) {\n            y = y+h;\n            h = -h;\n        }\n        var objList = [];\n        var cat, sources, s;\n        if (this.catalogs) {\n            for (var k=0; k<this.catalogs.length; k++) {\n                cat = this.catalogs[k];\n                if (!cat.isShowing) {\n                    continue;\n                }\n                sources = cat.getSources();\n                for (var l=0; l<sources.length; l++) {\n                    s = sources[l];\n                    if (!s.isShowing || !s.x || !s.y) {\n                        continue;\n                    }\n                    if (s.x>=x && s.x<=x+w && s.y>=y && s.y<=y+h) {\n                        objList.push(s);\n                    }\n                }\n            }\n        }\n        return objList;\n        \n    };\n\n    // update objLookup, lookup table \n    View.prototype.updateObjectsLookup = function() {\n        this.objLookup = [];\n\n        var cat, sources, s, xRounded, yRounded;\n        if (this.catalogs) {\n            for (var k=0; k<this.catalogs.length; k++) {\n                cat = this.catalogs[k];\n                if (!cat.isShowing) {\n                    continue;\n                }\n                sources = cat.getSources();\n                for (var l=0; l<sources.length; l++) {\n                    s = sources[l];\n                    if (!s.isShowing || !s.x || !s.y) {\n                        continue;\n                    }\n\n                    xRounded = Math.round(s.x);\n                    yRounded = Math.round(s.y);\n\n                    if (typeof this.objLookup[xRounded] === 'undefined') {\n                        this.objLookup[xRounded] = [];\n                    }\n                    if (typeof this.objLookup[xRounded][yRounded] === 'undefined') {\n                        this.objLookup[xRounded][yRounded] = [];\n                    }\n                    this.objLookup[xRounded][yRounded].push(s);\n                }       \n            }           \n        }     \n    };\n\n    // return closest object within a radius of maxRadius pixels. maxRadius is an integer\n    View.prototype.closestObjects = function(x, y, maxRadius) {\n\n        // footprint selection code adapted from Fabrizio Giordano dev. from Serco for ESA/ESDC\n        var overlay;\n        var canvas=this.catalogCanvas;\n        var ctx = canvas.getContext(\"2d\");\n        // this makes footprint selection easier as the catch-zone is larger\n        ctx.lineWidth = 6;\n\n        if (this.overlays) {\n            for (var k=0; k<this.overlays.length; k++) {\n                overlay = this.overlays[k];\n                for (var i=0; i<overlay.overlays.length;i++){\n\n                    // test polygons first\n                    var footprint = overlay.overlays[i];\n                    var pointXY = [];\n                    for(var j=0;j<footprint.polygons.length;j++){\n\n                        /*var xy = AladinUtils.radecToViewXy(footprint.polygons[j][0], footprint.polygons[j][1],\n                                this.projection,\n                                this.cooFrame,\n                                this.width, this.height,\n                                this.largestDim,\n                                this.zoomFactor);*/\n                        var xy = AladinUtils.radecToViewXy(footprint.polygons[j][0], footprint.polygons[j][1], this);\n                        if (! xy) {\n                            continue;\n                        }\n                        pointXY.push({\n                            x: xy[0],\n                            y: xy[1]\n                        });\n                    }\n                    for(var l=0; l<pointXY.length-1;l++){\n\n                        ctx.beginPath();                        // new segment\n                        ctx.moveTo(pointXY[l].x, pointXY[l].y);     // start is current point\n                        ctx.lineTo(pointXY[l+1].x, pointXY[l+1].y); // end point is next\n                        if (ctx.isPointInStroke(x, y)) {        // x,y is on line?\n                            closest = footprint;\n                            return [closest];\n                        }\n                    }\n                }\n\n                // test Circles\n                for (var i=0; i<overlay.overlay_items.length; i++) {\n                    if (overlay.overlay_items[i] instanceof Circle) {\n                        overlay.overlay_items[i].draw(ctx, this, this.projection, this.cooFrame, this.width, this.height, this.largestDim, this.zoomFactor, true);\n\n                        if (ctx.isPointInStroke(x, y)) {\n                            closest = overlay.overlay_items[i];\n                            return [closest];\n                        }\n                    }\n                }\n            }\n        }\n\n\n\n\n\n\n        if (!this.objLookup) {\n            return null;\n        }\n        var closest, dist;\n        for (var r=0; r<=maxRadius; r++) {\n            closest = dist = null;\n            for (var dx=-maxRadius; dx<=maxRadius; dx++) {\n                if (! this.objLookup[x+dx]) {\n                    continue;\n                }\n                for (var dy=-maxRadius; dy<=maxRadius; dy++) {\n                    if (this.objLookup[x+dx][y+dy]) {\n                        var d = dx*dx + dy*dy;\n                        if (!closest) {\n                            closest = this.objLookup[x+dx][y+dy];\n                            dist = d;\n                        }\n                        else if (d<dist) {\n                            dist = d;\n                            closest = this.objLookup[x+dx][y+dy];\n                        }\n                    }\n                }\n            }\n            if (closest) {\n                return closest;\n            }\n        }\n        return null;\n    };\n    \n    return View;\n})();\n","export let astro = (function () {\n\n  let astro = {};\n\n  var Base, BinaryTable, CompressedImage, DataUnit, Decompress, FITS, HDU, Header, HeaderVerify, Image, ImageUtils, Parser, Table, Tabular, _ref, _ref1,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    __slice = [].slice;\n\n\n  Base = (function() {\n    function Base() {}\n\n    Base.include = function(obj) {\n      var key, value;\n      for (key in obj) {\n        value = obj[key];\n        this.prototype[key] = value;\n      }\n      return this;\n    };\n\n    Base.extend = function(obj) {\n      var key, value;\n      for (key in obj) {\n        value = obj[key];\n        this[key] = value;\n      }\n      return this;\n    };\n\n    Base.prototype.proxy = function(func) {\n      var _this = this;\n      return function() {\n        return func.apply(_this, arguments);\n      };\n    };\n\n    Base.prototype.invoke = function(callback, opts, data) {\n      var context;\n      context = (opts != null ? opts.context : void 0) != null ? opts.context : this;\n      if (callback != null) {\n        return callback.call(context, data, opts);\n      }\n    };\n\n    return Base;\n\n  })();\n\n  Parser = (function(_super) {\n    __extends(Parser, _super);\n\n    Parser.prototype.LINEWIDTH = 80;\n\n    Parser.prototype.BLOCKLENGTH = 2880;\n\n    File.prototype.slice = File.prototype.slice || File.prototype.webkitSlice;\n\n    Blob.prototype.slice = Blob.prototype.slice || Blob.prototype.webkitSlice;\n\n    function Parser(arg, callback, opts) {\n      var xhr,\n        _this = this;\n      this.arg = arg;\n      this.callback = callback;\n      this.opts = opts;\n      this.hdus = [];\n      this.blockCount = 0;\n      this.begin = 0;\n      this.end = this.BLOCKLENGTH;\n      this.offset = 0;\n      this.headerStorage = new Uint8Array();\n      if (typeof this.arg === 'string') {\n        this.readNextBlock = this._readBlockFromBuffer;\n        xhr = new XMLHttpRequest();\n        xhr.open('GET', this.arg);\n        xhr.responseType = 'arraybuffer';\n\n        // the onerror handling has been added wrt the original fitsjs library as retrieved on the astrojs github repo\n        // if an error occurs, we return an empty object\n        xhr.onerror = function() {\n          _this.invoke(_this.callback, _this.opts);\n        }\n\n        xhr.onload = function() {\n          if (xhr.status !== 200) {\n            _this.invoke(_this.callback, _this.opts);\n            return;\n          }\n          _this.arg = xhr.response;\n          _this.length = _this.arg.byteLength;\n          return _this.readFromBuffer();\n        };\n        xhr.send();\n      } else {\n        this.length = this.arg.size;\n        this.readNextBlock = this._readBlockFromFile;\n        this.readFromFile();\n      }\n    }\n\n    Parser.prototype.readFromBuffer = function() {\n      var block;\n      block = this.arg.slice(this.begin + this.offset, this.end + this.offset);\n      return this.readBlock(block);\n    };\n\n    Parser.prototype.readFromFile = function() {\n      var block,\n        _this = this;\n      this.reader = new FileReader();\n      this.reader.onloadend = function(e) {\n        return _this.readBlock(e.target.result);\n      };\n      block = this.arg.slice(this.begin + this.offset, this.end + this.offset);\n      return this.reader.readAsArrayBuffer(block);\n    };\n\n    Parser.prototype.readBlock = function(block) {\n      var arr, dataLength, dataunit, header, rowIndex, rows, s, slice, tmp, value, _i, _len, _ref;\n      arr = new Uint8Array(block);\n      tmp = new Uint8Array(this.headerStorage);\n      this.headerStorage = new Uint8Array(this.end);\n      this.headerStorage.set(tmp, 0);\n      this.headerStorage.set(arr, this.begin);\n      rows = this.BLOCKLENGTH / this.LINEWIDTH;\n      while (rows--) {\n        rowIndex = rows * this.LINEWIDTH;\n        if (arr[rowIndex] === 32) {\n          continue;\n        }\n        if (arr[rowIndex] === 69 && arr[rowIndex + 1] === 78 && arr[rowIndex + 2] === 68 && arr[rowIndex + 3] === 32) {\n          s = '';\n          _ref = this.headerStorage;\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            value = _ref[_i];\n            s += String.fromCharCode(value);\n          }\n          header = new Header(s);\n          this.start = this.end + this.offset;\n          dataLength = header.getDataLength();\n          slice = this.arg.slice(this.start, this.start + dataLength);\n          if (header.hasDataUnit()) {\n            dataunit = this.createDataUnit(header, slice);\n          }\n          this.hdus.push(new HDU(header, dataunit));\n          this.offset += this.end + dataLength + this.excessBytes(dataLength);\n          if (this.offset === this.length) {\n            this.headerStorage = null;\n            this.invoke(this.callback, this.opts, this);\n            return;\n          }\n          this.blockCount = 0;\n          this.begin = this.blockCount * this.BLOCKLENGTH;\n          this.end = this.begin + this.BLOCKLENGTH;\n          this.headerStorage = new Uint8Array();\n          block = this.arg.slice(this.begin + this.offset, this.end + this.offset);\n          this.readNextBlock(block);\n          return;\n        }\n        break;\n      }\n      this.blockCount += 1;\n      this.begin = this.blockCount * this.BLOCKLENGTH;\n      this.end = this.begin + this.BLOCKLENGTH;\n      block = this.arg.slice(this.begin + this.offset, this.end + this.offset);\n      this.readNextBlock(block);\n    };\n\n    Parser.prototype._readBlockFromBuffer = function(block) {\n      return this.readBlock(block);\n    };\n\n    Parser.prototype._readBlockFromFile = function(block) {\n      return this.reader.readAsArrayBuffer(block);\n    };\n\n    Parser.prototype.createDataUnit = function(header, blob) {\n      var type;\n      type = header.getDataType();\n      return new astro.FITS[type](header, blob);\n    };\n\n    Parser.prototype.excessBytes = function(length) {\n      return (this.BLOCKLENGTH - (length % this.BLOCKLENGTH)) % this.BLOCKLENGTH;\n    };\n\n    Parser.prototype.isEOF = function() {\n      if (this.offset === this.length) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    return Parser;\n\n  })(Base);\n\n   FITS = (function(_super) {\n    __extends(FITS, _super);\n\n    function FITS(arg, callback, opts) {\n      var parser,\n        _this = this;\n      this.arg = arg;\n      parser = new Parser(this.arg, function(fits) {\n        _this.hdus = parser.hdus;\n        return _this.invoke(callback, opts, _this);\n      });\n    }\n\n    FITS.prototype.getHDU = function(index) {\n      var hdu, _i, _len, _ref;\n      if ((index != null) && (this.hdus[index] != null)) {\n        return this.hdus[index];\n      }\n      _ref = this.hdus;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        hdu = _ref[_i];\n        if (hdu.hasData()) {\n          return hdu;\n        }\n      }\n    };\n\n    FITS.prototype.getHeader = function(index) {\n      return this.getHDU(index).header;\n    };\n\n    FITS.prototype.getDataUnit = function(index) {\n      return this.getHDU(index).data;\n    };\n\n    return FITS;\n\n  })(Base);\n\n  FITS.version = '0.6.5';\n\n  astro.FITS = FITS;\n\n  DataUnit = (function(_super) {\n    __extends(DataUnit, _super);\n\n    DataUnit.swapEndian = {\n      B: function(value) {\n        return value;\n      },\n      I: function(value) {\n        return (value << 8) | (value >> 8);\n      },\n      J: function(value) {\n        return ((value & 0xFF) << 24) | ((value & 0xFF00) << 8) | ((value >> 8) & 0xFF00) | ((value >> 24) & 0xFF);\n      }\n    };\n\n    DataUnit.swapEndian[8] = DataUnit.swapEndian['B'];\n\n    DataUnit.swapEndian[16] = DataUnit.swapEndian['I'];\n\n    DataUnit.swapEndian[32] = DataUnit.swapEndian['J'];\n\n    function DataUnit(header, data) {\n      if (data instanceof ArrayBuffer) {\n        this.buffer = data;\n      } else {\n        this.blob = data;\n      }\n    }\n\n    return DataUnit;\n\n  })(Base);\n\n  astro.FITS.DataUnit = DataUnit;\n\n  HeaderVerify = {\n    verifyOrder: function(keyword, order) {\n      if (order !== this.cardIndex) {\n        return console.warn(\"\" + keyword + \" should appear at index \" + this.cardIndex + \" in the FITS header\");\n      }\n    },\n    verifyBetween: function(keyword, value, lower, upper) {\n      if (!(value >= lower && value <= upper)) {\n        throw \"The \" + keyword + \" value of \" + value + \" is not between \" + lower + \" and \" + upper;\n      }\n    },\n    verifyBoolean: function(value) {\n      if (value === \"T\") {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    VerifyFns: {\n      SIMPLE: function() {\n        var args, value;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        value = arguments[0];\n        this.primary = true;\n        this.verifyOrder(\"SIMPLE\", 0);\n        return this.verifyBoolean(value);\n      },\n      XTENSION: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        this.extension = true;\n        this.extensionType = arguments[0];\n        this.verifyOrder(\"XTENSION\", 0);\n        return this.extensionType;\n      },\n      BITPIX: function() {\n        var args, key, value;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        key = \"BITPIX\";\n        value = parseInt(arguments[0]);\n        this.verifyOrder(key, 1);\n        if (value !== 8 && value !== 16 && value !== 32 && value !== (-32) && value !== (-64)) {\n          throw \"\" + key + \" value \" + value + \" is not permitted\";\n        }\n        return value;\n      },\n      NAXIS: function() {\n        var args, array, key, required, value, _ref;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        key = \"NAXIS\";\n        value = parseInt(arguments[0]);\n        array = arguments[1];\n        if (!array) {\n          this.verifyOrder(key, 2);\n          this.verifyBetween(key, value, 0, 999);\n          if (this.isExtension()) {\n            if ((_ref = this.extensionType) === \"TABLE\" || _ref === \"BINTABLE\") {\n              required = 2;\n              if (value !== required) {\n                throw \"\" + key + \" must be \" + required + \" for TABLE and BINTABLE extensions\";\n              }\n            }\n          }\n        }\n        return value;\n      },\n      PCOUNT: function() {\n        var args, key, order, required, value, _ref;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        key = \"PCOUNT\";\n        value = parseInt(arguments[0]);\n        order = 1 + 1 + 1 + this.get(\"NAXIS\");\n        this.verifyOrder(key, order);\n        if (this.isExtension()) {\n          if ((_ref = this.extensionType) === \"IMAGE\" || _ref === \"TABLE\") {\n            required = 0;\n            if (value !== required) {\n              throw \"\" + key + \" must be \" + required + \" for the \" + this.extensionType + \" extensions\";\n            }\n          }\n        }\n        return value;\n      },\n      GCOUNT: function() {\n        var args, key, order, required, value, _ref;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        key = \"GCOUNT\";\n        value = parseInt(arguments[0]);\n        order = 1 + 1 + 1 + this.get(\"NAXIS\") + 1;\n        this.verifyOrder(key, order);\n        if (this.isExtension()) {\n          if ((_ref = this.extensionType) === \"IMAGE\" || _ref === \"TABLE\" || _ref === \"BINTABLE\") {\n            required = 1;\n            if (value !== required) {\n              throw \"\" + key + \" must be \" + required + \" for the \" + this.extensionType + \" extensions\";\n            }\n          }\n        }\n        return value;\n      },\n      EXTEND: function() {\n        var args, value;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        value = arguments[0];\n        if (!this.isPrimary()) {\n          throw \"EXTEND must only appear in the primary header\";\n        }\n        return this.verifyBoolean(value);\n      },\n      BSCALE: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return parseFloat(arguments[0]);\n      },\n      BZERO: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return parseFloat(arguments[0]);\n      },\n      BLANK: function() {\n        var args, value;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        value = arguments[0];\n        if (!(this.get(\"BITPIX\") > 0)) {\n          console.warn(\"BLANK is not to be used for BITPIX = \" + (this.get('BITPIX')));\n        }\n        return parseInt(value);\n      },\n      DATAMIN: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return parseFloat(arguments[0]);\n      },\n      DATAMAX: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return parseFloat(arguments[0]);\n      },\n      EXTVER: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return parseInt(arguments[0]);\n      },\n      EXTLEVEL: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return parseInt(arguments[0]);\n      },\n      TFIELDS: function() {\n        var args, value;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        value = parseInt(arguments[0]);\n        this.verifyBetween(\"TFIELDS\", value, 0, 999);\n        return value;\n      },\n      TBCOL: function() {\n        var args, index, value;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        value = arguments[0];\n        index = arguments[2];\n        this.verifyBetween(\"TBCOL\", index, 0, this.get(\"TFIELDS\"));\n        return value;\n      },\n      ZIMAGE: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return this.verifyBoolean(arguments[0]);\n      },\n      ZCMPTYPE: function() {\n        var args, value;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        value = arguments[0];\n        if (value !== 'GZIP_1' && value !== 'RICE_1' && value !== 'PLIO_1' && value !== 'HCOMPRESS_1') {\n          throw \"ZCMPTYPE value \" + value + \" is not permitted\";\n        }\n        if (value !== 'RICE_1') {\n          throw \"Compress type \" + value + \" is not yet implement\";\n        }\n        return value;\n      },\n      ZBITPIX: function() {\n        var args, value;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        value = parseInt(arguments[0]);\n        if (value !== 8 && value !== 16 && value !== 32 && value !== 64 && value !== (-32) && value !== (-64)) {\n          throw \"ZBITPIX value \" + value + \" is not permitted\";\n        }\n        return value;\n      },\n      ZNAXIS: function() {\n        var args, array, value;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        value = parseInt(arguments[0]);\n        array = arguments[1];\n        value = value;\n        if (!array) {\n          this.verifyBetween(\"ZNAXIS\", value, 0, 999);\n        }\n        return value;\n      },\n      ZTILE: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return parseInt(arguments[0]);\n      },\n      ZSIMPLE: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        if (arguments[0] === \"T\") {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      ZPCOUNT: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return parseInt(arguments[0]);\n      },\n      ZGCOUNT: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return parseInt(arguments[0]);\n      },\n      ZDITHER0: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return parseInt(arguments[0]);\n      }\n    }\n  };\n\n  astro.FITS.HeaderVerify = HeaderVerify;\n\n  Header = (function(_super) {\n    __extends(Header, _super);\n\n    Header.include(HeaderVerify);\n\n    Header.prototype.arrayPattern = /(\\D+)(\\d+)/;\n\n    Header.prototype.maxLines = 600;\n\n    function Header(block) {\n      var method, name, _ref;\n      this.primary = false;\n      this.extension = false;\n      this.verifyCard = {};\n      _ref = this.VerifyFns;\n      for (name in _ref) {\n        method = _ref[name];\n        this.verifyCard[name] = this.proxy(method);\n      }\n      this.cards = {};\n      this.cards[\"COMMENT\"] = [];\n      this.cards[\"HISTORY\"] = [];\n      this.cardIndex = 0;\n      this.block = block;\n      this.readBlock(block);\n    }\n\n    Header.prototype.get = function(key) {\n      if (this.contains(key)) {\n        return this.cards[key].value;\n      } else {\n        return null;\n      }\n    };\n\n    Header.prototype.set = function(key, value, comment) {\n      comment = comment || '';\n      this.cards[key] = {\n        index: this.cardIndex,\n        value: value,\n        comment: comment\n      };\n      return this.cardIndex += 1;\n    };\n\n    Header.prototype.contains = function(key) {\n      return this.cards.hasOwnProperty(key);\n    };\n\n    Header.prototype.readLine = function(l) {\n      var blank, comment, firstByte, indicator, key, value, _ref;\n      key = l.slice(0, 8).trim();\n      blank = key === '';\n      if (blank) {\n        return;\n      }\n      indicator = l.slice(8, 10);\n      value = l.slice(10);\n      if (indicator !== \"= \") {\n        if (key === 'COMMENT' || key === 'HISTORY') {\n          this.cards[key].push(value.trim());\n        }\n        return;\n      }\n      _ref = value.split(' /'), value = _ref[0], comment = _ref[1];\n      value = value.trim();\n      firstByte = value[0];\n      if (firstByte === \"'\") {\n        value = value.slice(1, -1).trim();\n      } else {\n        if (value !== 'T' && value !== 'F') {\n          value = parseFloat(value);\n        }\n      }\n      value = this.validate(key, value);\n      return this.set(key, value, comment);\n    };\n\n    Header.prototype.validate = function(key, value) {\n      var baseKey, index, isArray, match, _ref;\n      index = null;\n      baseKey = key;\n      isArray = this.arrayPattern.test(key);\n      if (isArray) {\n        match = this.arrayPattern.exec(key);\n        _ref = match.slice(1), baseKey = _ref[0], index = _ref[1];\n      }\n      if (baseKey in this.verifyCard) {\n        value = this.verifyCard[baseKey](value, isArray, index);\n      }\n      return value;\n    };\n\n    Header.prototype.readBlock = function(block) {\n      var i, line, lineWidth, nLines, _i, _ref, _results;\n      lineWidth = 80;\n      nLines = block.length / lineWidth;\n      nLines = nLines < this.maxLines ? nLines : this.maxLines;\n      _results = [];\n      for (i = _i = 0, _ref = nLines - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {\n        line = block.slice(i * lineWidth, (i + 1) * lineWidth);\n        _results.push(this.readLine(line));\n      }\n      return _results;\n    };\n\n    Header.prototype.hasDataUnit = function() {\n      if (this.get(\"NAXIS\") === 0) {\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    Header.prototype.getDataLength = function() {\n      var i, length, naxis, _i, _ref;\n      if (!this.hasDataUnit()) {\n        return 0;\n      }\n      naxis = [];\n      for (i = _i = 1, _ref = this.get(\"NAXIS\"); 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {\n        naxis.push(this.get(\"NAXIS\" + i));\n      }\n      length = naxis.reduce(function(a, b) {\n        return a * b;\n      }) * Math.abs(this.get(\"BITPIX\")) / 8;\n      length += this.get(\"PCOUNT\");\n      return length;\n    };\n\n    Header.prototype.getDataType = function() {\n      switch (this.extensionType) {\n        case 'BINTABLE':\n          if (this.contains('ZIMAGE')) {\n            return 'CompressedImage';\n          }\n          return 'BinaryTable';\n        case 'TABLE':\n          return 'Table';\n        default:\n          if (this.hasDataUnit()) {\n            return 'Image';\n          } else {\n            return null;\n          }\n      }\n    };\n\n    Header.prototype.isPrimary = function() {\n      return this.primary;\n    };\n\n    Header.prototype.isExtension = function() {\n      return this.extension;\n    };\n\n    return Header;\n\n  })(Base);\n\n  astro.FITS.Header = Header;\n\n  ImageUtils = {\n    getExtent: function(arr) {\n      var index, max, min, value;\n      index = arr.length;\n      while (index--) {\n        value = arr[index];\n        if (isNaN(value)) {\n          continue;\n        }\n        min = max = value;\n        break;\n      }\n      if (index === -1) {\n        return [NaN, NaN];\n      }\n      while (index--) {\n        value = arr[index];\n        if (isNaN(value)) {\n          continue;\n        }\n        if (value < min) {\n          min = value;\n        }\n        if (value > max) {\n          max = value;\n        }\n      }\n      return [min, max];\n    },\n    getPixel: function(arr, x, y) {\n      return arr[y * this.width + x];\n    }\n  };\n\n  astro.FITS.ImageUtils = ImageUtils;\n\n  Image = (function(_super) {\n    __extends(Image, _super);\n\n    Image.include(ImageUtils);\n\n    Image.prototype.allocationSize = 16777216;\n\n    function Image(header, data) {\n      var begin, frame, i, naxis, _i, _j, _ref;\n      Image.__super__.constructor.apply(this, arguments);\n      naxis = header.get(\"NAXIS\");\n      this.bitpix = header.get(\"BITPIX\");\n      this.naxis = [];\n      for (i = _i = 1; 1 <= naxis ? _i <= naxis : _i >= naxis; i = 1 <= naxis ? ++_i : --_i) {\n        this.naxis.push(header.get(\"NAXIS\" + i));\n      }\n      this.width = header.get(\"NAXIS1\");\n      this.height = header.get(\"NAXIS2\") || 1;\n      this.depth = header.get(\"NAXIS3\") || 1;\n      this.bzero = header.get(\"BZERO\") || 0;\n      this.bscale = header.get(\"BSCALE\") || 1;\n      this.bytes = Math.abs(this.bitpix) / 8;\n      this.length = this.naxis.reduce(function(a, b) {\n        return a * b;\n      }) * Math.abs(this.bitpix) / 8;\n      this.frame = 0;\n      this.frameOffsets = [];\n      this.frameLength = this.bytes * this.width * this.height;\n      this.nBuffers = this.buffer != null ? 1 : 2;\n      for (i = _j = 0, _ref = this.depth - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {\n        begin = i * this.frameLength;\n        frame = {\n          begin: begin\n        };\n        if (this.buffer != null) {\n          frame.buffers = [this.buffer.slice(begin, begin + this.frameLength)];\n        }\n        this.frameOffsets.push(frame);\n      }\n    }\n\n    Image.prototype._getFrame = function(buffer, bitpix, bzero, bscale) {\n      var arr, bytes, dataType, i, nPixels, swapEndian, tmp, value;\n      bytes = Math.abs(bitpix) / 8;\n      nPixels = i = buffer.byteLength / bytes;\n      dataType = Math.abs(bitpix);\n      if (bitpix > 0) {\n        switch (bitpix) {\n          case 8:\n            tmp = new Uint8Array(buffer);\n            tmp = new Uint16Array(tmp);\n            swapEndian = function(value) {\n              return value;\n            };\n            break;\n          case 16:\n            tmp = new Int16Array(buffer);\n            swapEndian = function(value) {\n              return ((value & 0xFF) << 8) | ((value >> 8) & 0xFF);\n            };\n            break;\n          case 32:\n            tmp = new Int32Array(buffer);\n            swapEndian = function(value) {\n              return ((value & 0xFF) << 24) | ((value & 0xFF00) << 8) | ((value >> 8) & 0xFF00) | ((value >> 24) & 0xFF);\n            };\n        }\n        if (!(parseInt(bzero) === bzero && parseInt(bscale) === bscale)) {\n          arr = new Float32Array(tmp.length);\n        } else {\n          arr = tmp;\n        }\n        while (nPixels--) {\n          tmp[nPixels] = swapEndian(tmp[nPixels]);\n          arr[nPixels] = bzero + bscale * tmp[nPixels];\n        }\n      } else {\n        arr = new Uint32Array(buffer);\n        swapEndian = function(value) {\n          return ((value & 0xFF) << 24) | ((value & 0xFF00) << 8) | ((value >> 8) & 0xFF00) | ((value >> 24) & 0xFF);\n        };\n        while (i--) {\n          value = arr[i];\n          arr[i] = swapEndian(value);\n        }\n        arr = new Float32Array(buffer);\n        while (nPixels--) {\n          arr[nPixels] = bzero + bscale * arr[nPixels];\n        }\n      }\n      return arr;\n    };\n\n    Image.prototype._getFrameAsync = function(buffers, callback, opts) {\n      var URL, blobGetFrame, blobOnMessage, fn1, fn2, i, mime, msg, onmessage, pixels, start, urlGetFrame, urlOnMessage, worker,\n        _this = this;\n      onmessage = function(e) {\n        var arr, bitpix, bscale, buffer, bzero, data, url;\n        data = e.data;\n        buffer = data.buffer;\n        bitpix = data.bitpix;\n        bzero = data.bzero;\n        bscale = data.bscale;\n        url = data.url;\n        importScripts(url);\n        arr = _getFrame(buffer, bitpix, bzero, bscale);\n        return postMessage(arr);\n      };\n      fn1 = onmessage.toString().replace('return postMessage', 'postMessage');\n      fn1 = \"onmessage = \" + fn1;\n      fn2 = this._getFrame.toString();\n      fn2 = fn2.replace('function', 'function _getFrame');\n      mime = \"application/javascript\";\n      blobOnMessage = new Blob([fn1], {\n        type: mime\n      });\n      blobGetFrame = new Blob([fn2], {\n        type: mime\n      });\n      URL = window.URL || window.webkitURL;\n      urlOnMessage = URL.createObjectURL(blobOnMessage);\n      urlGetFrame = URL.createObjectURL(blobGetFrame);\n      worker = new Worker(urlOnMessage);\n      msg = {\n        buffer: buffers[0],\n        bitpix: this.bitpix,\n        bzero: this.bzero,\n        bscale: this.bscale,\n        url: urlGetFrame\n      };\n      i = 0;\n      pixels = null;\n      start = 0;\n      worker.onmessage = function(e) {\n        var arr;\n        arr = e.data;\n        if (pixels == null) {\n          pixels = new arr.constructor(_this.width * _this.height);\n        }\n        pixels.set(arr, start);\n        start += arr.length;\n        i += 1;\n        if (i === _this.nBuffers) {\n          _this.invoke(callback, opts, pixels);\n          URL.revokeObjectURL(urlOnMessage);\n          URL.revokeObjectURL(urlGetFrame);\n          return worker.terminate();\n        } else {\n          msg.buffer = buffers[i];\n          return worker.postMessage(msg, [buffers[i]]);\n        }\n      };\n      worker.postMessage(msg, [buffers[0]]);\n    };\n\n    Image.prototype.getFrame = function(frame, callback, opts) {\n      var begin, blobFrame, blobs, buffers, bytesPerBuffer, frameInfo, i, nRowsPerBuffer, reader, start, _i, _ref,\n        _this = this;\n      this.frame = frame || this.frame;\n      frameInfo = this.frameOffsets[this.frame];\n      buffers = frameInfo.buffers;\n      if ((buffers != null ? buffers.length : void 0) === this.nBuffers) {\n        return this._getFrameAsync(buffers, callback, opts);\n      } else {\n        this.frameOffsets[this.frame].buffers = [];\n        begin = frameInfo.begin;\n        blobFrame = this.blob.slice(begin, begin + this.frameLength);\n        blobs = [];\n        nRowsPerBuffer = Math.floor(this.height / this.nBuffers);\n        bytesPerBuffer = nRowsPerBuffer * this.bytes * this.width;\n        for (i = _i = 0, _ref = this.nBuffers - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {\n          start = i * bytesPerBuffer;\n          if (i === this.nBuffers - 1) {\n            blobs.push(blobFrame.slice(start));\n          } else {\n            blobs.push(blobFrame.slice(start, start + bytesPerBuffer));\n          }\n        }\n        buffers = [];\n        reader = new FileReader();\n        reader.frame = this.frame;\n        i = 0;\n        reader.onloadend = function(e) {\n          var buffer;\n          frame = e.target.frame;\n          buffer = e.target.result;\n          _this.frameOffsets[frame].buffers.push(buffer);\n          i += 1;\n          if (i === _this.nBuffers) {\n            return _this.getFrame(frame, callback, opts);\n          } else {\n            return reader.readAsArrayBuffer(blobs[i]);\n          }\n        };\n        return reader.readAsArrayBuffer(blobs[0]);\n      }\n    };\n\n    Image.prototype.getFrames = function(frame, number, callback, opts) {\n      var cb,\n        _this = this;\n      cb = function(arr, opts) {\n        _this.invoke(callback, opts, arr);\n        number -= 1;\n        frame += 1;\n        if (!number) {\n          return;\n        }\n        return _this.getFrame(frame, cb, opts);\n      };\n      return this.getFrame(frame, cb, opts);\n    };\n\n    Image.prototype.isDataCube = function() {\n      if (this.naxis.length > 2) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    return Image;\n\n  })(DataUnit);\n\n  astro.FITS.Image = Image;\n\n  Tabular = (function(_super) {\n    __extends(Tabular, _super);\n\n    Tabular.prototype.maxMemory = 1048576;\n\n    function Tabular(header, data) {\n      Tabular.__super__.constructor.apply(this, arguments);\n      this.rowByteSize = header.get(\"NAXIS1\");\n      this.rows = header.get(\"NAXIS2\");\n      this.cols = header.get(\"TFIELDS\");\n      this.length = this.rowByteSize * this.rows;\n      this.heapLength = header.get(\"PCOUNT\");\n      this.columns = this.getColumns(header);\n      if (this.buffer != null) {\n        this.rowsInMemory = this._rowsInMemoryBuffer;\n        this.heap = this.buffer.slice(this.length, this.length + this.heapLength);\n      } else {\n        this.rowsInMemory = this._rowsInMemoryBlob;\n        this.firstRowInBuffer = this.lastRowInBuffer = 0;\n        this.nRowsInBuffer = Math.floor(this.maxMemory / this.rowByteSize);\n      }\n      this.accessors = [];\n      this.descriptors = [];\n      this.elementByteLengths = [];\n      this.setAccessors(header);\n    }\n\n    Tabular.prototype._rowsInMemoryBuffer = function() {\n      return true;\n    };\n\n    Tabular.prototype._rowsInMemoryBlob = function(firstRow, lastRow) {\n      if (firstRow < this.firstRowInBuffer) {\n        return false;\n      }\n      if (lastRow > this.lastRowInBuffer) {\n        return false;\n      }\n      return true;\n    };\n\n    Tabular.prototype.getColumns = function(header) {\n      var columns, i, key, _i, _ref;\n      columns = [];\n      for (i = _i = 1, _ref = this.cols; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {\n        key = \"TTYPE\" + i;\n        if (!header.contains(key)) {\n          return null;\n        }\n        columns.push(header.get(key));\n      }\n      return columns;\n    };\n\n    Tabular.prototype.getColumn = function(name, callback, opts) {\n      var accessor, cb, column, descriptor, elementByteLength, elementByteOffset, factor, i, index, iterations, rowsPerIteration,\n        _this = this;\n      if (this.blob != null) {\n        index = this.columns.indexOf(name);\n        descriptor = this.descriptors[index];\n        accessor = this.accessors[index];\n        elementByteLength = this.elementByteLengths[index];\n        elementByteOffset = this.elementByteLengths.slice(0, index);\n        if (elementByteOffset.length === 0) {\n          elementByteOffset = 0;\n        } else {\n          elementByteOffset = elementByteOffset.reduce(function(a, b) {\n            return a + b;\n          });\n        }\n        column = this.typedArray[descriptor] != null ? new this.typedArray[descriptor](this.rows) : [];\n        rowsPerIteration = ~~(this.maxMemory / this.rowByteSize);\n        rowsPerIteration = Math.min(rowsPerIteration, this.rows);\n        factor = this.rows / rowsPerIteration;\n        iterations = Math.floor(factor) === factor ? factor : Math.floor(factor) + 1;\n        i = 0;\n        index = 0;\n        cb = function(buffer, opts) {\n          var nRows, offset, startRow, view;\n          nRows = buffer.byteLength / _this.rowByteSize;\n          view = new DataView(buffer);\n          offset = elementByteOffset;\n          while (nRows--) {\n            column[i] = accessor(view, offset)[0];\n            i += 1;\n            offset += _this.rowByteSize;\n          }\n          iterations -= 1;\n          index += 1;\n          if (iterations) {\n            startRow = index * rowsPerIteration;\n            return _this.getTableBuffer(startRow, rowsPerIteration, cb, opts);\n          } else {\n            _this.invoke(callback, opts, column);\n          }\n        };\n        return this.getTableBuffer(0, rowsPerIteration, cb, opts);\n      } else {\n        cb = function(rows, opts) {\n          column = rows.map(function(d) {\n            return d[name];\n          });\n          return _this.invoke(callback, opts, column);\n        };\n        return this.getRows(0, this.rows, cb, opts);\n      }\n    };\n\n    Tabular.prototype.getTableBuffer = function(row, number, callback, opts) {\n      var begin, blobRows, end, reader,\n        _this = this;\n      number = Math.min(this.rows - row, number);\n      begin = row * this.rowByteSize;\n      end = begin + number * this.rowByteSize;\n      blobRows = this.blob.slice(begin, end);\n      reader = new FileReader();\n      reader.row = row;\n      reader.number = number;\n      reader.onloadend = function(e) {\n        return _this.invoke(callback, opts, e.target.result);\n      };\n      return reader.readAsArrayBuffer(blobRows);\n    };\n\n    Tabular.prototype.getRows = function(row, number, callback, opts) {\n      var begin, blobRows, buffer, end, reader, rows,\n        _this = this;\n      if (this.rowsInMemory(row, row + number)) {\n        if (this.blob != null) {\n          buffer = this.buffer;\n        } else {\n          begin = row * this.rowByteSize;\n          end = begin + number * this.rowByteSize;\n          buffer = this.buffer.slice(begin, end);\n        }\n        rows = this._getRows(buffer, number);\n        this.invoke(callback, opts, rows);\n        return rows;\n      } else {\n        begin = row * this.rowByteSize;\n        end = begin + Math.max(this.nRowsInBuffer * this.rowByteSize, number * this.rowByteSize);\n        blobRows = this.blob.slice(begin, end);\n        reader = new FileReader();\n        reader.row = row;\n        reader.number = number;\n        reader.onloadend = function(e) {\n          var target;\n          target = e.target;\n          _this.buffer = target.result;\n          _this.firstRowInBuffer = _this.lastRowInBuffer = target.row;\n          _this.lastRowInBuffer += target.number;\n          return _this.getRows(row, number, callback, opts);\n        };\n        return reader.readAsArrayBuffer(blobRows);\n      }\n    };\n\n    return Tabular;\n\n  })(DataUnit);\n\n  astro.FITS.Tabular = Tabular;\n\n  Table = (function(_super) {\n    __extends(Table, _super);\n\n    function Table() {\n      _ref = Table.__super__.constructor.apply(this, arguments);\n      return _ref;\n    }\n\n    Table.prototype.dataAccessors = {\n      A: function(value) {\n        return value.trim();\n      },\n      I: function(value) {\n        return parseInt(value);\n      },\n      F: function(value) {\n        return parseFloat(value);\n      },\n      E: function(value) {\n        return parseFloat(value);\n      },\n      D: function(value) {\n        return parseFloat(value);\n      }\n    };\n\n    Table.prototype.setAccessors = function(header) {\n      var descriptor, form, i, match, pattern, type, _i, _ref1, _results,\n        _this = this;\n      pattern = /([AIFED])(\\d+)\\.*(\\d+)*/;\n      _results = [];\n      for (i = _i = 1, _ref1 = this.cols; 1 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 1 <= _ref1 ? ++_i : --_i) {\n        form = header.get(\"TFORM\" + i);\n        type = header.get(\"TTYPE\" + i);\n        match = pattern.exec(form);\n        descriptor = match[1];\n        _results.push((function(descriptor) {\n          var accessor;\n          accessor = function(value) {\n            return _this.dataAccessors[descriptor](value);\n          };\n          return _this.accessors.push(accessor);\n        })(descriptor));\n      }\n      return _results;\n    };\n\n    Table.prototype._getRows = function(buffer) {\n      var accessor, arr, begin, end, i, index, line, nRows, row, rows, subarray, value, _i, _j, _k, _len, _len1, _ref1, _ref2;\n      nRows = buffer.byteLength / this.rowByteSize;\n      arr = new Uint8Array(buffer);\n      rows = [];\n      for (i = _i = 0, _ref1 = nRows - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {\n        begin = i * this.rowByteSize;\n        end = begin + this.rowByteSize;\n        subarray = arr.subarray(begin, end);\n        line = '';\n        for (_j = 0, _len = subarray.length; _j < _len; _j++) {\n          value = subarray[_j];\n          line += String.fromCharCode(value);\n        }\n        line = line.trim().split(/\\s+/);\n        row = {};\n        _ref2 = this.accessors;\n        for (index = _k = 0, _len1 = _ref2.length; _k < _len1; index = ++_k) {\n          accessor = _ref2[index];\n          value = line[index];\n          row[this.columns[index]] = accessor(value);\n        }\n        rows.push(row);\n      }\n      return rows;\n    };\n\n    return Table;\n\n  })(Tabular);\n\n  astro.FITS.Table = Table;\n\n  BinaryTable = (function(_super) {\n    __extends(BinaryTable, _super);\n\n    function BinaryTable() {\n      _ref1 = BinaryTable.__super__.constructor.apply(this, arguments);\n      return _ref1;\n    }\n\n    BinaryTable.prototype.typedArray = {\n      B: Uint8Array,\n      I: Uint16Array,\n      J: Uint32Array,\n      E: Float32Array,\n      D: Float64Array,\n      1: Uint8Array,\n      2: Uint16Array,\n      4: Uint32Array\n    };\n\n    BinaryTable.offsets = {\n      L: 1,\n      B: 1,\n      I: 2,\n      J: 4,\n      K: 8,\n      A: 1,\n      E: 4,\n      D: 8,\n      C: 8,\n      M: 16\n    };\n\n    BinaryTable.prototype.dataAccessors = {\n      L: function(view, offset) {\n        var val, x;\n        x = view.getInt8(offset);\n        offset += 1;\n        val = x === 84 ? true : false;\n        return [val, offset];\n      },\n      B: function(view, offset) {\n        var val;\n        val = view.getUint8(offset);\n        offset += 1;\n        return [val, offset];\n      },\n      I: function(view, offset) {\n        var val;\n        val = view.getInt16(offset);\n        offset += 2;\n        return [val, offset];\n      },\n      J: function(view, offset) {\n        var val;\n        val = view.getInt32(offset);\n        offset += 4;\n        return [val, offset];\n      },\n      K: function(view, offset) {\n        var factor, highByte, lowByte, mod, val;\n        highByte = Math.abs(view.getInt32(offset));\n        offset += 4;\n        lowByte = Math.abs(view.getInt32(offset));\n        offset += 4;\n        mod = highByte % 10;\n        factor = mod ? -1 : 1;\n        highByte -= mod;\n        val = factor * ((highByte << 32) | lowByte);\n        return [val, offset];\n      },\n      A: function(view, offset) {\n        var val;\n        val = view.getUint8(offset);\n        val = String.fromCharCode(val);\n        offset += 1;\n        return [val, offset];\n      },\n      E: function(view, offset) {\n        var val;\n        val = view.getFloat32(offset);\n        offset += 4;\n        return [val, offset];\n      },\n      D: function(view, offset) {\n        var val;\n        val = view.getFloat64(offset);\n        offset += 8;\n        return [val, offset];\n      },\n      C: function(view, offset) {\n        var val, val1, val2;\n        val1 = view.getFloat32(offset);\n        offset += 4;\n        val2 = view.getFloat32(offset);\n        offset += 4;\n        val = [val1, val2];\n        return [val, offset];\n      },\n      M: function(view, offset) {\n        var val, val1, val2;\n        val1 = view.getFloat64(offset);\n        offset += 8;\n        val2 = view.getFloat64(offset);\n        offset += 8;\n        val = [val1, val2];\n        return [val, offset];\n      }\n    };\n\n    BinaryTable.prototype.toBits = function(byte) {\n      var arr, i;\n      arr = [];\n      i = 128;\n      while (i >= 1) {\n        arr.push((byte & i ? 1 : 0));\n        i /= 2;\n      }\n      return arr;\n    };\n\n    BinaryTable.prototype.getFromHeap = function(view, offset, descriptor) {\n      var arr, heapOffset, heapSlice, i, length;\n      length = view.getInt32(offset);\n      offset += 4;\n      heapOffset = view.getInt32(offset);\n      offset += 4;\n      heapSlice = this.heap.slice(heapOffset, heapOffset + length);\n      arr = new this.typedArray[descriptor](heapSlice);\n      i = arr.length;\n      while (i--) {\n        arr[i] = this.constructor.swapEndian[descriptor](arr[i]);\n      }\n      return [arr, offset];\n    };\n\n    BinaryTable.prototype.setAccessors = function(header) {\n      var count, descriptor, form, i, isArray, match, pattern, type, _i, _ref2, _results,\n        _this = this;\n      pattern = /(\\d*)([P|Q]*)([L|X|B|I|J|K|A|E|D|C|M]{1})/;\n      _results = [];\n      for (i = _i = 1, _ref2 = this.cols; 1 <= _ref2 ? _i <= _ref2 : _i >= _ref2; i = 1 <= _ref2 ? ++_i : --_i) {\n        form = header.get(\"TFORM\" + i);\n        type = header.get(\"TTYPE\" + i);\n        match = pattern.exec(form);\n        count = parseInt(match[1]) || 1;\n        isArray = match[2];\n        descriptor = match[3];\n        _results.push((function(descriptor, count) {\n          var accessor, nBytes;\n          _this.descriptors.push(descriptor);\n          _this.elementByteLengths.push(_this.constructor.offsets[descriptor] * count);\n          if (isArray) {\n            switch (type) {\n              case \"COMPRESSED_DATA\":\n                accessor = function(view, offset) {\n                  var arr, pixels, _ref3;\n                  _ref3 = _this.getFromHeap(view, offset, descriptor), arr = _ref3[0], offset = _ref3[1];\n                  pixels = new _this.typedArray[_this.algorithmParameters[\"BYTEPIX\"]](_this.ztile[0]);\n                  Decompress.Rice(arr, _this.algorithmParameters[\"BLOCKSIZE\"], _this.algorithmParameters[\"BYTEPIX\"], pixels, _this.ztile[0], Decompress.RiceSetup);\n                  return [pixels, offset];\n                };\n                break;\n              case \"GZIP_COMPRESSED_DATA\":\n                accessor = function(view, offset) {\n                  var arr;\n                  arr = new Float32Array(_this.width);\n                  i = arr.length;\n                  while (i--) {\n                    arr[i] = NaN;\n                  }\n                  return [arr, offset];\n                };\n                break;\n              default:\n                accessor = function(view, offset) {\n                  return _this.getFromHeap(view, offset, descriptor);\n                };\n            }\n          } else {\n            if (count === 1) {\n              accessor = function(view, offset) {\n                var value, _ref3;\n                _ref3 = _this.dataAccessors[descriptor](view, offset), value = _ref3[0], offset = _ref3[1];\n                return [value, offset];\n              };\n            } else {\n              if (descriptor === 'X') {\n                nBytes = Math.log(count) / Math.log(2);\n                accessor = function(view, offset) {\n                  var arr, bits, buffer, byte, bytes, _j, _len;\n                  buffer = view.buffer.slice(offset, offset + nBytes);\n                  bytes = new Uint8Array(buffer);\n                  bits = [];\n                  for (_j = 0, _len = bytes.length; _j < _len; _j++) {\n                    byte = bytes[_j];\n                    arr = _this.toBits(byte);\n                    bits = bits.concat(arr);\n                  }\n                  offset += nBytes;\n                  return [bits.slice(0, +(count - 1) + 1 || 9e9), offset];\n                };\n              } else if (descriptor === 'A') {\n                accessor = function(view, offset) {\n                  var arr, buffer, s, value, _j, _len;\n                  buffer = view.buffer.slice(offset, offset + count);\n                  arr = new Uint8Array(buffer);\n                  s = '';\n                  for (_j = 0, _len = arr.length; _j < _len; _j++) {\n                    value = arr[_j];\n                    s += String.fromCharCode(value);\n                  }\n                  s = s.trim();\n                  offset += count;\n                  return [s, offset];\n                };\n              } else {\n                accessor = function(view, offset) {\n                  var data, value, _ref3;\n                  i = count;\n                  data = [];\n                  while (i--) {\n                    _ref3 = _this.dataAccessors[descriptor](view, offset), value = _ref3[0], offset = _ref3[1];\n                    data.push(value);\n                  }\n                  return [data, offset];\n                };\n              }\n            }\n          }\n          return _this.accessors.push(accessor);\n        })(descriptor, count));\n      }\n      return _results;\n    };\n\n    BinaryTable.prototype._getRows = function(buffer, nRows) {\n      var accessor, index, offset, row, rows, value, view, _i, _len, _ref2, _ref3;\n      view = new DataView(buffer);\n      offset = 0;\n      rows = [];\n      while (nRows--) {\n        row = {};\n        _ref2 = this.accessors;\n        for (index = _i = 0, _len = _ref2.length; _i < _len; index = ++_i) {\n          accessor = _ref2[index];\n          _ref3 = accessor(view, offset), value = _ref3[0], offset = _ref3[1];\n          row[this.columns[index]] = value;\n        }\n        rows.push(row);\n      }\n      return rows;\n    };\n\n    return BinaryTable;\n\n  })(Tabular);\n\n  astro.FITS.BinaryTable = BinaryTable;\n\n  Decompress = {\n    RiceSetup: {\n      1: function(array) {\n        var fsbits, fsmax, lastpix, pointer;\n        pointer = 1;\n        fsbits = 3;\n        fsmax = 6;\n        lastpix = array[0];\n        return [fsbits, fsmax, lastpix, pointer];\n      },\n      2: function(array) {\n        var bytevalue, fsbits, fsmax, lastpix, pointer;\n        pointer = 2;\n        fsbits = 4;\n        fsmax = 14;\n        lastpix = 0;\n        bytevalue = array[0];\n        lastpix = lastpix | (bytevalue << 8);\n        bytevalue = array[1];\n        lastpix = lastpix | bytevalue;\n        return [fsbits, fsmax, lastpix, pointer];\n      },\n      4: function(array) {\n        var bytevalue, fsbits, fsmax, lastpix, pointer;\n        pointer = 4;\n        fsbits = 5;\n        fsmax = 25;\n        lastpix = 0;\n        bytevalue = array[0];\n        lastpix = lastpix | (bytevalue << 24);\n        bytevalue = array[1];\n        lastpix = lastpix | (bytevalue << 16);\n        bytevalue = array[2];\n        lastpix = lastpix | (bytevalue << 8);\n        bytevalue = array[3];\n        lastpix = lastpix | bytevalue;\n        return [fsbits, fsmax, lastpix, pointer];\n      }\n    },\n    Rice: function(array, blocksize, bytepix, pixels, nx, setup) {\n      var b, bbits, diff, fs, fsbits, fsmax, i, imax, k, lastpix, nbits, nonzeroCount, nzero, pointer, _ref2, _ref3;\n      bbits = 1 << fsbits;\n      _ref2 = setup[bytepix](array), fsbits = _ref2[0], fsmax = _ref2[1], lastpix = _ref2[2], pointer = _ref2[3];\n      nonzeroCount = new Uint8Array(256);\n      nzero = 8;\n      _ref3 = [128, 255], k = _ref3[0], i = _ref3[1];\n      while (i >= 0) {\n        while (i >= k) {\n          nonzeroCount[i] = nzero;\n          i -= 1;\n        }\n        k = k / 2;\n        nzero -= 1;\n      }\n      nonzeroCount[0] = 0;\n      b = array[pointer++];\n      nbits = 8;\n      i = 0;\n      while (i < nx) {\n        nbits -= fsbits;\n        while (nbits < 0) {\n          b = (b << 8) | array[pointer++];\n          nbits += 8;\n        }\n        fs = (b >> nbits) - 1;\n        b &= (1 << nbits) - 1;\n        imax = i + blocksize;\n        if (imax > nx) {\n          imax = nx;\n        }\n        if (fs < 0) {\n          while (i < imax) {\n            pixels[i] = lastpix;\n            i += 1;\n          }\n        } else if (fs === fsmax) {\n          while (i < imax) {\n            k = bbits - nbits;\n            diff = b << k;\n            k -= 8;\n            while (k >= 0) {\n              b = array[pointer++];\n              diff |= b << k;\n              k -= 8;\n            }\n            if (nbits > 0) {\n              b = array[pointer++];\n              diff |= b >> (-k);\n              b &= (1 << nbits) - 1;\n            } else {\n              b = 0;\n            }\n            if ((diff & 1) === 0) {\n              diff = diff >> 1;\n            } else {\n              diff = ~(diff >> 1);\n            }\n            pixels[i] = diff + lastpix;\n            lastpix = pixels[i];\n            i++;\n          }\n        } else {\n          while (i < imax) {\n            while (b === 0) {\n              nbits += 8;\n              b = array[pointer++];\n            }\n            nzero = nbits - nonzeroCount[b];\n            nbits -= nzero + 1;\n            b ^= 1 << nbits;\n            nbits -= fs;\n            while (nbits < 0) {\n              b = (b << 8) | array[pointer++];\n              nbits += 8;\n            }\n            diff = (nzero << fs) | (b >> nbits);\n            b &= (1 << nbits) - 1;\n            if ((diff & 1) === 0) {\n              diff = diff >> 1;\n            } else {\n              diff = ~(diff >> 1);\n            }\n            pixels[i] = diff + lastpix;\n            lastpix = pixels[i];\n            i++;\n          }\n        }\n      }\n      return pixels;\n    }\n  };\n\n  astro.FITS.Decompress = Decompress;\n\n  CompressedImage = (function(_super) {\n    __extends(CompressedImage, _super);\n\n    CompressedImage.include(ImageUtils);\n\n    CompressedImage.extend(Decompress);\n\n    CompressedImage.randomGenerator = function() {\n      var a, i, m, random, seed, temp, _i;\n      a = 16807;\n      m = 2147483647;\n      seed = 1;\n      random = new Float32Array(10000);\n      for (i = _i = 0; _i <= 9999; i = ++_i) {\n        temp = a * seed;\n        seed = temp - m * parseInt(temp / m);\n        random[i] = seed / m;\n      }\n      return random;\n    };\n\n    CompressedImage.randomSequence = CompressedImage.randomGenerator();\n\n    function CompressedImage(header, data) {\n      var i, key, value, ztile, _i, _ref2;\n      CompressedImage.__super__.constructor.apply(this, arguments);\n      this.zcmptype = header.get(\"ZCMPTYPE\");\n      this.zbitpix = header.get(\"ZBITPIX\");\n      this.znaxis = header.get(\"ZNAXIS\");\n      this.zblank = header.get(\"ZBLANK\");\n      this.blank = header.get(\"BLANK\");\n      this.zdither = header.get('ZDITHER0') || 0;\n      this.ztile = [];\n      for (i = _i = 1, _ref2 = this.znaxis; 1 <= _ref2 ? _i <= _ref2 : _i >= _ref2; i = 1 <= _ref2 ? ++_i : --_i) {\n        ztile = header.contains(\"ZTILE\" + i) ? header.get(\"ZTILE\" + i) : i === 1 ? header.get(\"ZNAXIS1\") : 1;\n        this.ztile.push(ztile);\n      }\n      this.width = header.get(\"ZNAXIS1\");\n      this.height = header.get(\"ZNAXIS2\") || 1;\n      this.algorithmParameters = {};\n      if (this.zcmptype === 'RICE_1') {\n        this.algorithmParameters[\"BLOCKSIZE\"] = 32;\n        this.algorithmParameters[\"BYTEPIX\"] = 4;\n      }\n      i = 1;\n      while (true) {\n        key = \"ZNAME\" + i;\n        if (!header.contains(key)) {\n          break;\n        }\n        value = \"ZVAL\" + i;\n        this.algorithmParameters[header.get(key)] = header.get(value);\n        i += 1;\n      }\n      this.zmaskcmp = header.get(\"ZMASKCMP\");\n      this.zquantiz = header.get(\"ZQUANTIZ\") || \"LINEAR_SCALING\";\n      this.bzero = header.get(\"BZERO\") || 0;\n      this.bscale = header.get(\"BSCALE\") || 1;\n    }\n\n    CompressedImage.prototype._getRows = function(buffer, nRows) {\n      var accessor, arr, blank, data, i, index, nTile, offset, r, rIndex, row, scale, seed0, seed1, value, view, zero, _i, _j, _len, _len1, _ref2, _ref3;\n      view = new DataView(buffer);\n      offset = 0;\n      arr = new Float32Array(this.width * this.height);\n      while (nRows--) {\n        row = {};\n        _ref2 = this.accessors;\n        for (index = _i = 0, _len = _ref2.length; _i < _len; index = ++_i) {\n          accessor = _ref2[index];\n          _ref3 = accessor(view, offset), value = _ref3[0], offset = _ref3[1];\n          row[this.columns[index]] = value;\n        }\n        data = row['COMPRESSED_DATA'] || row['UNCOMPRESSED_DATA'] || row['GZIP_COMPRESSED_DATA'];\n        blank = row['ZBLANK'] || this.zblank;\n        scale = row['ZSCALE'] || this.bscale;\n        zero = row['ZZERO'] || this.bzero;\n        nTile = this.height - nRows;\n        seed0 = nTile + this.zdither - 1;\n        seed1 = (seed0 - 1) % 10000;\n        rIndex = parseInt(this.constructor.randomSequence[seed1] * 500);\n        for (index = _j = 0, _len1 = data.length; _j < _len1; index = ++_j) {\n          value = data[index];\n          i = (nTile - 1) * this.width + index;\n          if (value === -2147483647) {\n            arr[i] = NaN;\n          } else if (value === -2147483646) {\n            arr[i] = 0;\n          } else {\n            r = this.constructor.randomSequence[rIndex];\n            arr[i] = (value - r + 0.5) * scale + zero;\n          }\n          rIndex += 1;\n          if (rIndex === 10000) {\n            seed1 = (seed1 + 1) % 10000;\n            rIndex = parseInt(this.randomSequence[seed1] * 500);\n          }\n        }\n      }\n      return arr;\n    };\n\n    CompressedImage.prototype.getFrame = function(nFrame, callback, opts) {\n      var heapBlob, reader,\n        _this = this;\n      if (this.heap) {\n        this.frame = nFrame || this.frame;\n        return this.getRows(0, this.rows, callback, opts);\n      } else {\n        heapBlob = this.blob.slice(this.length, this.length + this.heapLength);\n        reader = new FileReader();\n        reader.onloadend = function(e) {\n          _this.heap = e.target.result;\n          return _this.getFrame(nFrame, callback, opts);\n        };\n        return reader.readAsArrayBuffer(heapBlob);\n      }\n    };\n\n    return CompressedImage;\n\n  })(BinaryTable);\n\n  astro.FITS.CompressedImage = CompressedImage;\n\n  HDU = (function() {\n    function HDU(header, data) {\n      this.header = header;\n      this.data = data;\n    }\n\n    HDU.prototype.hasData = function() {\n      if (this.data != null) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    return HDU;\n\n  })();\n\n  astro.FITS.HDU = HDU;\n\n  return astro;\n\n})();\n","/******************************************************************************\n * Aladin Lite project\n * \n * File MOC\n *\n * This class represents a MOC (Multi Order Coverage map) layer\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nimport { SpatialVector }   from \"./libs/healpix.js\";\nimport { astro }   from \"./libs/fits.js\";\nimport { CooFrameEnum }   from \"./CooFrameEnum.js\";\nimport { HealpixCache }   from \"./HealpixCache.js\";\nimport { Aladin }   from \"./Aladin.js\";\nimport { ProjectionEnum } from \"./ProjectionEnum.js\";\nimport { AladinUtils }   from \"./AladinUtils.js\";\nimport { CooConversion }   from \"./CooConversion.js\";\n\n\nexport let MOC = (function() {\n    let MOC = function(options) {\n        this.order = undefined;\n\n        this.type = 'moc';\n\n        // TODO homogenize options parsing for all kind of overlay (footprints, catalog, MOC)\n        options = options || {};\n        this.name = options.name || \"MOC\";\n        this.color = options.color || Color.getNextColor();\n        this.opacity = options.opacity || 1;\n        this.opacity = Math.max(0, Math.min(1, this.opacity)); // 0 <= this.opacity <= 1\n        this.lineWidth = options[\"lineWidth\"] || 1;\n        this.adaptativeDisplay = options['adaptativeDisplay'] !== false;\n\n        this.proxyCalled = false; // this is a flag to check whether we already tried to load the MOC through the proxy\n\n        // index of MOC cells at high and low resolution\n        this._highResIndexOrder3 = new Array(768);\n        this._lowResIndexOrder3 = new Array(768);\n        for (var k=0; k<768; k++) {\n            this._highResIndexOrder3[k] = {};\n            this._lowResIndexOrder3[k] = {};\n        }\n\n        this.nbCellsDeepestLevel = 0; // needed to compute the sky fraction of the MOC\n\n        this.isShowing = true;\n        this.ready = false;\n    }\n\n    \n    function log2(val) {\n        return Math.log(val) / Math.LN2;\n    }\n\n    // max norder we can currently handle (limitation of healpix.js)\n    MOC.MAX_NORDER = 13; // NSIDE = 8192\n\n    MOC.LOWRES_MAXORDER = 6; // 5 or 6 ??\n    MOC.HIGHRES_MAXORDER = 11; // ??\n\n    // TODO: options to modifiy this ?\n    MOC.PIVOT_FOV = 30; // when do we switch from low res cells to high res cells (fov in degrees)\n\n    // at end of parsing, we need to remove duplicates from the 2 indexes\n    MOC.prototype._removeDuplicatesFromIndexes = function() {\n        var a, aDedup;\n        for (var k=0; k<768; k++) {\n            for (var key in this._highResIndexOrder3[k]) {\n                a = this._highResIndexOrder3[k][key];\n                aDedup = uniq(a);\n                this._highResIndexOrder3[k][key] = aDedup;\n            }\n            for (var key in this._lowResIndexOrder3[k]) {\n                a = this._lowResIndexOrder3[k][key];\n                aDedup = uniq(a);\n                this._lowResIndexOrder3[k][key] = aDedup;\n            }\n        }\n        \n    }\n\n    // add pixel (order, ipix)\n    MOC.prototype._addPix = function(order, ipix) {\n        var ipixOrder3 = Math.floor( ipix * Math.pow(4, (3 - order)) );\n        // fill low and high level cells\n        // 1. if order <= LOWRES_MAXORDER, just store value in low and high res cells\n        if (order<=MOC.LOWRES_MAXORDER) {\n            if (! (order in this._lowResIndexOrder3[ipixOrder3])) {\n                this._lowResIndexOrder3[ipixOrder3][order] = [];\n                this._highResIndexOrder3[ipixOrder3][order] = [];\n            }\n            this._lowResIndexOrder3[ipixOrder3][order].push(ipix);\n            this._highResIndexOrder3[ipixOrder3][order].push(ipix);\n        }\n        // 2. if LOWRES_MAXORDER < order <= HIGHRES_MAXORDER , degrade ipix for low res cells\n        else if (order<=MOC.HIGHRES_MAXORDER) {\n            if (! (order in this._highResIndexOrder3[ipixOrder3])) {\n                this._highResIndexOrder3[ipixOrder3][order] = [];\n            }\n            this._highResIndexOrder3[ipixOrder3][order].push(ipix);\n            \n            var degradedOrder = MOC.LOWRES_MAXORDER; \n            var degradedIpix  = Math.floor(ipix / Math.pow(4, (order - degradedOrder)));\n            var degradedIpixOrder3 = Math.floor( degradedIpix * Math.pow(4, (3 - degradedOrder)) );\n            if (! (degradedOrder in this._lowResIndexOrder3[degradedIpixOrder3])) {\n                this._lowResIndexOrder3[degradedIpixOrder3][degradedOrder]= [];\n            }\n            this._lowResIndexOrder3[degradedIpixOrder3][degradedOrder].push(degradedIpix);\n        }\n        // 3. if order > HIGHRES_MAXORDER , degrade ipix for low res and high res cells\n        else {\n            // low res cells\n            var degradedOrder = MOC.LOWRES_MAXORDER; \n            var degradedIpix  = Math.floor(ipix / Math.pow(4, (order - degradedOrder)));\n            var degradedIpixOrder3 = Math.floor(degradedIpix * Math.pow(4, (3 - degradedOrder)) );\n            if (! (degradedOrder in this._lowResIndexOrder3[degradedIpixOrder3])) {\n                this._lowResIndexOrder3[degradedIpixOrder3][degradedOrder]= [];\n            }\n            this._lowResIndexOrder3[degradedIpixOrder3][degradedOrder].push(degradedIpix);\n\n            \n            // high res cells\n            degradedOrder = MOC.HIGHRES_MAXORDER; \n            degradedIpix  = Math.floor(ipix / Math.pow(4, (order - degradedOrder)));\n            var degradedIpixOrder3 = Math.floor(degradedIpix * Math.pow(4, (3 - degradedOrder)) );\n            if (! (degradedOrder in this._highResIndexOrder3[degradedIpixOrder3])) {\n                this._highResIndexOrder3[degradedIpixOrder3][degradedOrder]= [];\n            }\n            this._highResIndexOrder3[degradedIpixOrder3][degradedOrder].push(degradedIpix);\n        }\n\n        this.nbCellsDeepestLevel += Math.pow(4, (this.order - order));\n    };\n\n\n    /**\n     *  Return a value between 0 and 1 denoting the fraction of the sky\n     *  covered by the MOC\n     */\n    MOC.prototype.skyFraction = function() {\n        return this.nbCellsDeepestLevel / (12 * Math.pow(4, this.order));\n    };\n\n    /**\n     * set MOC data by parsing a MOC serialized in JSON\n     * (as defined in IVOA MOC document, section 3.1.1)\n     */\n    MOC.prototype.dataFromJSON = function(jsonMOC) {\n        var order, ipix;\n        for (var orderStr in jsonMOC) {\n            if (jsonMOC.hasOwnProperty(orderStr)) {\n                order = parseInt(orderStr);\n                if (this.order===undefined || order > this.order) {\n                    this.order = order;\n                }\n                for (var k=0; k<jsonMOC[orderStr].length; k++) {\n                    ipix = jsonMOC[orderStr][k];\n                    this._addPix(order, ipix);\n                }\n            }\n        }\n\n        this.reportChange();\n        this.ready = true;\n    };\n\n    /**\n     * set MOC data by parsing a URL pointing to a FITS MOC file\n     */\n    MOC.prototype.dataFromFITSURL = function(mocURL, successCallback) {\n        var self = this;\n        var callback = function() {\n            // note: in the callback, 'this' refers to the FITS instance\n\n            // first, let's find MOC norder\n            var hdr0;\n            try {\n                // A zero-length hdus array might mean the served URL does not have CORS header\n                // --> let's try again through the proxy\n                if (this.hdus.length == 0) {\n                    if (self.proxyCalled !== true) {\n                        self.proxyCalled = true;\n                        var proxiedURL = Aladin.JSONP_PROXY + '?url=' + encodeURIComponent(self.dataURL);\n                        new astro.FITS(proxiedURL, callback);\n                    }\n\n                    return;\n                }\n                hdr0 = this.getHeader(0);\n            }\n            catch (e) {\n                console.error('Could not get header of extension #0');\n                return;\n            }\n            var hdr1 = this.getHeader(1);\n\n            if (hdr0.contains('HPXMOC')) {\n                self.order = hdr0.get('HPXMOC')\n            }\n            else if (hdr0.contains('MOCORDER')) {\n                self.order = hdr0.get('MOCORDER')\n            }\n            else if (hdr1.contains('HPXMOC')) {\n                self.order = hdr1.get('HPXMOC')\n            }\n            else if (hdr1.contains('MOCORDER')) {\n                self.order = hdr1.get('MOCORDER')\n            }\n            else {\n                console.error('Can not find MOC order in FITS file');\n                return;\n            }\n\n\n            var data = this.getDataUnit(1);\n            var colName = data.columns[0];\n            data.getRows(0, data.rows, function(rows) {\n                for (var k=0; k<rows.length; k++) {\n                    var uniq = rows[k][colName];\n                    var order = Math.floor(Math.floor(log2(Math.floor(uniq/4))) / 2);\n                    var ipix = uniq - 4 *(Math.pow(4, order));\n\n\n\n                    self._addPix(order, ipix);\n                }\n\n            });\n            data = null; // this helps releasing memory\n\n            self._removeDuplicatesFromIndexes();\n\n            if (successCallback) {\n                successCallback();\n            }\n\n            self.reportChange();\n            self.ready = true;\n        }; // end of callback function\n\n        this.dataURL = mocURL;\n\n        // instantiate the FITS object which will fetch the URL passed as parameter\n        new astro.FITS(this.dataURL, callback);\n    };\n\n    MOC.prototype.setView = function(view) {\n        this.view = view;\n        this.reportChange();\n    };\n    \n    MOC.prototype.draw = function(ctx, projection, viewFrame, width, height, largestDim, zoomFactor, fov) {\n        if (! this.isShowing || ! this.ready) {\n            return;\n        }\n        var mocCells = fov > MOC.PIVOT_FOV && this.adaptativeDisplay ? this._lowResIndexOrder3 : this._highResIndexOrder3;\n\n        this._drawCells(ctx, mocCells, fov, projection, viewFrame, CooFrameEnum.J2000, width, height, largestDim, zoomFactor);\n    };\n\n    MOC.prototype._drawCells = function(ctx, mocCellsIdxOrder3, fov, projection, viewFrame, surveyFrame, width, height, largestDim, zoomFactor) {\n        ctx.lineWidth = this.lineWidth;\n        // if opacity==1, we draw solid lines, else we fill each HEALPix cell\n        if (this.opacity==1) {\n            ctx.strokeStyle = this.color;\n        }\n        else {\n            ctx.fillStyle = this.color;\n            ctx.globalAlpha = this.opacity;\n        }\n\n\n        ctx.beginPath();\n\n        var orderedKeys = [];\n        for (var k=0; k<768; k++) {\n            var mocCells = mocCellsIdxOrder3[k];\n            for (var key in mocCells) {\n                orderedKeys.push(parseInt(key));\n            }\n        }\n        orderedKeys.sort(function(a, b) {return a - b;});\n        var norderMax = orderedKeys[orderedKeys.length-1];\n\n        var nside, xyCorners, ipix;\n        var potentialVisibleHpxCellsOrder3 = this.view.getVisiblePixList(3, CooFrameEnum.J2000);\n        var visibleHpxCellsOrder3 = [];\n        // let's test first all potential visible cells and keep only the one with a projection inside the view\n        for (var k=0; k<potentialVisibleHpxCellsOrder3.length; k++) {\n            var ipix = potentialVisibleHpxCellsOrder3[k];\n            xyCorners = getXYCorners(8, ipix, viewFrame, surveyFrame, width, height, largestDim, zoomFactor, projection, this.view);\n            if (xyCorners) {\n                visibleHpxCellsOrder3.push(ipix);\n            }\n        }\n\n        var counter = 0;\n        var mocCells;\n        var norder3Ipix;\n        for (var norder=0; norder<=norderMax; norder++) {\n            nside = 1 << norder;\n\n            for (var i=0; i<visibleHpxCellsOrder3.length; i++) {\n                var ipixOrder3 = visibleHpxCellsOrder3[i];\n                mocCells = mocCellsIdxOrder3[ipixOrder3];\n                if (typeof mocCells[norder]==='undefined') {\n                    continue;\n                }\n            \n                if (norder<=3) {\n                    for (var j=0; j<mocCells[norder].length; j++) {\n                        ipix = mocCells[norder][j];\n                        var factor = Math.pow(4, (3-norder));\n                        var startIpix = ipix * factor;\n                        for (var k=0; k<factor; k++) {\n                            norder3Ipix = startIpix + k;\n                            xyCorners = getXYCorners(8, norder3Ipix, viewFrame, surveyFrame, width, height, largestDim, zoomFactor, projection, this.view);\n                            if (xyCorners) {\n                                drawCorners(ctx, xyCorners);\n                            }\n                        }\n                    }\n                }\n                else {\n                    for (var j=0; j<mocCells[norder].length; j++) {\n                        ipix = mocCells[norder][j];\n                        var parentIpixOrder3 = Math.floor(ipix/Math.pow(4, norder-3));\n                        xyCorners = getXYCorners(nside, ipix, viewFrame, surveyFrame, width, height, largestDim, zoomFactor, projection, this.view);\n                        if (xyCorners) {\n                            drawCorners(ctx, xyCorners);\n                        }\n                    }\n                }\n            }\n        }\n\n\n        if (this.opacity==1) {\n            ctx.stroke();\n        }\n        else {\n            ctx.fill();\n            ctx.globalAlpha = 1.0;\n        }\n    };\n\n    var drawCorners = function(ctx, xyCorners) {\n        //console.log(xyCorners);\n        ctx.moveTo(xyCorners[0].vx, xyCorners[0].vy);\n        ctx.lineTo(xyCorners[1].vx, xyCorners[1].vy);\n        ctx.lineTo(xyCorners[2].vx, xyCorners[2].vy);\n        ctx.lineTo(xyCorners[3].vx, xyCorners[3].vy);\n        ctx.lineTo(xyCorners[0].vx, xyCorners[0].vy);\n    }\n\n    // remove duplicate items from array a\n    var uniq = function(a) {\n        var seen = {};\n        var out = [];\n        var len = a.length;\n        var j = 0;\n        for (var i = 0; i < len; i++) {\n            var item = a[i];\n            if (seen[item] !== 1) {\n                seen[item] = 1;\n                out[j++] = item;\n            }\n        }\n\n        return out;\n    };\n\n\n    // TODO: merge with what is done in View.getVisibleCells\n    //var _spVec = new SpatialVector();\n    var getXYCorners = function(nside, ipix, viewFrame, surveyFrame, width, height, largestDim, zoomFactor, projection, view) {\n        var cornersXYView = [];\n        var cornersXY = [];\n\n        //var spVec = _spVec;\n\n        //var corners = HealpixCache.corners_nest(ipix, nside);\n        var corners = Aladin.wasmLibs.hpx.nestedVertices(Math.log2(nside), ipix);\n\n        var ra, dec;\n        var lon, lat;\n        for (var k=0; k<4; k++) {\n            //spVec.setXYZ(corners[k].x, corners[k].y, corners[k].z);\n\n            ra = corners[2*k];\n            dec = corners[2*k + 1];\n            // need for frame transformation ?\n            /*if (surveyFrame && surveyFrame.system != viewFrame.system) {\n                if (surveyFrame.system == CooFrameEnum.SYSTEMS.J2000) {\n                    var radec = CooConversion.J2000ToGalactic([ra, dec]);\n                    lon = radec[0];\n                    lat = radec[1];\n                }\n                else if (surveyFrame.system == CooFrameEnum.SYSTEMS.GAL) {\n                    var radec = CooConversion.GalacticToJ2000([ra, dec]);\n                    lon = radec[0];\n                    lat = radec[1];\n                }\n            }\n            else {\n                lon = ra;\n                lat = dec;\n            }*/\n            lon = ra;\n            lat = dec;\n\n            //cornersXY[k] = projection.project(lon, lat);\n            cornersXYView[k] = view.aladin.webglAPI.worldToScreen(lon, lat);\n            if (!cornersXYView[k]) {\n                return null;\n            } else {\n                //console.log(lon, lat);\n                cornersXYView[k] = {\n                    vx: cornersXYView[k][0],\n                    vy: cornersXYView[k][1],\n                };\n            }\n            //console.log(cornersXYView[k]);\n        }\n\n        /*if (cornersXYView[0] == null ||  cornersXYView[1] == null  ||  cornersXYView[2] == null ||  cornersXYView[3] == null ) {\n            return null;\n        }*/\n        /*if (cornersXY[0] == null ||  cornersXY[1] == null  ||  cornersXY[2] == null ||  cornersXY[3] == null ) {\n            return null;\n        }\n\n        for (var k=0; k<4; k++) {\n            cornersXYView[k] = AladinUtils.xyToView(cornersXY[k].X, cornersXY[k].Y, width, height, largestDim, zoomFactor);\n        }*/\n        \n        // detect pixels outside view. Could be improved !\n        // we minimize here the number of cells returned\n        if( cornersXYView[0].vx<0 && cornersXYView[1].vx<0 && cornersXYView[2].vx<0 &&cornersXYView[3].vx<0) {\n            return null;\n        }\n        if( cornersXYView[0].vy<0 && cornersXYView[1].vy<0 && cornersXYView[2].vy<0 &&cornersXYView[3].vy<0) {\n            return null;\n        }\n        if( cornersXYView[0].vx>=width && cornersXYView[1].vx>=width && cornersXYView[2].vx>=width &&cornersXYView[3].vx>=width) {\n            return null;\n        }\n        if( cornersXYView[0].vy>=height && cornersXYView[1].vy>=height && cornersXYView[2].vy>=height &&cornersXYView[3].vy>=height) {\n            return null;\n        }\n\n        // check if we have a pixel at the edge of the view in allsky projections\n        if (projection.PROJECTION!=ProjectionEnum.SIN && projection.PROJECTION!=ProjectionEnum.TAN) {\n            // Faster approach: when a vertex from a cell gets to the other side of the projection\n            // its vertices order change from counter-clockwise to clockwise!\n            // So if the vertices describing a cell are given in clockwise order\n            // we know it crosses the projection, so we do not plot them!\n            if (!AladinUtils.counterClockwiseTriangle(cornersXYView[0].vx, cornersXYView[0].vy, cornersXYView[1].vx, cornersXYView[1].vy, cornersXYView[2].vx, cornersXYView[2].vy) ||\n                !AladinUtils.counterClockwiseTriangle(cornersXYView[0].vx, cornersXYView[0].vy, cornersXYView[2].vx, cornersXYView[2].vy, cornersXYView[3].vx, cornersXYView[3].vy)) {\n                return null;\n            }\n        }\n\n        //cornersXYView = AladinUtils.grow2(cornersXYView, 1);\n        return cornersXYView;\n    };\n\n    MOC.prototype.reportChange = function() {\n        this.view && this.view.requestRedraw();\n    };\n\n    MOC.prototype.show = function() {\n        if (this.isShowing) {\n            return;\n        }\n        this.isShowing = true;\n        this.reportChange();\n    };\n\n    MOC.prototype.hide = function() {\n        if (! this.isShowing) {\n            return;\n        }\n        this.isShowing = false;\n        this.reportChange();\n    };\n\n    // Tests whether a given (ra, dec) point on the sky is within the current MOC object\n    //\n    // returns true if point is contained, false otherwise\n    MOC.prototype.contains = function(ra, dec) {\n        var hpxIdx = new HealpixIndex(Math.pow(2, this.order));\n        hpxIdx.init();\n        var polar = HealpixIndex.utils.radecToPolar(ra, dec);\n        var ipix = hpxIdx.ang2pix_nest(polar.theta, polar.phi);\n        var ipixMapByOrder = {};\n        for (var curOrder=0; curOrder<=this.order; curOrder++) {\n            ipixMapByOrder[curOrder] = Math.floor(ipix / Math.pow(4, this.order - curOrder));\n        }\n\n        // first look for large HEALPix cells (order<3)\n        for (var ipixOrder3=0; ipixOrder3<768; ipixOrder3++) {\n            var mocCells = this._highResIndexOrder3[ipixOrder3];\n            for (var order in mocCells) {\n                if (order<3) {\n                    for (var k=mocCells[order].length; k>=0; k--) {\n                        if (ipixMapByOrder[order] == mocCells[order][k]) {\n                            return true;\n                        }   \n                    }\n                }\n            }\n        }\n\n        // look for finer cells\n        var ipixOrder3 = ipixMapByOrder[3];\n        var mocCells = this._highResIndexOrder3[ipixOrder3];\n        for (var order in mocCells) {\n            for (var k=mocCells[order].length; k>=0; k--) {\n                if (ipixMapByOrder[order] == mocCells[order][k]) {\n                    return true;\n                }   \n            }\n        }\n\n        return false;\n    };\n\n\n\n    return MOC;\n\n})();\n\n    \n","// Copyright 2015 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * Class Line\n * \n * A line is a graphical overlay connecting 2 points\n * \n * Author: Matthieu Baumann[CDS]\n * \n *****************************************************************************/\n\nexport let Line = (function() {\n    // constructor\n    let Line = function(x1, y1, x2, y2) {\n        this.x1 = x1;\n        this.y1 = y1;\n        this.x2 = x2;\n        this.y2 = y2;\n    };\n\n    // Method for testing whether a line is inside the view\n    // http://www.jeffreythompson.org/collision-detection/line-rect.php\n    Line.prototype.isInsideView = function(rw, rh) {\n        if (this.x1 >= 0 && this.x1 <= rw && this.y1 >= 0 && this.y1 <= rh) {\n            return true;\n        }\n        if (this.x2 >= 0 && this.x2 <= rw && this.y2 >= 0 && this.y2 <= rh) {\n            return true;\n        }\n\n        // check if the line has hit any of the rectangle's sides\n        // uses the Line/Line function below\n        let left =   Line.intersectLine(this.x1, this.y1, this.x2, this.y2, 0, 0, 0, rh);\n        let right =  Line.intersectLine(this.x1, this.y1, this.x2, this.y2, rw, 0, rw, rh);\n        let top =    Line.intersectLine(this.x1, this.y1, this.x2, this.y2, 0, 0, rw, 0);\n        let bottom = Line.intersectLine(this.x1, this.y1, this.x2, this.y2, 0, rh, rw, rh);\n    \n        // if ANY of the above are true, the line\n        // has hit the rectangle\n        if (left || right || top || bottom) {\n            return true;\n        }\n\n        return false;\n    };\n\n    Line.prototype.draw = function(ctx) {\n        ctx.moveTo(this.x1, this.y1);\n        ctx.lineTo(this.x2, this.y2);\n    };\n\n    Line.intersectLine = function(x1, y1, x2, y2, x3, y3, x4, y4) {\n        // Calculate the direction of the lines\n        let uA = ((x4-x3)*(y1-y3) - (y4-y3)*(x1-x3)) / ((y4-y3)*(x2-x1) - (x4-x3)*(y2-y1));\n        let uB = ((x2-x1)*(y1-y3) - (y2-y1)*(x1-x3)) / ((y4-y3)*(x2-x1) - (x4-x3)*(y2-y1));\n    \n        // If uA and uB are between 0-1, lines are colliding\n        if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n            return true;\n        }\n        return false;\n    };\n\n    return Line;\n})();","// Copyright 2015 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File Overlay\n *\n * Description: a plane holding overlays (footprints, polylines, circles)\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nimport { AladinUtils } from \"./AladinUtils.js\";\nimport { Footprint } from \"./Footprint.js\";\nimport { CooFrameEnum } from \"./CooFrameEnum.js\";\nimport { Line } from './Line.js';\n\nexport let Overlay = (function() {\n   let Overlay = function(options) {\n        options = options || {};\n\n        this.type = 'overlay';\n\n    \tthis.name = options.name || \"overlay\";\n    \tthis.color = options.color || Color.getNextColor();\n        \n    \tthis.lineWidth = options[\"lineWidth\"] || 2;\n    \t\n    \t//this.indexationNorder = 5; // at which level should we index overlays?\n    \tthis.overlays = [];\n    \tthis.overlay_items = []; // currently Circle or Polyline\n    \t//this.hpxIdx = new HealpixIndex(this.indexationNorder);\n    \t//this.hpxIdx.init();\n    \t\n    \tthis.isShowing = true;\n    };\n    \n\n    // TODO : show/hide methods should be integrated in a parent class \n    Overlay.prototype.show = function() {\n        if (this.isShowing) {\n            return;\n        }\n        this.isShowing = true;\n        this.reportChange();\n    };\n    \n    Overlay.prototype.hide = function() {\n        if (! this.isShowing) {\n            return;\n        }\n        this.isShowing = false;\n        this.reportChange();\n    };\n    \n    // return an array of Footprint from a STC-S string\n    Overlay.parseSTCS = function(stcs) {\n        var footprints = [];\n        var parts = stcs.match(/\\S+/g);\n        var k = 0, len = parts.length;\n        while(k<len) {\n            var s = parts[k].toLowerCase();\n            if(s=='polygon') {\n                var curPolygon = [];\n                k++;\n                frame = parts[k].toLowerCase();\n                if (frame=='icrs' || frame=='j2000' || frame=='fk5') {\n                    while(k+2<len) {\n                        var ra = parseFloat(parts[k+1]);\n                        if (isNaN(ra)) {\n                            break;\n                        }\n                        var dec = parseFloat(parts[k+2]);\n                        curPolygon.push([ra, dec]);\n                        k += 2;\n                    }\n                    curPolygon.push(curPolygon[0]);\n                    footprints.push(new Footprint(curPolygon));\n                }\n            }\n            else if (s=='circle') {\n                var frame;\n                k++;\n                frame = parts[k].toLowerCase();\n\n                if (frame=='icrs' || frame=='j2000' || frame=='fk5') {\n                    var ra, dec, radiusDegrees;\n\n                    ra = parseFloat(parts[k+1]);\n                    dec = parseFloat(parts[k+2]);\n                    radiusDegrees = parseFloat(parts[k+3]);\n\n                    footprints.push(A.circle(ra, dec, radiusDegrees)); \n\n                    k += 3;\n                }\n            }\n\n            k++;\n        }\n\n        return footprints;\n    };\n    \n    // ajout d'un tableau d'overlays (= objets Footprint, Circle ou Polyline)\n    Overlay.prototype.addFootprints = function(overlaysToAdd) {\n    \tfor (var k=0, len=overlaysToAdd.length; k<len; k++) {\n            this.add(overlaysToAdd[k], false);\n        }\n\n        this.view.requestRedraw();\n    };\n\n    // TODO : item doit pouvoir prendre n'importe quoi en param (footprint, circle, polyline)\n    Overlay.prototype.add = function(item, requestRedraw) {\n        requestRedraw = requestRedraw !== undefined ? requestRedraw : true;\n\n        if (item instanceof Footprint) {\n            this.overlays.push(item);\n        }\n        else {\n            this.overlay_items.push(item);\n        }\n        item.setOverlay(this);\n        \n        if (requestRedraw) {\n            this.view.requestRedraw();\n        }\n    };\n\n    \n    // return a footprint by index\n   Overlay.prototype.getFootprint = function(idx) {\n        if (idx<this.footprints.length) {\n            return this.footprints[idx];\n        }\n        else {\n            return null;\n        }\n    };\n    \n    Overlay.prototype.setView = function(view) {\n        this.view = view;\n    };\n    \n    Overlay.prototype.removeAll = function() {\n        // TODO : RAZ de l'index\n        this.overlays = [];\n        this.overlay_items = [];\n    };\n    \n    Overlay.prototype.draw = function(ctx, projection, frame, width, height, largestDim, zoomFactor) {\n        if (!this.isShowing) {\n            return;\n        }\n        \n        // simple drawing\n        ctx.strokeStyle= this.color;\n\n        // 1. Drawing polygons\n        \n        // TODO: les overlay polygons devrait se tracer lui meme (methode draw)\n        ctx.lineWidth = this.lineWidth;\n    \tctx.beginPath();\n    \tvar xyviews = [];\n    \tfor (var k=0, len = this.overlays.length; k<len; k++) {\n    \t\txyviews.push(this.drawFootprint(this.overlays[k], ctx, projection, frame, width, height, largestDim, zoomFactor));\n    \t}\n        ctx.stroke();\n\n    \t// selection drawing\n        ctx.strokeStyle= Overlay.increaseBrightness(this.color, 50);\n        ctx.beginPath();\n        for (var k=0, len = this.overlays.length; k<len; k++) {\n            if (! this.overlays[k].isSelected) {\n                continue;\n            }\n            this.drawFootprintSelected(ctx, xyviews[k]);\n            \n        }\n    \tctx.stroke();\n    \t\n        // 2. Circle and polylines drawing\n    \tfor (var k=0; k<this.overlay_items.length; k++) {\n    \t    this.overlay_items[k].draw(ctx, this.view, projection, frame, width, height, largestDim, zoomFactor);\n    \t}\n    };\n\n    Overlay.increaseBrightness = function(hex, percent){\n        // strip the leading # if it's there\n        hex = hex.replace(/^\\s*#|\\s*$/g, '');\n\n        // convert 3 char codes --> 6, e.g. `E0F` --> `EE00FF`\n        if(hex.length == 3){\n            hex = hex.replace(/(.)/g, '$1$1');\n        }\n\n        var r = parseInt(hex.substr(0, 2), 16),\n            g = parseInt(hex.substr(2, 2), 16),\n            b = parseInt(hex.substr(4, 2), 16);\n\n        return '#' +\n                ((0|(1<<8) + r + (256 - r) * percent / 100).toString(16)).substr(1) +\n                ((0|(1<<8) + g + (256 - g) * percent / 100).toString(16)).substr(1) +\n                ((0|(1<<8) + b + (256 - b) * percent / 100).toString(16)).substr(1);\n    };\n    \n    \n    Overlay.prototype.drawFootprint = function(f, ctx, projection, frame, width, height, largestDim, zoomFactor) {\n        if (! f.isShowing) {\n            return null;\n        }\n        var xyviewArray = [];\n        //var show = false;\n        var radecArray = f.polygons;\n        for(var l=0; l<radecArray.length-1; l++) {\n            let pts = this.view.aladin.webglAPI.projectLine(radecArray[l][0], radecArray[l][1], radecArray[l+1][0], radecArray[l+1][1]);\n            for(var k=0; k<pts.length; k+=4) {\n                let line = new Line(pts[k], pts[k+1], pts[k+2], pts[k+3]);\n                if (line.isInsideView(width, height)) {\n                    line.draw(ctx);\n                }    \n            }\n        }\n\n        // for\n            /*for (var k=0, len=radecArray.length; k<len; k++) {\n                var xy;\n                if (frame.system != CooFrameEnum.SYSTEMS.J2000) {\n                    var lonlat = CooConversion.J2000ToGalactic([radecArray[k][0], radecArray[k][1]]);\n                    xy = projection.project(lonlat[0], lonlat[1]);\n                }\n                else {\n                    xy = projection.project(radecArray[k][0], radecArray[k][1]);\n                }\n                if (!xy) {\n                    return null;\n                }\n                var xyview = AladinUtils.xyToView(xy.X, xy.Y, width, height, largestDim, zoomFactor);\n                xyviewArray.push(xyview);\n                if (!show && xyview.vx<width  && xyview.vx>=0 && xyview.vy<=height && xyview.vy>=0) {\n                    show = true;\n                }\n            }\n\n            if (show) {\n                ctx.moveTo(xyviewArray[0].vx, xyviewArray[0].vy);\n                for (var k=1, len=xyviewArray.length; k<len; k++) {\n                    ctx.lineTo(xyviewArray[k].vx, xyviewArray[k].vy);\n                }\n            }\n            else {\n                //return null;\n            }\n        // end for*/\n\n        return xyviewArray;\n\n\n\n    };\n\n    Overlay.prototype.drawFootprintSelected = function(ctx, xyview) {\n        if (!xyview) {\n            return;\n        }\n\n        var xyviewArray = xyview;\n        ctx.moveTo(xyviewArray[0].vx, xyviewArray[0].vy);\n        for (var k=1, len=xyviewArray.length; k<len; k++) {\n            ctx.lineTo(xyviewArray[k].vx, xyviewArray[k].vy);\n        }\n    };\n\n\n    \n    // callback function to be called when the status of one of the footprints has changed\n    Overlay.prototype.reportChange = function() {\n        this.view.requestRedraw();\n    };\n\n    return Overlay;\n})();\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File Ellipse\n * \n * Author: Matthieu Baumann[CDS]\n * \n *****************************************************************************/\n\nimport { Utils } from \"./Utils.js\";\nimport { AladinUtils } from \"./AladinUtils.js\";\nimport { CooFrameEnum } from \"./CooFrameEnum.js\";\nimport { Aladin } from \"./Aladin.js\";\n\n// TODO : Ellipse, Circle and Footprint should inherit from the same root object\nexport let Ellipse = (function() {\n    // constructor\n    let Ellipse = function(centerRaDec, rayonXDegrees, rayonYDegrees, rotationDegrees, options) {\n        options = options || {};\n\n        this.color = options['color'] || undefined;\n\n        // TODO : all graphic overlays should have an id\n        this.id = 'ellipse-' + Utils.uuidv4();\n\n        this.setCenter(centerRaDec);\n        this.setRadiuses(rayonXDegrees, rayonYDegrees);\n        this.setRotation(rotationDegrees);\n    \tthis.overlay = null;\n    \t\n    \tthis.isShowing = true;\n        this.isSelected = false;\n    };\n\n    Ellipse.prototype.setOverlay = function(overlay) {\n        this.overlay = overlay;\n    };\n    \n    Ellipse.prototype.show = function() {\n        if (this.isShowing) {\n            return;\n        }\n        this.isShowing = true;\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n    \n    Ellipse.prototype.hide = function() {\n        if (! this.isShowing) {\n            return;\n        }\n        this.isShowing = false;\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n    \n    Ellipse.prototype.dispatchClickEvent = function() {\n        if (this.overlay) {\n            // footprint selection code adapted from Fabrizio Giordano dev. from Serco for ESA/ESDC\n            //window.dispatchEvent(new CustomEvent(\"footprintClicked\", {\n            this.overlay.view.aladinDiv.dispatchEvent(new CustomEvent(\"footprintClicked\", {\n                detail: {\n                    footprintId: this.id,\n                    overlayName: this.overlay.name\n                }\n            }));\n        }\n    };\n    \n    Ellipse.prototype.select = function() {\n        if (this.isSelected) {\n            return;\n        }\n        this.isSelected = true;\n        if (this.overlay) {\n/*\n            this.overlay.view.aladinDiv.dispatchEvent(new CustomEvent(\"footprintClicked\", {\n                detail: {\n                    footprintId: this.id,\n                    overlayName: this.overlay.name\n                }\n            }));\n*/\n\n            this.overlay.reportChange();\n        }\n    };\n\n    Ellipse.prototype.deselect = function() {\n        if (! this.isSelected) {\n            return;\n        }\n        this.isSelected = false;\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n\n\n    \n    Ellipse.prototype.setCenter = function(centerRaDec) {\n        this.centerRaDec = centerRaDec;\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n\n    Ellipse.prototype.setRotation = function(rotationDegrees) {\n        // radians\n        let theta = rotationDegrees * Math.PI / 180;\n        this.rotation = theta;\n        // rotation in clockwise in the 2d canvas\n        // we must transform it so that it is a north to east rotation\n        //this.rotation = -theta - Math.PI/2;\n\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n\n    Ellipse.prototype.setRadiuses = function(radiusXDegrees, radiusYDegrees) {\n        this.radiusXDegrees = radiusXDegrees;\n        this.radiusYDegrees = radiusYDegrees;\n\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n\n    // TODO\n    Ellipse.prototype.draw = function(ctx, view, projection, frame, width, height, largestDim, zoomFactor, noStroke) {\n        if (! this.isShowing) {\n            return;\n        }\n        noStroke = noStroke===true || false;\n\n        var centerXyview = AladinUtils.radecToViewXy(this.centerRaDec[0], this.centerRaDec[1], view);\n        if (!centerXyview) {\n            // the center goes out of the projection\n            // we do not draw it\n            return;\n        }\n\n        let circlePtXyViewRa = AladinUtils.radecToViewXy(this.centerRaDec[0] + this.radiusXDegrees, this.centerRaDec[1], view);\n        let circlePtXyViewDec = AladinUtils.radecToViewXy(this.centerRaDec[0], this.centerRaDec[1] + this.radiusYDegrees, view);\n\n        if (!circlePtXyViewRa || !circlePtXyViewDec) {\n            // the circle border goes out of the projection\n            // we do not draw it\n            return;\n        }\n\n        var dxRa = circlePtXyViewRa[0] - centerXyview[0];\n        var dyRa = circlePtXyViewRa[1] - centerXyview[1];\n        var radiusInPixX = Math.sqrt(dxRa*dxRa + dyRa*dyRa);\n\n        var dxDec = circlePtXyViewDec[0] - centerXyview[0];\n        var dyDec = circlePtXyViewDec[1] - centerXyview[1];\n        var radiusInPixY = Math.sqrt(dxDec*dxDec + dyDec*dyDec);\n\n        // Ellipse crossing the projection\n        if ((dxRa*dyDec - dxDec*dyRa) <= 0.0) {\n            // We do not draw it\n            return;\n        }\n        // TODO : check each 4 point until show\n        var baseColor = this.color;\n        if (! baseColor && this.overlay) {\n            baseColor = this.overlay.color;\n        }\n        if (! baseColor) {\n            baseColor = '#ff0000';\n        }\n        \n        if (this.isSelected) {\n            ctx.strokeStyle= Overlay.increaseBrightness(baseColor, 50);\n        }\n        else {\n            ctx.strokeStyle= baseColor;\n        }\n\n        // 1. Find the spherical tangent vector going to the north\n        let origin = this.centerRaDec;\n        let toNorth = [this.centerRaDec[0], this.centerRaDec[1] + 1e-3];\n\n        // 2. Project it to the screen\n        let originScreen = this.overlay.view.aladin.webglAPI.worldToScreen(origin[0], origin[1]);\n        let toNorthScreen = this.overlay.view.aladin.webglAPI.worldToScreen(toNorth[0], toNorth[1]);\n\n        // 3. normalize this vector\n        let toNorthVec = [toNorthScreen[0] - originScreen[0], toNorthScreen[1] - originScreen[1]];\n        let norm = Math.sqrt(toNorthVec[0]*toNorthVec[0] + toNorthVec[1]*toNorthVec[1]);\n        \n        toNorthVec = [toNorthVec[0] / norm, toNorthVec[1] / norm];\n        let toWestVec = [1.0, 0.0];\n\n        let x1 = toWestVec[0];\n        let y1 = toWestVec[1];\n        let x2 = toNorthVec[0];\n        let y2 = toNorthVec[1];\n        // 4. Compute the west to north angle\n        let westToNorthAngle = Math.atan2(x1*y2-y1*x2, x1*x2+y1*y2);\n\n        // 5. Get the correct ellipse angle\n        let theta = -this.rotation + westToNorthAngle;\n\n        ctx.beginPath();\n        ctx.ellipse(centerXyview[0], centerXyview[1], radiusInPixX, radiusInPixY, theta, 0, 2*Math.PI, false);\n        if (!noStroke) {\n            ctx.stroke();\n        }\n    }; \n    \n    return Ellipse;\n})();\n","// Copyright 2015 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * Class Polyline\n * \n * A Polyline is a graphical overlay made of several connected points\n * \n * TODO: Polyline and Circle should derive from a common base class\n * TODO: index polyline, Circle in HEALPix pixels to avoid unneeded calls to draw \n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nimport { AladinUtils } from './AladinUtils.js';\nimport { Line } from './Line.js';\n\nexport let Polyline= (function() {\n    // constructor\n    let Polyline = function(radecArray, options) {\n        options = options || {};\n        this.color = options['color'] || undefined;\n        \n        this.radecArray = radecArray;\n        this.overlay = null;\n    \t\n    \tthis.isShowing = true;\n    \tthis.isSelected = false;\n    };\n    \n    Polyline.prototype.setOverlay = function(overlay) {\n        this.overlay = overlay;\n    };\n    \n    Polyline.prototype.show = function() {\n        if (this.isShowing) {\n            return;\n        }\n        this.isShowing = true;\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n    \n    Polyline.prototype.hide = function() {\n        if (! this.isShowing) {\n            return;\n        }\n        this.isShowing = false;\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n    \n    Polyline.prototype.select = function() {\n        if (this.isSelected) {\n            return;\n        }\n        this.isSelected = true;\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n    \n    Polyline.prototype.deselect = function() {\n        if (! this.isSelected) {\n            return;\n        }\n        this.isSelected = false;\n        if (this.overlay) {\n            this.overlay.reportChange();\n        }\n    };\n    \n    Polyline.prototype.draw = function(ctx, view, projection, frame, width, height, largestDim, zoomFactor) {\n        if (! this.isShowing) {\n            return;\n        }\n\n        if (! this.radecArray || this.radecArray.length<2) {\n            return;\n        }\n        \n        if (this.color) {\n            ctx.strokeStyle= this.color;\n        }\n        /*var start = AladinUtils.radecToViewXy(this.radecArray[0][0], this.radecArray[0][1], projection, frame, width, height, largestDim, zoomFactor);\n        if (! start) {\n            return;\n        }\n       \n        ctx.beginPath();\n        ctx.moveTo(start.vx, start.vy);\n        var pt;\n        for (var k=1; k<this.radecArray.length; k++) {\n            pt = AladinUtils.radecToViewXy(this.radecArray[k][0], this.radecArray[k][1], projection, frame, width, height, largestDim, zoomFactor);\n            if (!pt) {\n                break;\n            }\n            ctx.lineTo(pt.vx, pt.vy);\n        }\n        \n        \n        ctx.stroke();*/\n        ctx.beginPath();\n        for(var l=0; l<this.radecArray.length-1; l++) {\n            let pts = view.aladin.webglAPI.projectLine(this.radecArray[l][0], this.radecArray[l][1], this.radecArray[l+1][0], this.radecArray[l+1][1]);\n            for(var k=0; k<pts.length; k+=4) {\n                let line = new Line(pts[k], pts[k+1], pts[k+2], pts[k+3]);\n                if (line.isInsideView(width, height)) {\n                    line.draw(ctx);\n                }    \n            }\n        }\n\n        ctx.stroke();\n    };\n\n    return Polyline;\n})();","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n// log \nexport let Logger = {};\n\nLogger.log = function(action, params) {\n    try {\n        var logUrl = \"//alasky.unistra.fr/cgi/AladinLiteLogger/log.py\";\n        var paramStr = \"\";\n        if (params) {\n            paramStr = JSON.stringify(params);\n        }\n        \n        $.ajax({\n            url: logUrl,\n            data: {\"action\": action, \"params\": paramStr, \"pageUrl\": window.location.href, \"referer\": document.referrer ? document.referrer : \"\"},\n            method: 'GET',\n            dataType: 'json' // as alasky supports CORS, we do not need JSONP any longer\n        });\n        \n    }\n    catch(e) {\n        window.console && console.log('Exception: ' + e);\n    }\n\n};\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File Source\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nexport let Source = (function() {\n    // constructor\n    let Source = function(ra, dec, data, options) {\n    \tthis.ra = ra;\n    \tthis.dec = dec;\n    \tthis.data = data;\n    \tthis.catalog = null;\n    \t\n        this.marker = (options && options.marker) || false;\n        if (this.marker) {\n            this.popupTitle = (options && options.popupTitle) ? options.popupTitle : '';\n            this.popupDesc = (options && options.popupDesc) ? options.popupDesc : '';\n            this.useMarkerDefaultIcon = (options && options.useMarkerDefaultIcon!==undefined) ? options.useMarkerDefaultIcon : true;\n        }\n\n    \tthis.isShowing = true;\n    \tthis.isSelected = false;\n    };\n    \n    Source.prototype.setCatalog = function(catalog) {\n        this.catalog = catalog;\n    };\n    \n    Source.prototype.show = function() {\n        if (this.isShowing) {\n            return;\n        }\n        this.isShowing = true;\n        if (this.catalog) {\n            this.catalog.reportChange();\n        }\n    };\n    \n    Source.prototype.hide = function() {\n        if (! this.isShowing) {\n            return;\n        }\n        this.isShowing = false;\n        if (this.catalog) {\n            this.catalog.reportChange();\n        }\n    };\n    \n    Source.prototype.select = function() {\n        if (this.isSelected) {\n            return;\n        }\n        this.isSelected = true;\n        if (this.catalog) {\n            this.catalog.reportChange();\n        }\n    };\n    \n    Source.prototype.deselect = function() {\n        if (! this.isSelected) {\n            return;\n        }\n        this.isSelected = false;\n        if (this.catalog) {\n            this.catalog.reportChange();\n        }\n    };\n\n    // function called when a source is clicked. Called by the View object\n    Source.prototype.actionClicked = function() {\n        if (this.catalog && this.catalog.onClick) {\n            var view = this.catalog.view;\n            if (this.catalog.onClick=='showTable') {\n                view.aladin.measurementTable.showMeasurement(this);\n                this.select();\n            }\n            else if (this.catalog.onClick=='showPopup') {\n                view.popup.setTitle('<br><br>');\n                var m = '<div class=\"aladin-marker-measurement\">';\n                m += '<table>';\n                for (var key in this.data) {\n                    m += '<tr><td>' + key + '</td><td>' + this.data[key] + '</td></tr>';\n                }\n                m += '</table>';\n                m += '</div>';\n                view.popup.setText(m);\n                view.popup.setSource(this);\n                view.popup.show();\n            }\n            else if (typeof this.catalog.onClick === 'function') {\n                this.catalog.onClick(this);\n                view.lastClickedObject = this;\n            }\n\n        }\n    };\n\n    \n    Source.prototype.actionOtherObjectClicked = function() {\n        if (this.catalog && this.catalog.onClick) {\n            this.deselect();\n        }\n    };\n    \n    return Source;\n})();\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File Color\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nexport let Color = (function() {\n\n\n    let Color = {};\n    \n    Color.curIdx = 0;\n    Color.colors = ['#ff0000', '#0000ff', '#99cc00', '#ffff00','#000066', '#00ffff', '#9900cc', '#0099cc', '#cc9900', '#cc0099', '#00cc99', '#663333', '#ffcc9a', '#ff9acc', '#ccff33', '#660000', '#ffcc33', '#ff00ff', '#00ff00', '#ffffff'];\n\n    \n    Color.getNextColor = function() {\n        var c = Color.colors[Color.curIdx % (Color.colors.length)];\n        Color.curIdx++;\n        return c;\n    };\n\n    /** return most suited (ie readable) color for a label, given a background color\n     * bkgdColor: color, given as a 'rgb(<r value>, <g value>, <v value>)' . This is returned by $(<element>).css('background-color')\n     * \n     * example call: Color.getLabelColorForBackground('rgb(3, 123, 42)')\n     * adapted from http://stackoverflow.com/questions/1855884/determine-font-color-based-on-background-color\n     */\n    Color.getLabelColorForBackground = function(rgbBkgdColor) {\n        var lightLabel = '#eee' \n        var darkLabel = '#111' \n        var rgb = rgbBkgdColor.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n        if (rgb==null) {\n            // we return the dark label color if we can't parse the color\n            return darkLabel\n        }\n        var r = parseInt(rgb[1]);\n        var g = parseInt(rgb[2]);\n        var b = parseInt(rgb[3]);\n        \n        var d = 0;\n        // Counting the perceptive luminance - human eye favors green color... \n        var a = 1 - ( 0.299 * r + 0.587 * g + 0.114 * b) / 255;\n\n        if (a < 0.5) {\n            return darkLabel; // bright color --> dark font\n        }\n        else {\n            return lightLabel; // dark color --> light font\n        }\n    };\n    \n    return Color;\n})();\n\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File Catalog\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nimport { Source } from \"./Source.js\"\nimport { Color } from \"./Color.js\"\nimport { HealpixIndex }   from \"./libs/healpix.js\";\nimport { CooFrameEnum } from \"./CooFrameEnum.js\";\nimport { Utils } from \"./Utils.js\";\nimport { AladinUtils } from \"./AladinUtils.js\";\nimport { Coo } from \"./libs/astro/coo.js\";\n\n// TODO : harmoniser parsing avec classe ProgressiveCat\nexport let Catalog = (function() {\n\n   function Catalog(options) {\n        options = options || {};\n\n        this.type = 'catalog';    \tthis.name = options.name || \"catalog\";\n    \tthis.color = options.color || Color.getNextColor();\n    \tthis.sourceSize = options.sourceSize || 8;\n    \tthis.markerSize = options.sourceSize || 12;\n    \tthis.shape = options.shape || \"square\";\n        this.maxNbSources = options.limit || undefined;\n        this.onClick = options.onClick || undefined;\n\n        this.raField = options.raField || undefined; // ID or name of the field holding RA\n        this.decField = options.decField || undefined; // ID or name of the field holding dec\n\n    \tthis.indexationNorder = 5; // à quel niveau indexe-t-on les sources\n    \tthis.sources = [];\n    \tthis.hpxIdx = new HealpixIndex(this.indexationNorder);\n    \tthis.hpxIdx.init();\n\n        this.displayLabel = options.displayLabel || false;\n        this.labelColor = options.labelColor || this.color;\n        this.labelFont = options.labelFont || '10px sans-serif';\n        if (this.displayLabel) {\n            this.labelColumn = options.labelColumn;\n            if (!this.labelColumn) {\n                this.displayLabel = false;\n            }\n        }\n    \t\n        if (this.shape instanceof Image || this.shape instanceof HTMLCanvasElement) {\n            this.sourceSize = this.shape.width;\n        }\n        this._shapeIsFunction = false; // if true, the shape is a function drawing on the canvas\n        if ($.isFunction(this.shape)) {\n            this._shapeIsFunction = true;\n        }\n        \n    \tthis.selectionColor = '#00ff00';\n    \t\n\n        // create this.cacheCanvas    \t\n    \t// cacheCanvas permet de ne créer le path de la source qu'une fois, et de le réutiliser (cf. http://simonsarris.com/blog/427-increasing-performance-by-caching-paths-on-canvas)\n        this.updateShape(options);\n\n        this.cacheMarkerCanvas = document.createElement('canvas');\n        this.cacheMarkerCanvas.width = this.markerSize;\n        this.cacheMarkerCanvas.height = this.markerSize;\n        var cacheMarkerCtx = this.cacheMarkerCanvas.getContext('2d');\n        cacheMarkerCtx.fillStyle = this.color;\n        cacheMarkerCtx.beginPath();\n        var half = (this.markerSize)/2.;\n        cacheMarkerCtx.arc(half, half, half-2, 0, 2 * Math.PI, false);\n        cacheMarkerCtx.fill();\n        cacheMarkerCtx.lineWidth = 2;\n        cacheMarkerCtx.strokeStyle = '#ccc';\n        cacheMarkerCtx.stroke();\n        \n\n        this.isShowing = true;\n    };\n    \n    Catalog.createShape = function(shapeName, color, sourceSize) {\n        if (shapeName instanceof Image || shapeName instanceof HTMLCanvasElement) { // in this case, the shape is already created\n            return shapeName;\n        }\n        var c = document.createElement('canvas');\n        c.width = c.height = sourceSize;\n        var ctx= c.getContext('2d');\n        ctx.beginPath();\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 2.0;\n        if (shapeName==\"plus\") {\n            ctx.moveTo(sourceSize/2., 0);\n            ctx.lineTo(sourceSize/2., sourceSize);\n            ctx.stroke();\n            \n            ctx.moveTo(0, sourceSize/2.);\n            ctx.lineTo(sourceSize, sourceSize/2.);\n            ctx.stroke();\n        }\n        else if (shapeName==\"cross\") {\n            ctx.moveTo(0, 0);\n            ctx.lineTo(sourceSize-1, sourceSize-1);\n            ctx.stroke();\n            \n            ctx.moveTo(sourceSize-1, 0);\n            ctx.lineTo(0, sourceSize-1);\n            ctx.stroke();\n        }\n        else if (shapeName==\"rhomb\") {\n            ctx.moveTo(sourceSize/2, 0);\n            ctx.lineTo(0, sourceSize/2);\n            ctx.lineTo(sourceSize/2, sourceSize);\n            ctx.lineTo(sourceSize, sourceSize/2);\n            ctx.lineTo(sourceSize/2, 0);\n            ctx.stroke();\n        }\n        else if (shapeName==\"triangle\") {\n            ctx.moveTo(sourceSize/2, 0);\n            ctx.lineTo(0, sourceSize-1);\n            ctx.lineTo(sourceSize-1, sourceSize-1);\n            ctx.lineTo(sourceSize/2, 0);\n            ctx.stroke();\n        }\n        else if (shapeName==\"circle\") {\n            ctx.arc(sourceSize/2, sourceSize/2, sourceSize/2 - 1, 0, 2*Math.PI, true);\n            ctx.stroke();\n        }\n        else { // default shape: square\n            ctx.moveTo(1, 0);\n            ctx.lineTo(1,  sourceSize-1);\n            ctx.lineTo( sourceSize-1,  sourceSize-1);\n            ctx.lineTo( sourceSize-1, 1);\n            ctx.lineTo(1, 1);\n            ctx.stroke();\n        }\n        \n        return c;\n        \n    };\n    \n\n        // find RA, Dec fields among the given fields\n        //\n        // @param fields: list of objects with ucd, unit, ID, name attributes\n        // @param raField:  index or name of right ascension column (might be undefined)\n        // @param decField: index or name of declination column (might be undefined)\n        //\n        function findRADecFields(fields, raField, decField) {\n            var raFieldIdx,  decFieldIdx;\n            raFieldIdx = decFieldIdx = null;\n\n            // first, look if RA/DEC fields have been already given\n            if (raField) { // ID or name of RA field given at catalogue creation\n                for (var l=0, len=fields.length; l<len; l++) {\n                    var field = fields[l];\n                    if (Utils.isInt(raField) && raField<fields.length) { // raField can be given as an index\n                        raFieldIdx = raField;\n                        break;\n                    } \n                    if ( (field.ID && field.ID===raField) || (field.name && field.name===raField)) {\n                        raFieldIdx = l;\n                        break;\n                    }\n                }\n            }\n            if (decField) { // ID or name of dec field given at catalogue creation\n                for (var l=0, len=fields.length; l<len; l++) {\n                    var field = fields[l];\n                    if (Utils.isInt(decField) && decField<fields.length) { // decField can be given as an index\n                        decFieldIdx = decField;\n                        break;\n                    } \n                    if ( (field.ID && field.ID===decField) || (field.name && field.name===decField)) {\n                        decFieldIdx = l;\n                        break;\n                    }\n                }\n            }\n            // if not already given, let's guess position columns on the basis of UCDs\n            for (var l=0, len=fields.length; l<len; l++) {\n                if (raFieldIdx!=null && decFieldIdx!=null) {\n                    break;\n                }\n\n                var field = fields[l];\n                if ( ! raFieldIdx) {\n                    if (field.ucd) {\n                        var ucd = $.trim(field.ucd.toLowerCase());\n                        if (ucd.indexOf('pos.eq.ra')==0 || ucd.indexOf('pos_eq_ra')==0) {\n                            raFieldIdx = l;\n                            continue;\n                        }\n                    }\n                }\n                    \n                if ( ! decFieldIdx) {\n                    if (field.ucd) {\n                        var ucd = $.trim(field.ucd.toLowerCase());\n                        if (ucd.indexOf('pos.eq.dec')==0 || ucd.indexOf('pos_eq_dec')==0) {\n                            decFieldIdx = l;\n                            continue;\n                        }\n                    }\n                }\n            }\n\n            // still not found ? try some common names for RA and Dec columns\n            if (raFieldIdx==null && decFieldIdx==null) {\n                for (var l=0, len=fields.length; l<len; l++) {\n                    var field = fields[l];\n                    var name = field.name || field.ID || '';\n                    name = name.toLowerCase();\n                    \n                    if ( ! raFieldIdx) {\n                        if (name.indexOf('ra')==0 || name.indexOf('_ra')==0 || name.indexOf('ra(icrs)')==0 || name.indexOf('_ra')==0 || name.indexOf('alpha')==0) {\n                            raFieldIdx = l;\n                            continue;\n                        }\n                    }\n\n                    if ( ! decFieldIdx) {\n                        if (name.indexOf('dej2000')==0 || name.indexOf('_dej2000')==0 || name.indexOf('de')==0 || name.indexOf('de(icrs)')==0 || name.indexOf('_de')==0 || name.indexOf('delta')==0) {\n                            decFieldIdx = l;\n                            continue;\n                        }\n                    }\n                    \n                }\n            }\n\n            // last resort: take two first fieds\n            if (raFieldIdx==null || decFieldIdx==null) {\n                raFieldIdx  = 0;\n                decFieldIdx = 1\n            }\n\n            return [raFieldIdx, decFieldIdx];\n        };\n        \n    \n    \n    // return an array of Source(s) from a VOTable url\n    // callback function is called each time a TABLE element has been parsed\n    Catalog.parseVOTable = function(url, callback, maxNbSources, useProxy, raField, decField) {\n\n        // adapted from votable.js\n        function getPrefix($xml) {\n            var prefix;\n            // If Webkit chrome/safari/... (no need prefix)\n            if($xml.find('RESOURCE').length>0) {\n                prefix = '';\n            }\n            else {\n                // Select all data in the document\n                prefix = $xml.find(\"*\").first();\n\n                if (prefix.length==0) {\n                    return '';\n                }\n\n                // get name of the first tag\n                prefix = prefix.prop(\"tagName\");\n\n                var idx = prefix.indexOf(':');\n\n                prefix = prefix.substring(0, idx) + \"\\\\:\";\n\n\n            }\n\n            return prefix;\n        }\n\n        function doParseVOTable(xml, callback) {\n            xml = xml.replace(/^\\s+/g, ''); // we need to trim whitespaces at start of document\n            var attributes = [\"name\", \"ID\", \"ucd\", \"utype\", \"unit\", \"datatype\", \"arraysize\", \"width\", \"precision\"];\n            \n            var fields = [];\n            var k = 0;\n            var $xml = $($.parseXML(xml));\n            var prefix = getPrefix($xml);\n            $xml.find(prefix + \"FIELD\").each(function() {\n                var f = {};\n                for (var i=0; i<attributes.length; i++) {\n                    var attribute = attributes[i];\n                    if ($(this).attr(attribute)) {\n                        f[attribute] = $(this).attr(attribute);\n                    }\n                }\n                if ( ! f.ID) {\n                    f.ID = \"col_\" + k;\n                }\n                fields.push(f);\n                k++;\n            });\n                \n            var raDecFieldIdxes = findRADecFields(fields, raField, decField);\n            var raFieldIdx,  decFieldIdx;\n            raFieldIdx = raDecFieldIdxes[0];\n            decFieldIdx = raDecFieldIdxes[1];\n\n            var sources = [];\n            \n            var coo = new Coo();\n            var ra, dec;\n            $xml.find(prefix + \"TR\").each(function() {\n               var mesures = {};\n               var k = 0;\n               $(this).find(prefix + \"TD\").each(function() {\n                   var key = fields[k].name ? fields[k].name : fields[k].id;\n                   mesures[key] = $(this).text();\n                   k++;\n               });\n               var keyRa = fields[raFieldIdx].name ? fields[raFieldIdx].name : fields[raFieldIdx].id;\n               var keyDec = fields[decFieldIdx].name ? fields[decFieldIdx].name : fields[decFieldIdx].id;\n\n               if (Utils.isNumber(mesures[keyRa]) && Utils.isNumber(mesures[keyDec])) {\n                   ra = parseFloat(mesures[keyRa]);\n                   dec = parseFloat(mesures[keyDec]);\n               }\n               else {\n                   coo.parse(mesures[keyRa] + \" \" + mesures[keyDec]);\n                   ra = coo.lon;\n                   dec = coo.lat;\n               }\n               sources.push(new Source(ra, dec, mesures));\n               if (maxNbSources && sources.length==maxNbSources) {\n                   return false; // break the .each loop\n               }\n                \n            });\n            if (callback) {\n                callback(sources);\n            }\n        }\n        \n        var ajax = Utils.getAjaxObject(url, 'GET', 'text', useProxy);\n        ajax.done(function(xml) {\n            doParseVOTable(xml, callback);\n        });\n    };\n\n    // API\n    Catalog.prototype.updateShape = function(options) {\n        options = options || {};\n    \tthis.color = options.color || this.color || Color.getNextColor();\n    \tthis.sourceSize = options.sourceSize || this.sourceSize || 6;\n    \tthis.shape = options.shape || this.shape || \"square\";\n\n        this.selectSize = this.sourceSize + 2;\n\n        this.cacheCanvas = Catalog.createShape(this.shape, this.color, this.sourceSize); \n        this.cacheSelectCanvas = Catalog.createShape('square', this.selectionColor, this.selectSize);\n\n        this.reportChange();\n    };\n    \n    // API\n    Catalog.prototype.addSources = function(sourcesToAdd) {\n        sourcesToAdd = [].concat(sourcesToAdd); // make sure we have an array and not an individual source\n    \tthis.sources = this.sources.concat(sourcesToAdd);\n    \tfor (var k=0, len=sourcesToAdd.length; k<len; k++) {\n    \t    sourcesToAdd[k].setCatalog(this);\n    \t}\n        this.reportChange();\n    };\n\n    // API\n    //\n    // create sources from a 2d array and add them to the catalog\n    //\n    // @param columnNames: array with names of the columns\n    // @array: 2D-array, each item being a 1d-array with the same number of items as columnNames\n    Catalog.prototype.addSourcesAsArray = function(columnNames, array) {\n        var fields = [];\n        for (var colIdx=0 ; colIdx<columnNames.length; colIdx++) {\n            fields.push({name: columnNames[colIdx]});\n        }\n        var raDecFieldIdxes = findRADecFields(fields, this.raField, this.decField);\n        var raFieldIdx,  decFieldIdx;\n        raFieldIdx = raDecFieldIdxes[0];\n        decFieldIdx = raDecFieldIdxes[1];\n\n\n        var newSources = [];\n        var coo = new Coo();\n        var ra, dec, row, dataDict;\n        for (var rowIdx=0 ; rowIdx<array.length ; rowIdx++) {\n            row = array[rowIdx];\n            if (Utils.isNumber(row[raFieldIdx]) && Utils.isNumber(row[decFieldIdx])) {\n                   ra = parseFloat(row[raFieldIdx]);\n                   dec = parseFloat(row[decFieldIdx]);\n            }\n               else {\n                   coo.parse(row[raFieldIdx] + \" \" + row[decFieldIdx]);\n                   ra = coo.lon;\n                   dec = coo.lat;\n               }\n\n            dataDict = {};\n            for (var colIdx=0 ; colIdx<columnNames.length; colIdx++) {\n                dataDict[columnNames[colIdx]] = row[colIdx];\n            }\n\n            newSources.push(A.source(ra, dec, dataDict));\n        }\n\n        this.addSources(newSources);\n    };\n    \n    // return the current list of Source objects\n    Catalog.prototype.getSources = function() {\n        return this.sources;\n    };\n    \n    // TODO : fonction générique traversant la liste des sources\n    Catalog.prototype.selectAll = function() {\n        if (! this.sources) {\n            return;\n        }\n        \n        for (var k=0; k<this.sources.length; k++) {\n            this.sources[k].select();\n        }\n    };\n    \n    Catalog.prototype.deselectAll = function() {\n        if (! this.sources) {\n            return;\n        }\n        \n        for (var k=0; k<this.sources.length; k++) {\n            this.sources[k].deselect();\n        }\n    };\n    \n    // return a source by index\n    Catalog.prototype.getSource = function(idx) {\n        if (idx<this.sources.length) {\n            return this.sources[idx];\n        }\n        else {\n            return null;\n        }\n    };\n    \n    Catalog.prototype.setView = function(view) {\n        this.view = view;\n        this.reportChange();\n    };\n\n    // remove a source\n    Catalog.prototype.remove = function(source) {\n        var idx = this.sources.indexOf(source);\n        if (idx<0) {\n            return;\n        }\n\n        this.sources[idx].deselect();\n        this.sources.splice(idx, 1);\n\n        this.reportChange();\n    };\n    \n    Catalog.prototype.removeAll = Catalog.prototype.clear = function() {\n        // TODO : RAZ de l'index\n        this.sources = [];\n    };\n    \n    Catalog.prototype.draw = function(ctx, projection, frame, width, height, largestDim, zoomFactor) {\n        if (! this.isShowing) {\n            return;\n        }\n        // tracé simple\n        //ctx.strokeStyle= this.color;\n\n        //ctx.lineWidth = 1;\n    \t//ctx.beginPath();\n        if (this._shapeIsFunction) {\n            ctx.save();\n        }\n        var sourcesInView = [];\n \t    for (var k=0, len = this.sources.length; k<len; k++) {\n\t\t    var inView = Catalog.drawSource(this, this.sources[k], ctx, projection, frame, width, height, largestDim, zoomFactor);\n            if (inView) {\n                sourcesInView.push(this.sources[k]);\n            }\n        }\n        if (this._shapeIsFunction) {\n            ctx.restore();\n        }\n        //ctx.stroke();\n\n    \t// tracé sélection\n        ctx.strokeStyle= this.selectionColor;\n        //ctx.beginPath();\n        var source;\n        for (var k=0, len = sourcesInView.length; k<len; k++) {\n            source = sourcesInView[k];\n            if (! source.isSelected) {\n                continue;\n            }\n            Catalog.drawSourceSelection(this, source, ctx);\n            \n        }\n        // NEEDED ?\n    \t//ctx.stroke();\n\n        // tracé label\n        if (this.displayLabel) {\n            ctx.fillStyle = this.labelColor;\n            ctx.font = this.labelFont;\n            for (var k=0, len = sourcesInView.length; k<len; k++) {\n                Catalog.drawSourceLabel(this, sourcesInView[k], ctx);\n            }\n        }\n    };\n    \n    \n    \n    Catalog.drawSource = function(catalogInstance, s, ctx, projection, frame, width, height, largestDim, zoomFactor) {\n        if (! s.isShowing) {\n            return false;\n        }\n        var sourceSize = catalogInstance.sourceSize;\n        //console.log('COMPUTE', aladin.webglAPI.worldToScreen(s.ra, s.dec));\n        var xy = catalogInstance.view.aladin.webglAPI.worldToScreen(s.ra, s.dec);\n\n        /*\n        // TODO : we could factorize this code with Aladin.world2pix\n        var xy;\n        if (frame.system != CooFrameEnum.SYSTEMS.J2000) {\n            var lonlat = CooConversion.J2000ToGalactic([s.ra, s.dec]);\n            xy = projection.project(lonlat[0], lonlat[1]);\n        }\n        else {\n            xy = projection.project(s.ra, s.dec);\n        }\n        */\n\n        if (xy) {\n            //var xyview = AladinUtils.xyToView(xy.X, xy.Y, width, height, largestDim, zoomFactor, true);\n            var xyview = {vx: xy[0], vy: xy[1]};\n            var max = s.popup ? 100 : s.sourceSize;\n            if (xyview) {\n                // TODO : index sources by HEALPix cells at level 3, 4 ?\n\n                // check if source is visible in view\n                if (xyview.vx>(width+max)  || xyview.vx<(0-max) ||\n                    xyview.vy>(height+max) || xyview.vy<(0-max)) {\n                    s.x = s.y = undefined;\n                    return false;\n                }\n                \n                s.x = xyview.vx;\n                s.y = xyview.vy;\n                if (catalogInstance._shapeIsFunction) {\n                    catalogInstance.shape(s, ctx, catalogInstance.view.getViewParams());\n                }\n                else if (s.marker && s.useMarkerDefaultIcon) {\n                    ctx.drawImage(catalogInstance.cacheMarkerCanvas, s.x-sourceSize/2, s.y-sourceSize/2);\n                }\n                else {\n                    ctx.drawImage(catalogInstance.cacheCanvas, s.x-catalogInstance.cacheCanvas.width/2, s.y-catalogInstance.cacheCanvas.height/2);\n                }\n\n\n                // has associated popup ?\n                if (s.popup) {\n                    s.popup.setPosition(s.x, s.y);\n                }\n                \n                \n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n\n        \n    };\n    \n    Catalog.drawSourceSelection = function(catalogInstance, s, ctx) {\n        if (!s || !s.isShowing || !s.x || !s.y) {\n            return;\n        }\n        var sourceSize = catalogInstance.selectSize;\n        \n        ctx.drawImage(catalogInstance.cacheSelectCanvas, s.x-sourceSize/2, s.y-sourceSize/2);\n    };\n\n    Catalog.drawSourceLabel = function(catalogInstance, s, ctx) {\n        if (!s || !s.isShowing || !s.x || !s.y) {\n            return;\n        }\n\n        var label = s.data[catalogInstance.labelColumn];\n        if (!label) {\n            return;\n        }\n\n        ctx.fillText(label, s.x, s.y);\n    };\n\n    \n    // callback function to be called when the status of one of the sources has changed\n    Catalog.prototype.reportChange = function() {\n        this.view && this.view.requestRedraw();\n    };\n    \n    Catalog.prototype.show = function() {\n        if (this.isShowing) {\n            return;\n        }\n        this.isShowing = true;\n        this.reportChange();\n    };\n    \n    Catalog.prototype.hide = function() {\n        if (! this.isShowing) {\n            return;\n        }\n        this.isShowing = false;\n        if (this.view && this.view.popup && this.view.popup.source && this.view.popup.source.catalog==this) {\n            this.view.popup.hide();\n        }\n\n        this.reportChange();\n    };\n\n    return Catalog;\n})();\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File ProgressiveCat.js\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\n import { Catalog } from \"./Catalog.js\";\n import { Source } from \"./Source.js\";\n import { Color } from \"./Color.js\";\n import { Coo } from \"./libs/astro/coo.js\";\n import { Utils } from \"./Utils.js\";\n import { CooFrameEnum } from \"./CooFrameEnum.js\";\n\n// TODO: index sources according to their HEALPix ipix\n// TODO : merge parsing with class Catalog\nexport let ProgressiveCat = (function() {\n    \n    // TODO : test if CORS support. If no, need to pass through a proxy\n    // currently, we suppose CORS is supported\n    \n    // constructor\n    let ProgressiveCat = function(rootUrl, frameStr, maxOrder, options) {\n        options = options || {};\n\n        this.type = 'progressivecat';\n        \n        this.rootUrl = rootUrl; // TODO: method to sanitize rootURL (absolute, no duplicate slashes, remove end slash if existing)\n        // fast fix for HTTPS support --> will work for all HiPS served by CDS\n        if (Utils.isHttpsContext() && ( /u-strasbg.fr/i.test(this.rootUrl) || /unistra.fr/i.test(this.rootUrl)  ) ) {\n            this.rootUrl = this.rootUrl.replace('http://', 'https://');\n        }\n\n        this.frameStr = frameStr;\n        this.frame = CooFrameEnum.fromString(frameStr) || CooFrameEnum.J2000;\n        this.maxOrder = maxOrder;\n        this.isShowing = true; // TODO : inherit from catalogue\n\n        this.name = options.name || \"progressive-cat\";\n        this.color = options.color || Color.getNextColor();\n        this.shape = options.shape || \"square\";\n        this.sourceSize = options.sourceSize || 6;\n        this.selectSize = this.sourceSize + 2;\n        this.selectionColor = '#00ff00'; // TODO: to be merged with Catalog\n\n        // allows for filtering of sources\n        this.filterFn = options.filter || undefined; // TODO: do the same for catalog\n\n\n        this.onClick = options.onClick || undefined; // TODO: inherit from catalog\n\n        \n\n        // we cache the list of sources in each healpix tile. Key of the cache is norder+'-'+npix\n        this.sourcesCache = new Utils.LRUCache(100);\n\n        this.updateShape(options);\n\n\n\n\n        this.maxOrderAllsky = 2;\n        this.isReady = false;\n    };\n\n    // TODO: to be put higher in the class diagram, in a HiPS generic class\n    ProgressiveCat.readProperties = function(rootUrl, successCallback, errorCallback) {\n        if (! successCallback) {\n            return;\n        }\n\n        var propertiesURL = rootUrl + '/properties';\n        $.ajax({\n            url: propertiesURL,\n            method: 'GET',\n            dataType: 'text',\n            success: function(propertiesTxt) {\n                var props = {};\n                var lines = propertiesTxt.split('\\n');\n                for (var k=0; k<lines.length; k++) {\n                    var line = lines[k];\n                    var idx = line.indexOf('=');\n                    var propName  = $.trim(line.substring(0, idx));\n                    var propValue = $.trim(line.substring(idx + 1));\n                    \n                    props[propName] = propValue;\n                }\n    \n                successCallback(props);\n                \n            },\n            error: function(err) { // TODO : which parameters should we put in the error callback\n                errorCallback && errorCallback(err);\n            }\n        });\n\n\n\n\n        \n    };\n\n    function getFields(instance, xml) {\n        var attributes = [\"name\", \"ID\", \"ucd\", \"utype\", \"unit\", \"datatype\", \"arraysize\", \"width\", \"precision\"];\n\n        var fields = [];\n        var k = 0;\n        instance.keyRa = instance.keyDec = null;\n        $(xml).find(\"FIELD\").each(function() {\n            var f = {};\n            for (var i=0; i<attributes.length; i++) {\n                var attribute = attributes[i];\n                if ($(this).attr(attribute)) {\n                    f[attribute] = $(this).attr(attribute);\n                }\n                \n            }\n            if ( ! f.ID) {\n                f.ID = \"col_\" + k;\n            }\n            \n            if (!instance.keyRa && f.ucd && (f.ucd.indexOf('pos.eq.ra')==0 || f.ucd.indexOf('POS_EQ_RA')==0)) {\n                if (f.name) {\n                    instance.keyRa = f.name;\n                }\n                else {\n                    instance.keyRa = f.ID;\n                }\n            }\n            if (!instance.keyDec && f.ucd && (f.ucd.indexOf('pos.eq.dec')==0 || f.ucd.indexOf('POS_EQ_DEC')==0)) {\n                if (f.name) {\n                    instance.keyDec = f.name;\n                }\n                else {\n                    instance.keyDec = f.ID;\n                }\n            }\n            \n            fields.push(f);\n            k++;\n        });\n\n        return fields;\n    }\n\n    function getSources(instance, csv, fields) {\n        // TODO : find ra and dec key names (see in Catalog)\n        if (!instance.keyRa || ! instance.keyDec) {\n            return [];\n        }\n        var lines = csv.split('\\n');\n        var mesureKeys = [];\n        for (var k=0; k<fields.length; k++) {\n            if (fields[k].name) {\n                mesureKeys.push(fields[k].name);\n            }\n            else {\n                mesureKeys.push(fields[k].ID);\n            }\n        }\n        \n\n        var sources = [];\n        var coo = new Coo();\n        var newSource;\n        // start at i=1, as first line repeat the fields names\n        for (var i=2; i<lines.length; i++) {\n            var mesures = {};\n            var data = lines[i].split('\\t');\n            if (data.length<mesureKeys.length) {\n                continue;\n            }\n            for (var j=0; j<mesureKeys.length; j++) {\n                mesures[mesureKeys[j]] = data[j];\n            }\n            var ra, dec;\n            if (Utils.isNumber(mesures[instance.keyRa]) && Utils.isNumber(mesures[instance.keyDec])) {\n                ra = parseFloat(mesures[instance.keyRa]);\n                dec = parseFloat(mesures[instance.keyDec]);\n            }\n            else {\n                coo.parse(mesures[instance.keyRa] + \" \" + mesures[instance.keyDec]);\n                ra = coo.lon;\n                dec = coo.lat;\n            }\n            newSource = new Source(ra, dec, mesures);\n            sources.push(newSource);\n            newSource.setCatalog(instance);\n        }\n        return sources;\n    };\n\n    //ProgressiveCat.prototype.updateShape = Catalog.prototype.updateShape;\n\n    ProgressiveCat.prototype = {\n\n        init: function(view) {\n            var self = this;\n            this.view = view;\n\n            if (this.maxOrder && this.frameStr) {\n                this._loadMetadata();\n            }\n\n            else {\n                ProgressiveCat.readProperties(self.rootUrl,\n                    function (properties) {\n                        self.properties = properties;\n                        self.maxOrder = self.properties['hips_order'];\n                        self.frame = CooFrameEnum.fromString(self.properties['hips_frame']);\n\n                        self._loadMetadata();\n                    }, function(err) {\n                        console.log('Could not find properties for HiPS ' + self.rootUrl);\n                    }\n                );\n            }\n        },\n\n        updateShape: Catalog.prototype.updateShape,\n\n        _loadMetadata: function() {\n            var self = this;\n            $.ajax({\n                url: self.rootUrl + '/' + 'Metadata.xml',\n                method: 'GET',\n                success: function(xml) {\n                    self.fields = getFields(self, xml);\n                    self._loadAllskyNewMethod();\n                },\n                error: function(err) {\n                    self._loadAllskyOldMethod();\n                }\n            });\n        },\n\n        _loadAllskyNewMethod: function() {\n            var self = this;\n            $.ajax({\n                url: self.rootUrl + '/' + 'Norder1/Allsky.tsv',\n                method: 'GET',\n                success: function(tsv) {\n                    self.order1Sources = getSources(self, tsv, self.fields);\n\n                    if (self.order2Sources) {\n                        self.isReady = true;\n                        self._finishInitWhenReady();\n                    }\n                },\n                error: function(err) {\n                    console.log('Something went wrong: ' + err);\n                }\n            });\n\n            $.ajax({\n                url: self.rootUrl + '/' + 'Norder2/Allsky.tsv',\n                method: 'GET',\n                success: function(tsv) {\n                    self.order2Sources = getSources(self, tsv, self.fields);\n\n                    if (self.order1Sources) {\n                        self.isReady = true;\n                        self._finishInitWhenReady();\n                    }\n                },\n                error: function(err) {\n                    console.log('Something went wrong: ' + err);\n                }\n            });\n\n        },\n\n        _loadAllskyOldMethod: function() {\n            this.maxOrderAllsky = 3;\n            this._loadLevel2Sources();\n            this._loadLevel3Sources();\n        },\n\n        _loadLevel2Sources: function() {\n            var self = this;\n            $.ajax({\n                url: self.rootUrl + '/' + 'Norder2/Allsky.xml',\n                method: 'GET',\n                success: function(xml) {\n                    self.fields = getFields(self, xml);\n                    self.order2Sources = getSources(self, $(xml).find('CSV').text(), self.fields);\n                    if (self.order3Sources) {\n                        self.isReady = true;\n                        self._finishInitWhenReady();\n                    }\n                },\n                error: function(err) {\n                    console.log('Something went wrong: ' + err);\n                }\n            });\n        },\n\n        _loadLevel3Sources: function() {\n            var self = this;\n            $.ajax({\n                url: self.rootUrl + '/' + 'Norder3/Allsky.xml',\n                method: 'GET',\n                success: function(xml) {\n                    self.order3Sources = getSources(self, $(xml).find('CSV').text(), self.fields);\n                    if (self.order2Sources) {\n                        self.isReady = true;\n                        self._finishInitWhenReady();\n                    }\n                },\n                error: function(err) {\n                    console.log('Something went wrong: ' + err);\n                }\n            });\n        },\n\n        _finishInitWhenReady: function() {\n            this.view.requestRedraw();\n            this.loadNeededTiles();\n        },\n\n        draw: function(ctx, projection, frame, width, height, largestDim, zoomFactor) {\n            if (! this.isShowing || ! this.isReady) {\n                return;\n            }\n            this.drawSources(this.order1Sources, ctx, projection, frame, width, height, largestDim, zoomFactor);\n            this.drawSources(this.order2Sources, ctx, projection, frame, width, height, largestDim, zoomFactor);\n            this.drawSources(this.order3Sources, ctx, projection, frame, width, height, largestDim, zoomFactor);\n            \n            if (!this.tilesInView) {\n                return;\n            }\n            var sources, key, t;\n            for (var k=0; k<this.tilesInView.length; k++) {\n                t = this.tilesInView[k];\n                key = t[0] + '-' + t[1];\n                sources = this.sourcesCache.get(key);\n                if (sources) {\n                    this.drawSources(sources, ctx, projection, frame, width, height, largestDim, zoomFactor);\n                }\n            }\n            \n            \n            \n        },\n        drawSources: function(sources, ctx, projection, frame, width, height, largestDim, zoomFactor) {\n            if (! sources) {\n                return;\n            }\n            var s;\n            for (var k=0, len = sources.length; k<len; k++) {\n                s = sources[k];\n                if (!this.filterFn || this.filterFn(s)) {\n                    Catalog.drawSource(this, s, ctx, projection, frame, width, height, largestDim, zoomFactor);\n                }\n            }\n            for (var k=0, len = sources.length; k<len; k++) {\n                s = sources[k];\n                if (! s.isSelected) {\n                    continue;\n                }\n                if (!this.filterFn || this.filterFn(s)) {\n                    Catalog.drawSourceSelection(this, s, ctx);\n                }\n            }\n        },\n\n        getSources: function() {\n            var ret = [];\n            if (this.order1Sources) {\n                ret = ret.concat(this.order1Sources);\n            }\n            if (this.order2Sources) {\n                ret = ret.concat(this.order2Sources);\n            }\n            if (this.order3Sources) {\n                ret = ret.concat(this.order3Sources);\n            }\n            if (this.tilesInView) {\n                var sources, key, t;\n                for (var k=0; k<this.tilesInView.length; k++) {\n                    t = this.tilesInView[k];\n                    key = t[0] + '-' + t[1];\n                    sources = this.sourcesCache.get(key);\n                    if (sources) {\n                        ret = ret.concat(sources);\n                    }\n                }\n            }\n            \n            return ret;\n        },\n\n\n        \n        deselectAll: function() {\n            if (this.order1Sources) {\n                for (var k=0; k<this.order1Sources.length; k++) {\n                    this.order1Sources[k].deselect();\n                }\n            }\n\n            if (this.order2Sources) {\n                for (var k=0; k<this.order2Sources.length; k++) {\n                    this.order2Sources[k].deselect();\n                }\n            }\n\n            if (this.order3Sources) {\n                for (var k=0; k<this.order3Sources.length; k++) {\n                    this.order3Sources[k].deselect();\n                }\n            }\n            var keys = this.sourcesCache.keys();\n            for (key in keys) {\n                if ( ! this.sourcesCache[key]) {\n                    continue;\n                }\n                var sources = this.sourcesCache[key];\n                for (var k=0; k<sources.length; k++) {\n                    sources[k].deselect();\n                }\n            }\n        },\n\n        show: function() {\n            if (this.isShowing) {\n                return;\n            }\n            this.isShowing = true;\n            this.loadNeededTiles();\n            this.reportChange();\n        },\n        hide: function() {\n            if (! this.isShowing) {\n                return;\n            }\n            this.isShowing = false;\n            this.reportChange();\n        },\n        reportChange: function() {\n            this.view.requestRedraw();\n        },\n        \n        getTileURL: function(norder, npix) {\n            var dirIdx = Math.floor(npix/10000)*10000;\n            return this.rootUrl + \"/\" + \"Norder\" + norder + \"/Dir\" + dirIdx + \"/Npix\" + npix + \".tsv\";\n        },\n    \n        loadNeededTiles: function() {\n            if ( ! this.isShowing) {\n                return;\n            }\n            this.tilesInView = [];\n            \n            var norder = this.view.realNorder;\n            if (norder>this.maxOrder) {\n                norder = this.maxOrder;\n            }\n            if (norder<=this.maxOrderAllsky) {\n                return; // nothing to do, hurrayh !\n            }\n            var cells = this.view.getVisibleCells(norder, this.frame);\n            var ipixList, ipix;\n            for (var curOrder=3; curOrder<=norder; curOrder++) {\n                ipixList = [];\n                for (var k=0; k<cells.length; k++) {\n                    ipix = Math.floor(cells[k].ipix / Math.pow(4, norder - curOrder));\n                    if (ipixList.indexOf(ipix)<0) {\n                        ipixList.push(ipix);\n                    }\n                }\n                \n                // load needed tiles\n                for (var i=0; i<ipixList.length; i++) {\n                    this.tilesInView.push([curOrder, ipixList[i]]);\n                }\n            }\n            \n            var t, key;\n            var self = this;\n            for (var k=0; k<this.tilesInView.length; k++) {\n                t = this.tilesInView[k];\n                key = t[0] + '-' + t[1]; // t[0] is norder, t[1] is ipix\n                if (!this.sourcesCache.get(key)) {\n                    (function(self, norder, ipix) { // wrapping function is needed to be able to retrieve norder and ipix in ajax success function\n                        var key = norder + '-' + ipix;\n                        $.ajax({\n                            /*\n                            url: Aladin.JSONP_PROXY,\n                            data: {\"url\": self.getTileURL(norder, ipix)},\n                            */\n                            // ATTENTIOn : je passe en JSON direct, car je n'arrive pas a choper les 404 en JSONP\n                            url: self.getTileURL(norder, ipix),\n                            method: 'GET',\n                            //dataType: 'jsonp',\n                            success: function(tsv) {\n                                self.sourcesCache.set(key, getSources(self, tsv, self.fields));\n                                //self.view.requestRedraw();\n                            },\n                            error: function() {\n                                // on suppose qu'il s'agit d'une erreur 404\n                                self.sourcesCache.set(key, []);\n                            }\n                        });\n                    })(this, t[0], t[1]);\n                }\n            }\n        },\n\n        reportChange: function() { // TODO: to be shared with Catalog\n            this.view && this.view.requestRedraw();\n        }\n    \n\n    }; // END OF .prototype functions\n    \n    \n    return ProgressiveCat;\n})();\n    \n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File Sesame.js\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nimport { Utils } from \"./Utils.js\";\n\nexport let Sesame = (function() {\n    let Sesame = {};\n    \n    Sesame.cache = {};\n\n    Sesame.SESAME_URL = \"http://cds.u-strasbg.fr/cgi-bin/nph-sesame.jsonp\";\n\n    /** find RA, DEC for any target (object name or position)\n     *  if successful, callback is called with an object {ra: <ra-value>, dec: <dec-value>}\n     *  if not successful, errorCallback is called\n     */\n    Sesame.getTargetRADec = function(target, callback, errorCallback) {\n        if (!callback) {\n            return;\n        }\n        var isObjectName = /[a-zA-Z]/.test(target);\n\n        // try to parse as a position\n        if ( ! isObjectName) {\n            var coo = new Coo();\n\n            coo.parse(target);\n            if (callback) {\n                callback({ra: coo.lon, dec: coo.lat});\n            }\n        }\n        // ask resolution by Sesame\n        else {\n            Sesame.resolve(target,\n                   function(data) { // success callback\n                       callback({ra:  data.Target.Resolver.jradeg,\n                                 dec: data.Target.Resolver.jdedeg});\n                   },\n\n                   function(data) { // error callback\n                       if (errorCallback) {\n                           errorCallback();\n                       }\n                   }\n           );\n        }\n    };\n    \n    Sesame.resolve = function(objectName, callbackFunctionSuccess, callbackFunctionError) {\n        var sesameUrl = Sesame.SESAME_URL;\n        if (Utils.isHttpsContext()) {\n            sesameUrl = sesameUrl.replace('http://', 'https://')\n        }\n            \n\n        $.ajax({\n            url: sesameUrl ,\n            data: {\"object\": objectName},\n            method: 'GET',\n            dataType: 'jsonp',\n            success: function(data) {\n                if (data.Target && data.Target.Resolver && data.Target.Resolver) {\n                    callbackFunctionSuccess(data);\n                }\n                else {\n                    callbackFunctionError(data);\n                }\n            },\n            error: callbackFunctionError\n            });\n    };\n    \n    return Sesame;\n})();\n\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File MeasurementTable\n *\n * Graphic object showing measurement of a catalog\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nexport let MeasurementTable = (function() {\n\n\n    // constructor\n    function MeasurementTable(aladinLiteDiv) {\n        this.isShowing = false;\n\n        this.divEl = $('<div class=\"aladin-measurement-div\"></div>');\n        \n        $(aladinLiteDiv).append(this.divEl);\n    }\n\n    // show measurement associated with a given source\n    MeasurementTable.prototype.showMeasurement = function(source) {\n        this.divEl.empty();\n        var header = '<thead><tr>';\n        var content = '<tr>';\n        for (let key in source.data) {\n            header += '<th>' + key + '</th>';\n            content += '<td>' + source.data[key] + '</td>';\n        }\n        header += '</tr></thead>';\n        content += '</tr>';\n        this.divEl.append('<table>' + header + content + '</table>');\n        this.show();\n    };\n\n    MeasurementTable.prototype.show = function() {\n        this.divEl.show();\n    };\n    \n    MeasurementTable.prototype.hide = function() {\n        this.divEl.hide();\n    };\n    \n    \n    return MeasurementTable;\n})();\n\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File Location.js\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\n\nimport { Coo }            from \"./libs/astro/coo.js\";\nimport { CooFrameEnum }   from \"./CooFrameEnum.js\";\n\nexport let Location = (function () {\n    // constructor\n    function Location(locationDiv) {\n        this.$div = $(locationDiv);\n    };\n\n    Location.prototype.update = function (lon, lat, cooFrame, isViewCenterPosition) {\n        isViewCenterPosition = (isViewCenterPosition && isViewCenterPosition === true) || false;\n\n        var coo = new Coo(lon, lat, 7);\n        if (cooFrame == CooFrameEnum.J2000) {\n            this.$div.html(coo.format('s/'));\n        }\n        else if (cooFrame == CooFrameEnum.J2000d) {\n            this.$div.html(coo.format('d/'));\n        }\n        else {\n            this.$div.html(coo.format('d/'));\n        }\n\n        this.$div.toggleClass('aladin-reticleColor', isViewCenterPosition);\n    };\n\n    return Location;\n})();\n\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File URLBuilder\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\nimport { Coo } from './libs/astro/coo.js';\nimport { Utils } from './Utils.js';\nexport let URLBuilder = (function() {    \n\n    let URLBuilder = {\n        buildSimbadCSURL: function(target, radiusDegrees) {\n            if (target && (typeof target  === \"object\")) {\n                if ('ra' in target && 'dec' in target) {\n                    var coo = new Coo(target.ra, target.dec, 7);\n                    target = coo.format('s');\n                }\n            }\n            return 'https://alasky.unistra.fr/cgi/simbad-flat/simbad-cs.py?target=' + encodeURIComponent(target) + '&SR=' + radiusDegrees + '&format=votable&SRUNIT=deg&SORTBY=nbref';\n        },\n\n        buildNEDPositionCSURL: function(ra, dec, radiusDegrees) {\n                return 'https://ned.ipac.caltech.edu/cgi-bin/nph-objsearch?search_type=Near+Position+Search&of=xml_main&RA=' + ra + '&DEC=' + dec + '&SR=' + radiusDegrees;\n        },\n\n        buildNEDObjectCSURL: function(object, radiusDegrees) {\n                return 'https://ned.ipac.caltech.edu/cgi-bin/nph-objsearch?search_type=Near+Name+Search&radius=' + (60 * radiusDegrees) + '&of=xml_main&objname=' + object;\n        },\n\n        buildVizieRCSURL: function(vizCatId, target, radiusDegrees, options) {\n            console.log(target)\n            if (target && (typeof target  === \"object\")) {\n                if ('ra' in target && 'dec' in target) {\n                    var coo = new Coo(target.ra, target.dec, 7);\n\n                    target = coo.format('s');\n                }\n            }\n\n            var maxNbSources = 1e5;\n            if (options && options.hasOwnProperty('limit') && Utils.isNumber(options.limit)) {\n                maxNbSources = parseInt(options.limit);\n            }\n            return 'https://vizier.unistra.fr/viz-bin/votable?-source=' + vizCatId + '&-c=' + encodeURIComponent(target) + '&-out.max=' + maxNbSources + '&-c.rd=' + radiusDegrees;\n        },\n\n        buildSkyBotCSURL: function(ra, dec, radius, epoch, queryOptions) {\n            var url = 'http://vo.imcce.fr/webservices/skybot/skybotconesearch_query.php?-from=AladinLite';\n            url += '&RA=' + encodeURIComponent(ra);\n            url += '&DEC=' + encodeURIComponent(dec);\n            url += '&SR=' + encodeURIComponent(radius);\n            url += '&EPOCH=' + encodeURIComponent(epoch);\n\n            if (queryOptions) {\n                for (var key in queryOptions) {\n                    if (queryOptions.hasOwnProperty(key)) {\n                            url += '&' + key + '=' + encodeURIComponent(queryOptions[key]);\n                    }\n                }\n            }\n\n            return url;\n        }\n    \n\n    };\n\n    return URLBuilder;\n    \n})();\n\n","export let DiscoveryTree = (function () {\n    // Constructor\n    var DiscoveryTree = function (aladin) {\n        // activate Vue on the <div> that contains the component\n        new Vue({\n            el: '#ui',\n            methods: {\n                // Define the methods for the discovery-tree component\n                // to interact with the aladin viewer\n                getFovCorners() {\n                    return aladin.getFovCorners();\n                },\n                getCenter() {\n                    return aladin.getRaDec();\n                },\n                // Called when the user add a image survey\n                addImage(metadata) {\n                    const order = (+metadata.hips_order);\n                    const hipsTileFormat = metadata.hips_tile_format.split(' ');\n            \n                    let tileFormat;\n                    let color;\n                    if (hipsTileFormat.indexOf('fits') >= 0) {\n                        tileFormat = {\n                            FITSImage: {\n                                bitpix: parseInt(metadata.hips_pixel_bitpix)\n                            }\n                        };\n                        color = {\n                            Grayscale2Color: {\n                                color: [1.0, 1.0, 1.0],\n                                k: 1.0,\n                                transfer: \"asinh\"\n                            }\n                        };\n                    } else {\n                        color = \"Color\";\n\n                        if (hipsTileFormat.indexOf('png') >= 0) {\n                            tileFormat = {\n                                Image: {\n                                    format: \"png\"\n                                }\n                            };\n                        } else {\n                            tileFormat = {\n                                Image: {\n                                    format: \"jpeg\"\n                                }\n                            };\n                        }\n                    }\n\n                    let cuts = [undefined, undefined];\n                    if (metadata.hips_pixel_cut) {\n                        cuts = metadata.hips_pixel_cut.split(\" \");\n                    }\n                    let tileSize = 512;\n                    // Verify the validity of the tile width\n                    if (metadata.hips_tile_width) {\n                        let hipsTileWidth = parseInt(metadata.hips_tile_width);\n                        let isPowerOfTwo = hipsTileWidth && !(hipsTileWidth & (hipsTileWidth - 1));\n\n                        if (isPowerOfTwo === true) {\n                            tileSize = hipsTileWidth;\n                        }\n                    }\n                    let url = metadata.hips_service_url;\n                    if (url.startsWith('http://alasky')) {\n                        // From alasky one can directly use the https access\n                        url = url.replace('http', 'https');\n                    } else {\n                        // Pass by a proxy for extern http urls\n                        url = 'https://alasky.u-strasbg.fr/cgi/JSONProxy?url=' + url;\n                    }\n                    let survey = {\n                        properties: {\n                            url: url,\n                            maxOrder:  parseInt(metadata.hips_order),\n                            frame: {\n                                label: \"J2000\",\n                                system: \"J2000\"\n                            },\n                            tileSize: tileSize,\n                            format: tileFormat,\n                            minCutout: parseFloat(cuts[0]),\n                            maxCutout: parseFloat(cuts[1]),\n                        },\n                        color: color\n                    };\n\n                    aladin.setImageSurveysLayer([survey], \"base\");\n                },\n                // Called when the user add a catalog survey\n                addCatalog(metadata, center, radius) {\n                    if (metadata.hips_service_url) {\n                        const hips = A.catalogHiPS(metadata.hips_service_url, {\n                            onClick: 'showTable',\n                            name: metadata.ID,\n                        });\n                        aladin.addCatalog(hips);\n                    } else {\n                        console.log(metadata.obs_id, \"center, \", center, \" radius, \", radius)\n                        const catalog = A.catalogFromVizieR(\n                            metadata.obs_id,\n                            {\n                                ra: center[0],\n                                dec: center[1]\n                            },\n                            radius, {\n                                onClick: 'showTable',\n                                limit: 1000,\n                            }\n                        );\n                        aladin.addCatalog(catalog);\n                    }\n                },\n                // Called when the user add a HEALPix coverage\n                addCoverage(metadata) {\n                    const moc = A.MOCFromURL(metadata.moc_access_url);\n                    aladin.addMOC(moc);\n                },\n            },\n        });\n    }\n\n    return DiscoveryTree;\n})();\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File Aladin.js (main class)\n * Facade to expose Aladin Lite methods\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nimport { View } from \"./View.js\";\nimport { MOC } from \"./MOC.js\";\nimport { Utils } from \"./Utils.js\";\nimport { Overlay } from \"./Overlay.js\";\nimport { Footprint } from \"./Footprint.js\";\nimport { Circle } from \"./Circle.js\";\nimport { Ellipse } from \"./Ellipse.js\";\nimport { Polyline } from \"./Polyline.js\";\nimport { AladinUtils } from \"./AladinUtils.js\";\nimport { Logger } from \"./Logger.js\";\nimport { Catalog } from \"./Catalog.js\";\nimport { ProgressiveCat } from \"./ProgressiveCat.js\";\nimport { Sesame } from \"./Sesame.js\";\nimport { CooFrameEnum } from \"./CooFrameEnum.js\";\nimport { MeasurementTable } from \"./MeasurementTable.js\";\nimport { Location } from \"./Location.js\";\nimport { Source } from \"./Source.js\";\nimport { HpxImageSurvey } from \"./HpxImageSurvey.js\";\nimport { Coo } from \"./libs/astro/coo.js\";\nimport { CooConversion } from \"./CooConversion.js\";\nimport { Color } from \"./Color.js\";\nimport { ColorMap } from \"./ColorMap.js\";\nimport { URLBuilder } from \"./URLBuilder.js\";\nimport { HiPSDefinition } from \"./HiPSDefinition.js\";\nimport { DiscoveryTree } from \"./DiscoveryTree.js\";\nimport { ImageSurveyLayer } from \"./ImageSurveyLayer.js\";\n\nexport let Aladin = (function () {\n\n    // Constructor\n    var Aladin = function (aladinDiv, requestedOptions) {\n        // check that aladinDiv exists, stop immediately otherwise\n        if ($(aladinDiv).length == 0) {\n            return;\n        }\n        this.webglAPI = null;\n        var self = this;\n\n        // if not options was set, try to retrieve them from the query string\n        if (requestedOptions === undefined) {\n            requestedOptions = this.getOptionsFromQueryString();\n        }\n        requestedOptions = requestedOptions || {};\n\n\n        // 'fov' option was previsouly called 'zoom'\n        if ('zoom' in requestedOptions) {\n            var fovValue = requestedOptions.zoom;\n            delete requestedOptions.zoom;\n            requestedOptions.fov = fovValue;\n        }\n        // merge with default options\n        var options = {};\n        for (var key in Aladin.DEFAULT_OPTIONS) {\n            if (requestedOptions[key] !== undefined) {\n                options[key] = requestedOptions[key];\n            }\n            else {\n                options[key] = Aladin.DEFAULT_OPTIONS[key];\n            }\n        }\n        for (var key in requestedOptions) {\n            if (Aladin.DEFAULT_OPTIONS[key] === undefined) {\n                options[key] = requestedOptions[key];\n            }\n        }\n\n        this.options = options;\n\n        $(\"<style type='text/css'> .aladin-reticleColor { color: \" + this.options.reticleColor + \"; font-weight:bold;} </style>\").appendTo(aladinDiv);\n\n\n\n        this.aladinDiv = aladinDiv;\n\n        this.reduceDeformations = true;\n\n        // parent div\n        $(aladinDiv).addClass(\"aladin-container\");\n\n\n        var cooFrame = CooFrameEnum.fromString(options.cooFrame, CooFrameEnum.J2000);\n        // locationDiv is the div where we write the position\n        var locationDiv = $('<div class=\"aladin-location\">'\n            + (options.showFrame ? '<select class=\"aladin-frameChoice\"><option value=\"' + CooFrameEnum.J2000.label + '\" '\n                + (cooFrame == CooFrameEnum.J2000 ? 'selected=\"selected\"' : '') + '>J2000</option><option value=\"' + CooFrameEnum.J2000d.label + '\" '\n                + (cooFrame == CooFrameEnum.J2000d ? 'selected=\"selected\"' : '') + '>J2000d</option><option value=\"' + CooFrameEnum.GAL.label + '\" '\n                + (cooFrame == CooFrameEnum.GAL ? 'selected=\"selected\"' : '') + '>GAL</option></select>' : '')\n            + '<span class=\"aladin-location-text\"></span></div>')\n            .appendTo(aladinDiv);\n        // div where FoV value is written\n        var fovDiv = $('<div class=\"aladin-fov\"></div>').appendTo(aladinDiv);\n\n\n        // zoom control\n        if (options.showZoomControl) {\n            $('<div class=\"aladin-zoomControl\"><a href=\"#\" class=\"zoomPlus\" title=\"Zoom in\">+</a><a href=\"#\" class=\"zoomMinus\" title=\"Zoom out\">&ndash;</a></div>').appendTo(aladinDiv);\n        }\n\n        // maximize control\n        if (options.showFullscreenControl) {\n            $('<div class=\"aladin-fullscreenControl aladin-maximize\" title=\"Full screen\"></div>')\n                .appendTo(aladinDiv);\n        }\n        this.fullScreenBtn = $(aladinDiv).find('.aladin-fullscreenControl')\n        this.fullScreenBtn.click(function () {\n            self.toggleFullscreen(self.options.realFullscreen);\n        });\n        // react to fullscreenchange event to restore initial width/height (if user pressed ESC to go back from full screen)\n        $(document).on('fullscreenchange webkitfullscreenchange mozfullscreenchange MSFullscreenChange', function (e) {\n            var fullscreenElt = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;\n            if (fullscreenElt === null || fullscreenElt === undefined) {\n                self.fullScreenBtn.removeClass('aladin-restore');\n                self.fullScreenBtn.addClass('aladin-maximize');\n                self.fullScreenBtn.attr('title', 'Full screen');\n                $(self.aladinDiv).removeClass('aladin-fullscreen');\n\n                var fullScreenToggledFn = self.callbacksByEventName['fullScreenToggled'];\n                var isInFullscreen = self.fullScreenBtn.hasClass('aladin-restore');\n                (typeof fullScreenToggledFn === 'function') && fullScreenToggledFn(isInFullscreen);\n            }\n        });\n\n\n\n\n\n        // Aladin logo\n        $(\"<div class='aladin-logo-container'><a href='https://aladin.unistra.fr/' title='Powered by Aladin Lite' target='_blank'><div class='aladin-logo'></div></a></div>\").appendTo(aladinDiv);\n\n\n        // we store the boxes\n        this.boxes = [];\n\n        // measurement table\n        this.measurementTable = new MeasurementTable(aladinDiv);\n\n\n\n        var location = new Location(locationDiv.find('.aladin-location-text'));\n\n        // set different options\n        this.view = new View(this, location, fovDiv, cooFrame, options.fov);\n        this.view.setShowGrid(options.showCooGrid);\n\n        // retrieve available surveys\n        // TODO: replace call with MocServer\n        /*$.ajax({\n            url: \"//aladin.unistra.fr/java/nph-aladin.pl\",\n            data: { \"frame\": \"aladinLiteDic\" },\n            method: 'GET',\n            dataType: 'jsonp', // could this be repaced by json ??\n            success: function (data) {\n                var map = {};\n                for (var k = 0; k < data.length; k++) {\n                    map[data[k].id] = true;\n                }\n                // retrieve existing surveys\n                for (var k = 0; k < HpxImageSurvey.SURVEYS.length; k++) {\n                    if (!map[HpxImageSurvey.SURVEYS[k].id]) {\n                        data.push(HpxImageSurvey.SURVEYS[k]);\n                    }\n                }\n                HpxImageSurvey.SURVEYS = data;\n                self.view.setUnknownSurveyIfNeeded();\n            },\n            error: function () {\n            }\n        });*/\n\n        // layers control panel\n        // TODO : valeur des checkbox en fonction des options\n        // TODO : classe LayerBox\n        if (options.showLayersControl) {\n            var d = $('<div class=\"aladin-layersControl-container\" title=\"Manage layers\"><div class=\"aladin-layersControl\"></div></div>');\n            d.appendTo(aladinDiv);\n\n            var layerBox = $('<div class=\"aladin-box aladin-layerBox aladin-cb-list\"></div>');\n            layerBox.appendTo(aladinDiv);\n\n            this.boxes.push(layerBox);\n\n            // we return false so that the default event is not submitted, and to prevent event bubbling\n            d.click(function () { self.hideBoxes(); self.showLayerBox(); return false; });\n\n        }\n\n        // goto control panel\n        if (options.showGotoControl) {\n            var d = $('<div class=\"aladin-gotoControl-container\" title=\"Go to position\"><div class=\"aladin-gotoControl\"></div></div>');\n            d.appendTo(aladinDiv);\n\n            var gotoBox =\n                $('<div class=\"aladin-box aladin-gotoBox\">' +\n                    '<a class=\"aladin-closeBtn\">&times;</a>' +\n                    '<div style=\"clear: both;\"></div>' +\n                    '<form class=\"aladin-target-form\">Go to: <input type=\"text\" placeholder=\"Object name/position\" /></form></div>');\n            gotoBox.appendTo(aladinDiv);\n            this.boxes.push(gotoBox);\n\n            var input = gotoBox.find('.aladin-target-form input');\n            input.on(\"paste keydown\", function () {\n                $(this).removeClass('aladin-unknownObject'); // remove red border\n            });\n\n            // TODO : classe GotoBox\n            d.click(function () {\n                self.hideBoxes();\n                input.val('');\n                input.removeClass('aladin-unknownObject');\n                gotoBox.show();\n                input.focus();\n\n\n                return false;\n            });\n            gotoBox.find('.aladin-closeBtn').click(function () { self.hideBoxes(); return false; });\n        }\n\n        // simbad pointer tool\n        if (options.showSimbadPointerControl) {\n            var d = $('<div class=\"aladin-simbadPointerControl-container\" title=\"SIMBAD pointer\"><div class=\"aladin-simbadPointerControl\"></div></div>');\n            d.appendTo(aladinDiv);\n\n            d.click(function () {\n                self.view.setMode(View.TOOL_SIMBAD_POINTER);\n            });\n        }\n\n        // share control panel\n        if (options.showShareControl) {\n            var d = $('<div class=\"aladin-shareControl-container\" title=\"Get link for current view\"><div class=\"aladin-shareControl\"></div></div>');\n            d.appendTo(aladinDiv);\n\n            var shareBox =\n                $('<div class=\"aladin-box aladin-shareBox\">' +\n                    '<a class=\"aladin-closeBtn\">&times;</a>' +\n                    '<div style=\"clear: both;\"></div>' +\n                    'Link to previewer: <span class=\"info\"></span>' +\n                    '<input type=\"text\" class=\"aladin-shareInput\" />' +\n                    '</div>');\n            shareBox.appendTo(aladinDiv);\n            this.boxes.push(shareBox);\n\n\n            // TODO : classe GotoBox, GenericBox\n            d.click(function () {\n                self.hideBoxes();\n                shareBox.show();\n                var url = self.getShareURL();\n                shareBox.find('.aladin-shareInput').val(url).select();\n                document.execCommand('copy');\n\n                return false;\n            });\n            shareBox.find('.aladin-closeBtn').click(function () { self.hideBoxes(); return false; });\n        }\n\n\n        this.gotoObject(options.target, undefined, {forceAnimation: false});\n\n        if (options.log) {\n            var params = requestedOptions;\n            params['version'] = Aladin.VERSION;\n            Logger.log(\"startup\", params);\n        }\n\n        this.showReticle(options.showReticle);\n\n        if (options.catalogUrls) {\n            for (var k = 0, len = options.catalogUrls.length; k < len; k++) {\n                this.createCatalogFromVOTable(options.catalogUrls[k]);\n            }\n        }\n\n        // Add the image layers\n        // For that we check the survey key of options\n        // It can be given as a single string or an array of strings\n        // for multiple blending surveys\n        if (options.survey) {\n            (async () => {\n                if (typeof options.survey === Array) {\n                    let i = 0;\n                    options.survey.forEach(async (rootUrlOrId) => {\n                        const survey = await Aladin.createImageSurvey(rootUrlOrId);\n                        if (i == 0) {\n                            this.setImageSurvey(survey, \"base\");\n                        } else {\n                            this.addImageSurvey(survey, \"base\");\n                        }\n                        i++;\n                    });\n                } else {\n                    const survey = await Aladin.createImageSurvey(options.survey, \"base\");\n                    this.setImageSurvey(survey, \"base\");\n                }\n            })();\n\n        }\n        this.view.showCatalog(options.showCatalog);\n\n\n        var aladin = this;\n        $(aladinDiv).find('.aladin-frameChoice').change(function () {\n            aladin.setFrame($(this).val());\n        });\n\n\n        $(aladinDiv).find('.aladin-target-form').submit(function () {\n            aladin.gotoObject($(this).find('input').val(), function () {\n                $(aladinDiv).find('.aladin-target-form input').addClass('aladin-unknownObject');\n            });\n            return false;\n        });\n\n        var zoomPlus = $(aladinDiv).find('.zoomPlus');\n        zoomPlus.click(function () {\n            aladin.increaseZoom();\n            return false;\n        });\n        zoomPlus.bind('mousedown', function (e) {\n            e.preventDefault(); // to prevent text selection\n        });\n\n        var zoomMinus = $(aladinDiv).find('.zoomMinus');\n        zoomMinus.click(function () {\n            aladin.decreaseZoom();\n            return false;\n        });\n        zoomMinus.bind('mousedown', function (e) {\n            e.preventDefault(); // to prevent text selection\n        });\n\n\n\n        this.callbacksByEventName = {}; // we store the callback functions (on 'zoomChanged', 'positionChanged', ...) here\n\n        // initialize the Vue components\n        if (typeof Vue != \"undefined\") {\n            //this.discoverytree = new DiscoveryTree(this);\n        }\n\n        this.view.redraw();\n\n        // go to full screen ?\n        if (options.fullScreen) {\n            // strange behaviour to wait for a sec\n            window.setTimeout(function () { self.toggleFullscreen(self.options.realFullscreen); }, 10);\n        }\n    };\n\n    /**** CONSTANTS ****/\n    Aladin.VERSION = \"{ALADIN-LITE-VERSION-NUMBER}\"; // will be filled by the build.sh script\n\n    Aladin.JSONP_PROXY = \"https://alasky.unistra.fr/cgi/JSONProxy\";\n    //Aladin.JSONP_PROXY = \"https://alaskybis.unistra.fr/cgi/JSONProxy\";\n\n    // access to WASM libraries\n    Aladin.wasmLibs = {};\n    Aladin.webglAPI = [];\n    Aladin.DEFAULT_OPTIONS = {\n        target: \"0 +0\",\n        cooFrame: \"J2000\",\n        survey: \"P/DSS2/color\",\n        fov: 60,\n        showReticle: true,\n        showZoomControl: true,\n        showFullscreenControl: true,\n        showLayersControl: true,\n        showGotoControl: true,\n        showSimbadPointerControl: false,\n        showShareControl: false,\n        showCatalog: true, // TODO: still used ??\n        showFrame: true,\n        showCooGrid: false,\n        fullScreen: false,\n        reticleColor: \"rgb(178, 50, 178)\",\n        reticleSize: 22,\n        log: true,\n        allowFullZoomout: false,\n        realFullscreen: false,\n        showAllskyRing: false,\n        allskyRingColor: '#c8c8ff',\n        allskyRingWidth: 8,\n        pixelateCanvas: true\n    };\n\n\n    // realFullscreen: AL div expands not only to the size of its parent, but takes the whole available screen estate \n    Aladin.prototype.toggleFullscreen = function (realFullscreen) {\n        realFullscreen = Boolean(realFullscreen);\n\n        this.fullScreenBtn.toggleClass('aladin-maximize aladin-restore');\n        var isInFullscreen = this.fullScreenBtn.hasClass('aladin-restore');\n        this.fullScreenBtn.attr('title', isInFullscreen ? 'Restore original size' : 'Full screen');\n        $(this.aladinDiv).toggleClass('aladin-fullscreen');\n\n        if (realFullscreen) {\n            // go to \"real\" full screen mode\n            if (isInFullscreen) {\n                var d = this.aladinDiv;\n\n                if (d.requestFullscreen) {\n                    d.requestFullscreen();\n                }\n                else if (d.webkitRequestFullscreen) {\n                    d.webkitRequestFullscreen();\n                }\n                else if (d.mozRequestFullScreen) { // notice the difference in capitalization for Mozilla functions ...\n                    d.mozRequestFullScreen();\n                }\n                else if (d.msRequestFullscreen) {\n                    d.msRequestFullscreen();\n                }\n            }\n            // exit from \"real\" full screen mode\n            else {\n                if (document.exitFullscreen) {\n                    document.exitFullscreen();\n                }\n                else if (document.webkitExitFullscreen) {\n                    document.webkitExitFullscreen();\n                }\n                else if (document.mozCancelFullScreen) {\n                    document.mozCancelFullScreen();\n                }\n                else if (document.webkitExitFullscreen) {\n                    document.webkitExitFullscreen();\n                }\n            }\n        }\n\n        this.view.fixLayoutDimensions();\n\n        // force call to zoomChanged callback\n        var fovChangedFn = this.callbacksByEventName['zoomChanged'];\n        (typeof fovChangedFn === 'function') && fovChangedFn(this.view.fov);\n\n        var fullScreenToggledFn = this.callbacksByEventName['fullScreenToggled'];\n        (typeof fullScreenToggledFn === 'function') && fullScreenToggledFn(isInFullscreen);\n    };\n\n    Aladin.prototype.updateSurveysDropdownList = function (surveys) {\n        surveys = surveys.sort(function (a, b) {\n            if (!a.order) {\n                return a.id > b.id;\n            }\n            return a.order && a.order > b.order ? 1 : -1;\n        });\n        var select = $(this.aladinDiv).find('.aladin-surveySelection');\n        select.empty();\n        for (var i = 0; i < surveys.length; i++) {\n            var isCurSurvey = this.view.imageSurvey.id == surveys[i].id;\n            select.append($(\"<option />\").attr(\"selected\", isCurSurvey).val(surveys[i].id).text(surveys[i].name));\n        };\n    };\n\n    Aladin.prototype.setAngleRotation = function (theta) {\n        this.view.setAngleRotation(theta)\n    }\n\n    Aladin.prototype.getOptionsFromQueryString = function () {\n        var options = {};\n        var requestedTarget = $.urlParam('target');\n        if (requestedTarget) {\n            options.target = requestedTarget;\n        }\n        var requestedFrame = $.urlParam('frame');\n        if (requestedFrame && CooFrameEnum[requestedFrame]) {\n            options.frame = requestedFrame;\n        }\n        var requestedSurveyId = $.urlParam('survey');\n        if (requestedSurveyId && HpxImageSurvey.getSurveyInfoFromId(requestedSurveyId)) {\n            options.survey = requestedSurveyId;\n        }\n        var requestedZoom = $.urlParam('zoom');\n        if (requestedZoom && requestedZoom > 0 && requestedZoom < 180) {\n            options.zoom = requestedZoom;\n        }\n\n        var requestedShowreticle = $.urlParam('showReticle');\n        if (requestedShowreticle) {\n            options.showReticle = requestedShowreticle.toLowerCase() == 'true';\n        }\n\n        var requestedCooFrame = $.urlParam('cooFrame');\n        if (requestedCooFrame) {\n            options.cooFrame = requestedCooFrame;\n        }\n\n        var requestedFullscreen = $.urlParam('fullScreen');\n        if (requestedFullscreen !== undefined) {\n            options.fullScreen = requestedFullscreen;\n        }\n\n        return options;\n    };\n\n    // @API\n    Aladin.prototype.setFoV = Aladin.prototype.setFov = function (fovDegrees) {\n        this.view.setZoom(fovDegrees);\n    };\n\n    // @API\n    // (experimental) try to adjust the FoV to the given object name. Does nothing if object is not known from Simbad\n    Aladin.prototype.adjustFovForObject = function (objectName) {\n        var self = this;\n        this.getFovForObject(objectName, function (fovDegrees) {\n            self.setFoV(fovDegrees);\n        });\n    };\n\n\n    Aladin.prototype.getFovForObject = function (objectName, callback) {\n        var query = \"SELECT galdim_majaxis, V FROM basic JOIN ident ON oid=ident.oidref JOIN allfluxes ON oid=allfluxes.oidref WHERE id='\" + objectName + \"'\";\n        var url = '//simbad.u-strasbg.fr/simbad/sim-tap/sync?query=' + encodeURIComponent(query) + '&request=doQuery&lang=adql&format=json&phase=run';\n\n        var ajax = Utils.getAjaxObject(url, 'GET', 'json', false)\n        ajax.done(function (result) {\n            var defaultFov = 4 / 60; // 4 arcmin\n            var fov = defaultFov;\n\n            if ('data' in result && result.data.length > 0) {\n                var galdimMajAxis = Utils.isNumber(result.data[0][0]) ? result.data[0][0] / 60.0 : null; // result gives galdim in arcmin\n                var magV = Utils.isNumber(result.data[0][1]) ? result.data[0][1] : null;\n\n                if (galdimMajAxis !== null) {\n                    fov = 2 * galdimMajAxis;\n                }\n                else if (magV !== null) {\n                    if (magV < 10) {\n                        fov = 2 * Math.pow(2.0, (6 - magV / 2.0)) / 60;\n                    }\n                }\n            }\n\n            (typeof callback === 'function') && callback(fov);\n        });\n    };\n\n    Aladin.prototype.setFrame = function (frameName) {\n        if (!frameName) {\n            return;\n        }\n        var newFrame = CooFrameEnum.fromString(frameName, CooFrameEnum.J2000);\n        if (newFrame == this.view.cooFrame) {\n            return;\n        }\n\n        this.view.changeFrame(newFrame);\n        // màj select box\n        $(this.aladinDiv).find('.aladin-frameChoice').val(newFrame.label);\n    };\n\n    Aladin.prototype.setProjection = function (projectionName) {\n        if (!projectionName) {\n            return;\n        }\n        projectionName = projectionName.toLowerCase();\n        /*console.log('setProj', projectionName);\n\n        let projectionOptionElt = document.getElementById(projectionName);\n        console.log(\"jKJHKSDJHF\")\n\n        console.log(projectionOptionElt);\n        if (projectionOptionElt) {\n            console.log(\"jKJHKSDJHF\")\n            projectionOptionElt.selected = 'selected';\n        }*/\n        \n        this.view.changeProjection(projectionName);\n        //this.view.fov_limit = this.webglAPI.getMaxFieldOfView() * 180 / Math.PI;\n    };\n\n    /** point view to a given object (resolved by Sesame) or position\n     * @api\n     *\n     * @param: target; object name or position\n     * @callbackOptions: (optional) the object with key 'success' and/or 'error' containing the success and error callback functions.\n     *\n     */\n    Aladin.prototype.gotoObject = function (targetName, callbackOptions, options) {\n        let successCallback = undefined;\n        let errorCallback   = undefined;\n        if (typeof callbackOptions === 'object') {\n            if (callbackOptions.hasOwnProperty('success')) {\n                successCallback = callbackOptions.success;\n            }\n            if (callbackOptions.hasOwnProperty('error')) {\n                errorCallback = callbackOptions.error;\n            }\n        }\n        // this is for compatibility reason with the previous method signature which was function(targetName, errorCallback)\n        else if (typeof callbackOptions === 'function') {\n            errorCallback = callbackOptions;\n        }\n\n\n        var isObjectName = /[a-zA-Z]/.test(targetName);\n\n        // try to parse as a position\n        if (!isObjectName) {\n            var coo = new Coo();\n\n            coo.parse(targetName);\n            var lonlat = [coo.lon, coo.lat];\n            // Convert it to icrs if the coo system is galactic\n            if (this.view.aladin.webglAPI.cooSystem() === Aladin.wasmLibs.webgl.GALCooSys()) {\n                lonlat = this.view.aladin.webglAPI.Gal2J2000(coo.lon, coo.lat);\n            }\n            this.view.pointTo(lonlat[0], lonlat[1], options);\n\n            (typeof successCallback === 'function') && successCallback(this.getRaDec());\n        }\n        // ask resolution by Sesame\n        else {\n            var self = this;\n            Sesame.resolve(targetName,\n                function (data) { // success callback\n                    // Location given in icrs at J2000\n                    var ra = data.Target.Resolver.jradeg;\n                    var dec = data.Target.Resolver.jdedeg;\n\n                    self.view.pointTo(ra, dec, options);\n\n                    (typeof successCallback === 'function') && successCallback(self.getRaDec());\n                },\n                function (data) { // errror callback\n                    if (console) {\n                        console.log(\"Could not resolve object name \" + targetName);\n                        console.log(data);\n                    }\n                    (typeof errorCallback === 'function') && errorCallback();\n                });\n        }\n    };\n\n\n\n    /**\n     * go to a given position, expressed in the current coordinate frame\n     * \n     * @API\n     */\n    Aladin.prototype.gotoPosition = function (lon, lat) {\n        var radec;\n        // first, convert to J2000 if needed\n        if (this.view.cooFrame == CooFrameEnum.GAL) {\n            radec = CooConversion.GalacticToJ2000([lon, lat]);\n        }\n        else {\n            radec = [lon, lat];\n        }\n        this.view.pointTo(radec[0], radec[1]);\n    };\n\n\n    var doAnimation = function (aladin) {\n        var params = aladin.animationParams;\n        if (params == null || !params['running']) {\n            return;\n        }\n        var now = new Date().getTime();\n        // this is the animation end: set the view to the end position, and call complete callback \n        if (now > params['end']) {\n            aladin.gotoRaDec(params['raEnd'], params['decEnd']);\n\n            if (params['complete']) {\n                params['complete']();\n            }\n\n            return;\n        }\n\n        // compute current position\n        var fraction = (now - params['start']) / (params['end'] - params['start']);\n        var curPos = intermediatePoint(params['raStart'], params['decStart'], params['raEnd'], params['decEnd'], fraction);\n        var curRa = curPos[0];\n        var curDec = curPos[1];\n        //var curRa =  params['raStart'] + (params['raEnd'] - params['raStart']) * (now-params['start']) / (params['end'] - params['start']);\n        //var curDec = params['decStart'] + (params['decEnd'] - params['decStart']) * (now-params['start']) / (params['end'] - params['start']);\n\n        aladin.gotoRaDec(curRa, curDec);\n\n        setTimeout(function () { doAnimation(aladin); }, 50);\n\n    };\n\n    /*\n     * Stop all animations that have been initiated  by animateToRaDec or by zoomToFoV\n     * @API\n     *\n     */\n    Aladin.prototype.stopAnimation = function () {\n        if (this.zoomAnimationParams) {\n            this.zoomAnimationParams['running'] = false;\n        }\n        if (this.animationParams) {\n            this.animationParams['running'] = false;\n        }\n    }\n\n    /*\n     * animate smoothly from the current position to the given ra, dec\n     * \n     * the total duration (in seconds) of the animation can be given (otherwise set to 5 seconds by default)\n     * \n     * complete: a function to call once the animation has completed\n     * \n     * @API\n     * \n     */\n    Aladin.prototype.animateToRaDec = function (ra, dec, duration, complete) {\n        duration = duration || 5;\n\n        this.animationParams = null;\n\n        var animationParams = {};\n        animationParams['start'] = new Date().getTime();\n        animationParams['end'] = new Date().getTime() + 1000 * duration;\n        var raDec = this.getRaDec();\n        animationParams['raStart'] = raDec[0];\n        animationParams['decStart'] = raDec[1];\n        animationParams['raEnd'] = ra;\n        animationParams['decEnd'] = dec;\n        animationParams['complete'] = complete;\n        animationParams['running'] = true;\n\n        this.animationParams = animationParams;\n\n        doAnimation(this);\n    };\n\n    var doZoomAnimation = function (aladin) {\n        var params = aladin.zoomAnimationParams;\n        if (params == null || !params['running']) {\n            return;\n        }\n        var now = new Date().getTime();\n        // this is the zoom animation end: set the view to the end fov, and call complete callback \n        if (now > params['end']) {\n            aladin.setFoV(params['fovEnd']);\n\n            if (params['complete']) {\n                params['complete']();\n            }\n\n            return;\n        }\n\n        // compute current position\n        var fraction = (now - params['start']) / (params['end'] - params['start']);\n        var curFov = params['fovStart'] + (params['fovEnd'] - params['fovStart']) * Math.sqrt(fraction);\n\n        aladin.setFoV(curFov);\n\n        setTimeout(function () { doZoomAnimation(aladin); }, 50);\n\n    };\n    /*\n     * zoom smoothly from the current FoV to the given new fov to the given ra, dec\n     * \n     * the total duration (in seconds) of the animation can be given (otherwise set to 5 seconds by default)\n     * \n     * complete: a function to call once the animation has completed\n     * \n     * @API\n     * \n     */\n    Aladin.prototype.zoomToFoV = function (fov, duration, complete) {\n        duration = duration || 5;\n\n        this.zoomAnimationParams = null;\n\n        var zoomAnimationParams = {};\n        zoomAnimationParams['start'] = new Date().getTime();\n        zoomAnimationParams['end'] = new Date().getTime() + 1000 * duration;\n        var fovArray = this.getFov();\n        zoomAnimationParams['fovStart'] = Math.max(fovArray[0], fovArray[1]);\n        zoomAnimationParams['fovEnd'] = fov;\n        zoomAnimationParams['complete'] = complete;\n        zoomAnimationParams['running'] = true;\n\n        this.zoomAnimationParams = zoomAnimationParams;\n        doZoomAnimation(this);\n    };\n\n\n\n    /**\n     *  Compute intermediate point between points (lng1, lat1) and (lng2, lat2)\n     *  at distance fraction times the total distance (fraction between 0 and 1)\n     *\n     *  Return intermediate points in degrees\n     *\n     */\n    function intermediatePoint(lng1, lat1, lng2, lat2, fraction) {\n        function degToRad(d) {\n            return d * Math.PI / 180;\n        }\n        function radToDeg(r) {\n            return r * 180 / Math.PI;\n        }\n        var lat1 = degToRad(lat1);\n        var lng1 = degToRad(lng1);\n        var lat2 = degToRad(lat2);\n        var lng2 = degToRad(lng2);\n        var d = 2 * Math.asin(\n            Math.sqrt(Math.pow((Math.sin((lat1 - lat2) / 2)),\n                2) +\n                Math.cos(lat1) * Math.cos(lat2) *\n                Math.pow(Math.sin((lng1 - lng2) / 2), 2)));\n        var A = Math.sin((1 - fraction) * d) / Math.sin(d);\n        var B = Math.sin(fraction * d) / Math.sin(d);\n        var x = A * Math.cos(lat1) * Math.cos(lng1) + B *\n            Math.cos(lat2) * Math.cos(lng2);\n        var y = A * Math.cos(lat1) * Math.sin(lng1) + B *\n            Math.cos(lat2) * Math.sin(lng2);\n        var z = A * Math.sin(lat1) + B * Math.sin(lat2);\n        var lon = Math.atan2(y, x);\n        var lat = Math.atan2(z, Math.sqrt(Math.pow(x, 2) +\n            Math.pow(y, 2)));\n\n        return [radToDeg(lon), radToDeg(lat)];\n    };\n\n\n\n\n    /**\n     * get current [ra, dec] position of the center of the view\n     * \n     * @API\n     */\n    Aladin.prototype.getRaDec = function () {\n        /*if (this.view.cooFrame.system == CooFrameEnum.SYSTEMS.J2000) {\n            return [this.view.viewCenter.lon, this.view.viewCenter.lat];\n        }\n        else {\n            var radec = CooConversion.GalacticToJ2000([this.view.viewCenter.lon, this.view.viewCenter.lat]);\n            return radec;\n\n        }*/\n        let radec = this.webglAPI.getCenter();\n        return radec;\n    };\n\n\n    /**\n     * point to a given position, expressed as a ra,dec coordinate\n     * \n     * @API\n     */\n    Aladin.prototype.gotoRaDec = function (ra, dec) {\n        this.view.pointTo(ra, dec);\n    };\n\n    Aladin.prototype.showHealpixGrid = function (show) {\n        this.view.showHealpixGrid(show);\n    };\n\n    Aladin.prototype.showSurvey = function (show) {\n        this.view.showSurvey(show);\n    };\n    Aladin.prototype.showCatalog = function (show) {\n        this.view.showCatalog(show);\n    };\n    Aladin.prototype.showReticle = function (show) {\n        this.view.showReticle(show);\n        $('#displayReticle').attr('checked', show);\n    };\n    Aladin.prototype.removeLayers = function () {\n        this.view.removeLayers();\n    };\n\n    // these 3 methods should be merged into a unique \"add\" method\n    Aladin.prototype.addCatalog = function (catalog) {\n        this.view.addCatalog(catalog);\n    };\n    Aladin.prototype.addOverlay = function (overlay) {\n        this.view.addOverlay(overlay);\n    };\n    Aladin.prototype.addMOC = function (moc) {\n        this.view.addMOC(moc);\n    };\n    /*Aladin.prototype.addImageSurveyLayer = function (layer) {\n        console.log(\"add layer\", layer)\n        this.view.addImageSurveyLayer(layer)\n    };*/\n\n    // @api\n    /*Aladin.prototype.getBaseImageLayers = function () {\n        return this.view.imageSurvey;\n    };*/\n    // @param imageSurvey : HpxImageSurvey object or image survey identifier\n    // @api\n    // @old\n\n    Aladin.createImageSurvey = async function(rootUrlOrId) {\n        const survey = await HpxImageSurvey.create(rootUrlOrId);\n        return survey;\n    }\n\n    Aladin.prototype.setImageSurvey = function (survey, layer) {\n        let layerName;\n        if (layer) {\n            layerName = layer;\n        } else {\n            layerName = \"base\";\n        }\n\n        this.view.setImageSurvey(survey, layerName);\n    };\n\n    Aladin.prototype.setImageSurveysLayer = function (surveys, layer) {\n        let layerName;\n        if (layer) {\n            layerName = layer;\n        } else {\n            layerName = \"base\";\n        }\n\n        this.view.setImageSurveysLayer(surveys, layerName);\n    };\n\n    Aladin.prototype.removeImageSurveysLayer = function (layer) {\n        let layerName;\n        if (layer) {\n            layerName = layer;\n        } else {\n            layerName = \"base\";\n        }\n\n        this.view.removeImageSurveysLayer(layerName);\n    };\n\n    Aladin.prototype.moveImageSurveysLayerForward = function (layer) {\n        this.view.moveImageSurveysLayerForward(surveys, layerName);\n    };\n\n    Aladin.prototype.addImageSurvey = function (survey, layer) {\n        let layerName;\n        if (layer) {\n            layerName = layer;\n        } else {\n            layerName = \"base\";\n        }\n        this.view.addImageSurvey(survey, layerName);\n    };\n\n    Aladin.prototype.setOpacityLayer = function(opacity, layer) {\n        let layerName;\n        if (layer) {\n            layerName = layer;\n        } else {\n            layerName = \"base\";\n        }\n        this.webglAPI.setOpacityLayer(opacity, layer)\n    }\n\n    // @api\n    Aladin.prototype.setBaseImageSurveysLayer = function (surveys) {\n        this.view.setImageSurveysLayer(surveys, 'base');\n    };\n    Aladin.prototype.setBaseImageSurvey = function (survey) {\n        this.view.setImageSurvey(survey, 'base');\n    };\n    /*\n    // @api\n    Aladin.prototype.getOverlayImageLayer = function () {\n        return this.view.overlayImageSurvey;\n    };\n    // @api\n    Aladin.prototype.setOverlayImageLayer = function (imageSurvey, callback) {\n        this.view.setOverlayImageSurvey(imageSurvey, callback);\n    };\n    */\n\n    Aladin.prototype.increaseZoom = function (step) {\n        //if (!step) {\n        //    step = 5;\n        //}\n        //this.view.setZoomLevel(this.view.zoomLevel + step);\n        this.view.increaseZoom();\n    };\n\n    Aladin.prototype.decreaseZoom = function (step) {\n        //if (!step) {\n        //    step = 5;\n        //}\n        //this.view.setZoomLevel(this.view.zoomLevel - step);\n        this.view.decreaseZoom();\n    };\n\n\n    Aladin.prototype.createProgressiveCatalog = function (url, frame, maxOrder, options) {\n        return new ProgressiveCat(url, frame, maxOrder, options);\n    };\n\n    Aladin.prototype.createOverlay = function (options) {\n        return new Overlay(options);\n    };\n\n\n\n\n    Aladin.AVAILABLE_CALLBACKS = ['select', 'objectClicked', 'objectHovered', 'footprintClicked', 'footprintHovered', 'positionChanged', 'zoomChanged', 'click', 'mouseMove', 'fullScreenToggled', 'catalogReady'];\n    // API\n    //\n    // setting callbacks\n    Aladin.prototype.on = function (what, myFunction) {\n        if (Aladin.AVAILABLE_CALLBACKS.indexOf(what) < 0) {\n            return;\n        }\n\n        this.callbacksByEventName[what] = myFunction;\n    };\n\n    Aladin.prototype.select = function () {\n        this.fire('selectstart');\n    };\n\n    Aladin.prototype.fire = function (what, params) {\n        if (what === 'selectstart') {\n            this.view.setMode(View.SELECT);\n        }\n        else if (what === 'selectend') {\n            this.view.setMode(View.PAN);\n            var callbackFn = this.callbacksByEventName['select'];\n            (typeof callbackFn === 'function') && callbackFn(params);\n        }\n    };\n\n    Aladin.prototype.hideBoxes = function () {\n        if (this.boxes) {\n            for (var k = 0; k < this.boxes.length; k++) {\n                this.boxes[k].hide();\n            }\n        }\n    };\n\n    // ?\n    Aladin.prototype.updateCM = function () {\n\n    };\n\n    // TODO : LayerBox (or Stack?) must be extracted as a separate object\n    Aladin.prototype.showLayerBox = function () {\n        var self = this;\n\n        // first, update\n        var layerBox = $(this.aladinDiv).find('.aladin-layerBox');\n        layerBox.empty();\n        layerBox.append('<a class=\"aladin-closeBtn\">&times;</a>' +\n            '<div style=\"clear: both;\"></div>' +\n            '</div>');\n\n        layerBox.append('<div class=\"aladin-label\">Projection</div>');\n\n        let projectionElt = $('<select id=\"projectionChoice\"><option id=\"sinus\" value=\"sinus\">SINUS</option><option id=\"aitoff\" value=\"aitoff\">AITOFF</option><option id=\"mollweide\" value=\"mollweide\">MOLLWEIDE</option><option id=\"mercator\" value=\"mercator\">MERCATOR</option><option id=\"arc\" value=\"arc\">ARC</option><option id=\"tan\" value=\"tan\">TAN</option></select>');\n\n        layerBox.append(projectionElt)\n            .append('<br />');\n        projectionElt.change(function () {\n            self.setProjection($(this).val());\n        });\n        \n        layerBox.append('<div class=\"aladin-box-separator\"></div>' +\n        '<div class=\"aladin-label\">Overlay layers</div>');\n\n        //var cmDiv = layerBox.find('.aladin-cmap');\n\n        // fill color maps options\n        /*var cmSelect = layerBox.find('.aladin-cmSelection');\n        for (var k = 0; k < ColorMap.MAPS_NAMES.length; k++) {\n            cmSelect.append($(\"<option />\").text(ColorMap.MAPS_NAMES[k]));\n        }\n        console.log(self.getBaseImageLayer())\n        console.log(self.getBaseImageLayer().getColorMap())\n        cmSelect.val(self.getBaseImageLayer().getColorMap().mapName);*/\n\n\n        // loop over all overlay layers\n        var layers = this.view.allOverlayLayers;\n        var str = '<ul>';\n        for (var k = layers.length - 1; k >= 0; k--) {\n            var layer = layers[k];\n            var name = layer.name;\n            var checked = '';\n            if (layer.isShowing) {\n                checked = 'checked=\"checked\"';\n            }\n\n            var tooltipText = '';\n            var iconSvg = '';\n            if (layer.type == 'catalog' || layer.type == 'progressivecat') {\n                var nbSources = layer.getSources().length;\n                tooltipText = nbSources + ' source' + (nbSources > 1 ? 's' : '');\n\n                iconSvg = AladinUtils.SVG_ICONS.CATALOG;\n            }\n            else if (layer.type == 'moc') {\n                tooltipText = 'Coverage: ' + (100 * layer.skyFraction()).toFixed(3) + ' % of sky';\n\n                iconSvg = AladinUtils.SVG_ICONS.MOC;\n            }\n            else if (layer.type == 'overlay') {\n                iconSvg = AladinUtils.SVG_ICONS.OVERLAY;\n            }\n\n            var rgbColor = $('<div></div>').css('color', layer.color).css('color'); // trick to retrieve the color as 'rgb(,,)' - does not work for named colors :(\n            var labelColor = Color.getLabelColorForBackground(rgbColor);\n\n            // retrieve SVG icon, and apply the layer color\n            var svgBase64 = window.btoa(iconSvg.replace(/FILLCOLOR/g, layer.color));\n            str += '<li><div class=\"aladin-stack-icon\" style=\\'background-image: url(\"data:image/svg+xml;base64,' + svgBase64 + '\");\\'></div>';\n            str += '<input type=\"checkbox\" ' + checked + ' id=\"aladin_lite_' + name + '\"></input><label for=\"aladin_lite_' + name + '\" class=\"aladin-layer-label\" style=\"background: ' + layer.color + '; color:' + labelColor + ';\" title=\"' + tooltipText + '\">' + name + '</label></li>';\n        }\n        str += '</ul>';\n        layerBox.append(str);\n\n        layerBox.append('<div class=\"aladin-blank-separator\"></div>');\n\n        // gestion du réticule\n        var checked = '';\n        if (this.view.displayReticle) {\n            checked = 'checked=\"checked\"';\n        }\n        var reticleCb = $('<input type=\"checkbox\" ' + checked + ' id=\"displayReticle\" />');\n        layerBox.append(reticleCb).append('<label for=\"displayReticle\">Reticle</label><br/>');\n        reticleCb.change(function () {\n            self.showReticle($(this).is(':checked'));\n        });\n\n        // Gestion grille Healpix\n        checked = '';\n        if (this.view.displayHpxGrid) {\n            checked = 'checked=\"checked\"';\n        }\n        var hpxGridCb = $('<input type=\"checkbox\" ' + checked + ' id=\"displayHpxGrid\"/>');\n        layerBox.append(hpxGridCb).append('<label for=\"displayHpxGrid\">HEALPix grid</label><br/>');\n        hpxGridCb.change(function () {\n            self.showHealpixGrid($(this).is(':checked'));\n        });\n\n        // Equatorial grid plot\n        checked = '';\n        if (this.view.showGrid) {\n            checked = 'checked=\"checked\"';\n        }\n        var equatorialGridCb = $('<input type=\"checkbox\" ' + checked + ' id=\"displayEquatorialGrid\"/>');\n        layerBox.append(equatorialGridCb).append('<label for=\"displayEquatorialGrid\">Equatorial grid</label><br/>');\n        equatorialGridCb.change(function () {\n            let isChecked = $(this).is(':checked');\n            self.view.setShowGrid(isChecked);\n        });\n\n\n        layerBox.append('<div class=\"aladin-box-separator\"></div>' +\n            '<div class=\"aladin-label\">Tools</div>');\n        var exportBtn = $('<button class=\"aladin-btn\" type=\"button\">Export view as PNG</button>');\n        layerBox.append(exportBtn);\n        exportBtn.click(function () {\n            self.exportAsPNG();\n        });\n\n        layerBox.find('.aladin-closeBtn').click(function () { self.hideBoxes(); return false; });\n\n        // update list of surveys\n        /*this.updateSurveysDropdownList(HpxImageSurvey.getAvailableSurveys());\n        var surveySelection = $(this.aladinDiv).find('.aladin-surveySelection');\n        surveySelection.change(function () {\n            var survey = HpxImageSurvey.getAvailableSurveys()[$(this)[0].selectedIndex];\n            self.setImageSurvey(survey.id, function () {\n                var baseImgLayer = self.getBaseImageLayer();\n\n                if (baseImgLayer.useCors) {\n                    // update color map list with current value color map\n                    cmSelect.val(baseImgLayer.getColorMap().mapName);\n                    cmDiv.show();\n\n                    exportBtn.show();\n                }\n                else {\n                    cmDiv.hide();\n\n                    exportBtn.hide();\n                }\n            });\n\n\n\n        });\n\n        //// COLOR MAP management ////////////////////////////////////////////\n        // update color map\n        cmDiv.find('.aladin-cmSelection').change(function () {\n            var cmName = $(this).find(':selected').val();\n            self.getBaseImageLayer().getColorMap().update(cmName);\n        });\n\n        // reverse color map\n        cmDiv.find('.aladin-reverseCm').click(function () {\n            self.getBaseImageLayer().getColorMap().reverse();\n        });\n        if (this.getBaseImageLayer().useCors) {\n            cmDiv.show();\n            exportBtn.show();\n        }\n        else {\n            cmDiv.hide();\n            exportBtn.hide();\n        }\n        layerBox.find('.aladin-reverseCm').parent().attr('disabled', true);\n        */\n        //////////////////////////////////////////////////////////////////////\n\n\n        // handler to hide/show overlays\n        $(this.aladinDiv).find('.aladin-layerBox ul input').change(function () {\n            var layerName = ($(this).attr('id').substr(12));\n            var layer = self.layerByName(layerName);\n            if ($(this).is(':checked')) {\n                layer.show();\n            }\n            else {\n                layer.hide();\n            }\n        });\n\n        // finally show\n        layerBox.show();\n\n    };\n\n    Aladin.prototype.layerByName = function (name) {\n        var c = this.view.allOverlayLayers;\n        for (var k = 0; k < c.length; k++) {\n            if (name == c[k].name) {\n                return c[k];\n            }\n        }\n        return null;\n    };\n\n    // TODO : integrate somehow into API ?\n    Aladin.prototype.exportAsPNG = function (imgFormat) {\n        var w = window.open();\n        w.document.write('<img src=\"' + this.getViewDataURL() + '\">');\n        w.document.title = 'Aladin Lite snapshot';\n    };\n\n    /**\n     * Return the current view as a data URL (base64-formatted string)\n     * Parameters:\n     * - options (optional): object with attributs\n     *     * format (optional): 'image/png' or 'image/jpeg'\n     *     * width: width in pixels of the image to output\n     *     * height: height in pixels of the image to output\n     *\n     * @API\n    */\n    Aladin.prototype.getViewDataURL = function (options) {\n        var options = options || {};\n        // support for old API signature\n        if (typeof options !== 'object') {\n            var imgFormat = options;\n            options = { format: imgFormat };\n        }\n\n        return this.view.getCanvasDataURL(options.format, options.width, options.height);\n    }\n\n    /**\n     * Return the current view WCS as a key-value dictionary\n     * Can be useful in coordination with getViewDataURL\n     *\n     * @API\n    */\n    Aladin.prototype.getViewWCS = function (options) {\n        var raDec = this.getRaDec();\n        var fov = this.getFov();\n        // TODO: support for other projection methods than SIN\n        return {\n            NAXIS: 2,\n            NAXIS1: this.view.width,\n            NAXIS2: this.view.height,\n            RADECSYS: 'ICRS',\n            CRPIX1: this.view.width / 2,\n            CRPIX2: this.view.height / 2,\n            CRVAL1: raDec[0],\n            CRVAL2: raDec[1],\n            CTYPE1: 'RA---SIN',\n            CTYPE2: 'DEC--SIN',\n            CD1_1: fov[0] / this.view.width,\n            CD1_2: 0.0,\n            CD2_1: 0.0,\n            CD2_2: fov[1] / this.view.height\n        }\n    }\n\n    /** restrict FOV range\n     * @API\n     * @param minFOV in degrees when zoom in at max\n     * @param maxFOV in degreen when zoom out at max\n    */\n    Aladin.prototype.setFovRange = Aladin.prototype.setFOVRange = function (minFOV, maxFOV) {\n        if (minFOV > maxFOV) {\n            var tmp = minFOV;\n            minFOV = maxFOV;\n            maxFOV = tmp;\n        }\n\n        this.view.minFOV = minFOV;\n        this.view.maxFOV = maxFOV;\n\n    };\n\n    /**\n     * Transform pixel coordinates to world coordinates\n     * \n     * Origin (0,0) of pixel coordinates is at top left corner of Aladin Lite view\n     * \n     * @API\n     * \n     * @param x\n     * @param y\n     * \n     * @return a [ra, dec] array with world coordinates in degrees. Returns undefined is something went wrong\n     * \n     */\n    Aladin.prototype.pix2world = function (x, y) {\n        // this might happen at early stage of initialization\n        if (!this.view) {\n            return undefined;\n        }\n\n        //var xy = AladinUtils.viewToXy(x, y, this.view.width, this.view.height, this.view.largestDim, this.view.zoomFactor);\n\n        var radec;\n        try {\n            //radec = this.view.projection.unproject(xy.x, xy.y);\n            radec = this.view.aladin.webglAPI.screenToWorld(x, y);\n        }\n        catch (e) {\n            return undefined;\n        }\n\n        var res;\n        // Convert it to icrs j2000\n        if (this.view.aladin.webglAPI.cooSystem() === Aladin.wasmLibs.webgl.GALCooSys()) {\n            res = this.view.aladin.webglAPI.Gal2J2000(radec[0], radec[1]);\n        }\n\n        return res;\n    };\n\n    /**\n     * Transform world coordinates to pixel coordinates in the view\n     * \n     * @API\n     * \n     * @param ra  \n     * @param dec\n     * \n     * @return a [x, y] array with pixel coordinates in the view. Returns null if the projection failed somehow\n     *   \n     */\n    Aladin.prototype.world2pix = function (ra, dec) {\n        // this might happen at early stage of initialization\n        if (!this.view) {\n            return;\n        }\n\n        var xy;\n        if (this.view.cooFrame == CooFrameEnum.GAL) {\n            var lonlat = CooConversion.J2000ToGalactic([ra, dec]);\n            xy = this.view.projection.project(lonlat[0], lonlat[1]);\n        }\n        else {\n            xy = this.view.projection.project(ra, dec);\n        }\n        if (xy) {\n            var xyview = AladinUtils.xyToView(xy.X, xy.Y, this.view.width, this.view.height, this.view.largestDim, this.view.zoomFactor);\n            return [xyview.vx, xyview.vy];\n        }\n        else {\n            return null;\n        }\n    };\n\n    /**\n     * \n     * @API\n     * \n     * @param ra  \n     * @param nbSteps the number of points to return along each side (the total number of points returned is 4*nbSteps)\n     * \n     * @return set of points along the current FoV with the following format: [[ra1, dec1], [ra2, dec2], ..., [ra_n, dec_n]]\n     *   \n     */\n    Aladin.prototype.getFovCorners = function (nbSteps) {\n        // default value: 1\n        if (!nbSteps || nbSteps < 1) {\n            nbSteps = 1;\n        }\n\n        var points = [];\n        var x1, y1, x2, y2;\n        for (var k = 0; k < 4; k++) {\n            x1 = (k == 0 || k == 3) ? 0 : this.view.width - 1;\n            y1 = (k < 2) ? 0 : this.view.height - 1;\n            x2 = (k < 2) ? this.view.width - 1 : 0;\n            y2 = (k == 1 || k == 2) ? this.view.height - 1 : 0;\n\n            for (var step = 0; step < nbSteps; step++) {\n                let radec = this.webglAPI.screenToWorld(x1 + step / nbSteps * (x2 - x1), y1 + step / nbSteps * (y2 - y1));\n                points.push(radec);\n            }\n        }\n\n        return points;\n\n    };\n\n    /**\n     * @API\n     * \n     * @return the current FoV size in degrees as a 2-elements array\n     */\n    Aladin.prototype.getFov = function () {\n        var fovX = this.view.fov;\n        var s = this.getSize();\n        var fovY = s[1] / s[0] * fovX;\n        // TODO : take into account AITOFF projection where fov can be larger than 180\n        fovX = Math.min(fovX, 180);\n        fovY = Math.min(fovY, 180);\n\n        return [fovX, fovY];\n    };\n\n    /**\n     * @API\n     * \n     * @return the size in pixels of the Aladin Lite view\n     */\n    Aladin.prototype.getSize = function () {\n        return [this.view.width, this.view.height];\n    };\n\n    /**\n     * @API\n     * \n     * @return the jQuery object representing the DIV element where the Aladin Lite instance lies\n     */\n    Aladin.prototype.getParentDiv = function () {\n        return $(this.aladinDiv);\n    };\n\n    return Aladin;\n})();\n\n///////////////////////////////\n/////// Aladin Lite API ///////\n///////////////////////////////\nlet A = {};\n//// New API ////\n// For developers using Aladin lite: all objects should be created through the API, \n// rather than creating directly the corresponding JS objects\n// This facade allows for more flexibility as objects can be updated/renamed harmlessly\n\n//@API\nA.aladin = function (divSelector, options) {\n    return new Aladin($(divSelector)[0], options);\n};\n\n/*//@API\n// TODO : lecture de properties\nA.imageLayer = function (rootURLOrHiPSDefinition, options) {\n    return new HpxImageSurvey(rootURLOrHiPSDefinition, options);\n};*/\n\n// @API\nA.source = function (ra, dec, data, options) {\n    return new Source(ra, dec, data, options);\n};\n\n// @API\nA.marker = function (ra, dec, options, data) {\n    options = options || {};\n    options['marker'] = true;\n    return A.source(ra, dec, data, options);\n};\n\nA.createImageSurvey = async function(rootUrlOrId) {\n    const survey = await HpxImageSurvey.create(rootUrlOrId);\n    return survey;\n}\n\n// @API\nA.polygon = function (raDecArray) {\n    var l = raDecArray.length;\n    if (l > 0) {\n        // close the polygon if needed\n        if (raDecArray[0][0] != raDecArray[l - 1][0] || raDecArray[0][1] != raDecArray[l - 1][1]) {\n            raDecArray.push([raDecArray[0][0], raDecArray[0][1]]);\n        }\n    }\n    return new Footprint(raDecArray);\n};\n\n//@API\nA.polyline = function (raDecArray, options) {\n    return new Polyline(raDecArray, options);\n};\n\n\n// @API\nA.circle = function (ra, dec, radiusDeg, options) {\n    return new Circle([ra, dec], radiusDeg, options);\n};\n\n/**\n * \n * @API\n * \n * @param ra \n * @param dec\n * @param radiusRaDeg the radius along the ra axis in degrees\n * @param radiusDecDeg the radius along the dec axis in degrees\n * @param rotationDeg the rotation angle in degrees\n *   \n */\nA.ellipse = function (ra, dec, radiusRaDeg, radiusDecDeg, rotationDeg, options) {\n    return new Ellipse([ra, dec], radiusRaDeg, radiusDecDeg, rotationDeg, options);\n};\n\n// @API\nA.graphicOverlay = function (options) {\n    return new Overlay(options);\n};\n\n// Create a new image survey layer\n//\n// One can attach multiple surveys to 1 layer.\n// Those survey colors are blended together.\n// Layers are overlaid to each other\nA.imageSurveyLayer = function(name) {\n    return new ImageSurveyLayer(name);\n}\n\n// @API\nA.catalog = function (options) {\n    return new Catalog(options);\n};\n\n// @API\nA.catalogHiPS = function (rootURL, options) {\n    return new ProgressiveCat(rootURL, null, null, options);\n};\n\n// @API\n/*\n * return a Box GUI element to insert content\n */\nAladin.prototype.box = function (options) {\n    var box = new Box(options);\n    box.$parentDiv.appendTo(this.aladinDiv);\n\n    return box;\n};\n\n// @API\n/*\n * show popup at ra, dec position with given title and content\n */\nAladin.prototype.showPopup = function (ra, dec, title, content) {\n    this.view.catalogForPopup.removeAll();\n    var marker = A.marker(ra, dec, { popupTitle: title, popupDesc: content, useMarkerDefaultIcon: false });\n    this.view.catalogForPopup.addSources(marker);\n    this.view.catalogForPopup.show();\n\n    this.view.popup.setTitle(title);\n    this.view.popup.setText(content);\n    this.view.popup.setSource(marker);\n    this.view.popup.show();\n};\n\n// @API\n/*\n * hide popup\n */\nAladin.prototype.hidePopup = function () {\n    this.view.popup.hide();\n};\n\n// @API\n/*\n * return a URL allowing to share the current view\n */\nAladin.prototype.getShareURL = function () {\n    var radec = this.getRaDec();\n    var coo = new Coo();\n    coo.prec = 7;\n    coo.lon = radec[0];\n    coo.lat = radec[1];\n\n    return 'https://aladin.unistra.fr/AladinLite/?target=' + encodeURIComponent(coo.format('s')) +\n        '&fov=' + this.getFov()[0].toFixed(2) + '&survey=' + encodeURIComponent(this.getBaseImageLayer().id || this.getBaseImageLayer().rootUrl);\n};\n\n// @API\n/*\n * return, as a string, the HTML embed code\n */\nAladin.prototype.getEmbedCode = function () {\n    var radec = this.getRaDec();\n    var coo = new Coo();\n    coo.prec = 7;\n    coo.lon = radec[0];\n    coo.lat = radec[1];\n\n    var survey = this.getBaseImageLayer().id;\n    var fov = this.getFov()[0];\n    var s = '';\n    s += '<link rel=\"stylesheet\" href=\"https://aladin.unistra.fr/AladinLite/api/v2/latest/aladin.min.css\" />\\n';\n    s += '<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.9.1.min.js\" charset=\"utf-8\"></script>\\n';\n    s += '<div id=\"aladin-lite-div\" style=\"width:400px;height:400px;\"></div>\\n';\n    s += '<script type=\"text/javascript\" src=\"https://aladin.unistra.fr/AladinLite/api/v2/latest/aladin.min.js\" charset=\"utf-8\"></script>\\n';\n    s += '<script type=\"text/javascript\">\\n';\n    s += 'var aladin = A.aladin(\"#aladin-lite-div\", {survey: \"' + survey + 'P/DSS2/color\", fov: ' + fov.toFixed(2) + ', target: \"' + coo.format('s') + '\"});\\n';\n    s += '</script>';\n    return s;\n};\n\n// @API\n/*\n * Creates remotely a HiPS from a FITS image URL and displays it\n */\nAladin.prototype.displayFITS = function (url, layerName, options, successCallback, errorCallback) {\n    options = options || {};\n    var data = { url: url };\n    if (options.color) {\n        data.color = true;\n    }\n    if (options.outputFormat) {\n        data.format = options.outputFormat;\n    }\n    if (options.order) {\n        data.order = options.order;\n    }\n    if (options.nocache) {\n        data.nocache = options.nocache;\n    }\n    let self = this;\n    $.ajax({\n        url: 'https://alasky.unistra.fr/cgi/fits2HiPS',\n        data: data,\n        method: 'GET',\n        dataType: 'json',\n        success: function (response) {\n            if (response.status != 'success') {\n                console.error('An error occured: ' + response.message);\n                if (errorCallback) {\n                    errorCallback(response.message);\n                }\n                return;\n            }\n            var label = options.label || \"FITS image\";\n            var meta = response.data.meta;\n\n            (async () => {\n                let survey = await Aladin.createImageSurvey(response.data.url);\n                var transparency = (options && options.transparency) || 1.0;\n    \n                var executeDefaultSuccessAction = true;\n                if (successCallback) {\n                    executeDefaultSuccessAction = successCallback(meta.ra, meta.dec, meta.fov);\n                }\n                if (executeDefaultSuccessAction === true) {\n                    self.webglAPI.setCenter(meta.ra, meta.dec);\n                    self.setFoV(meta.fov);\n                }\n                // TODO! set an image survey once the already loaded surveys\n                // are READY! Otherwise it can lead to some congestion and avoid\n                // downloading the base tiles of the other surveys loading!\n                // This has to be fixed in the backend but a fast fix is just to wait\n                // before setting a new image survey\n                \n                    self.setImageSurvey(survey, layerName)\n                    // set transparency\n                    self.setOpacityLayer(transparency, layerName)\n\n            })();\n        }\n    });\n\n};\n\n// @API\n/*\n * Creates remotely a HiPS from a JPEG or PNG image with astrometry info\n * and display it\n */\nAladin.prototype.displayJPG = Aladin.prototype.displayPNG = function (url, layerName, options, successCallback, errorCallback) {\n    options = options || {};\n    options.color = true;\n    options.label = \"JPG/PNG image\";\n    options.outputFormat = 'png';\n    this.displayFITS(url, layerName, options, successCallback, errorCallback);\n};\n\nAladin.prototype.setReduceDeformations = function (reduce) {\n    this.reduceDeformations = reduce;\n    this.view.requestRedraw();\n}\n\n// API\nA.footprintsFromSTCS = function (stcs) {\n    var footprints = Overlay.parseSTCS(stcs);\n\n    return footprints;\n}\n\n// API\nA.MOCFromURL = function (url, options, successCallback) {\n    var moc = new MOC(options);\n    moc.dataFromFITSURL(url, successCallback);\n\n    return moc;\n};\n\n// API\nA.MOCFromJSON = function (jsonMOC, options) {\n    var moc = new MOC(options);\n    moc.dataFromJSON(jsonMOC);\n\n    return moc;\n};\n\n\n// TODO: try first without proxy, and then with, if param useProxy not set\n// API\nA.catalogFromURL = function (url, options, successCallback, useProxy) {\n    var catalog = A.catalog(options);\n    // TODO: should be self-contained in Catalog class\n    Catalog.parseVOTable(url, function (sources) {\n        catalog.addSources(sources);\n        if (successCallback) {\n            successCallback(sources);\n        }\n    },\n        catalog.maxNbSources, useProxy,\n        catalog.raField, catalog.decField\n    );\n\n    return catalog;\n};\n\n// API\n// @param target: can be either a string representing a position or an object name, or can be an object with keys 'ra' and 'dec' (values being in decimal degrees)\nA.catalogFromSimbad = function (target, radius, options, successCallback) {\n    options = options || {};\n    if (!('name' in options)) {\n        options['name'] = 'Simbad';\n    }\n    var url = URLBuilder.buildSimbadCSURL(target, radius);\n    return A.catalogFromURL(url, options, successCallback, false);\n};\n\n// API\nA.catalogFromNED = function (target, radius, options, successCallback) {\n    options = options || {};\n    if (!('name' in options)) {\n        options['name'] = 'NED';\n    }\n    var url;\n    if (target && (typeof target === \"object\")) {\n        if ('ra' in target && 'dec' in target) {\n            url = URLBuilder.buildNEDPositionCSURL(target.ra, target.dec, radius);\n        }\n    }\n    else {\n        var isObjectName = /[a-zA-Z]/.test(target);\n        if (isObjectName) {\n            url = URLBuilder.buildNEDObjectCSURL(target, radius);\n        }\n        else {\n            var coo = new Coo();\n            coo.parse(target);\n            url = URLBuilder.buildNEDPositionCSURL(coo.lon, coo.lat, radius);\n        }\n    }\n\n    return A.catalogFromURL(url, options, successCallback);\n};\n\n// API\nA.catalogFromVizieR = function (vizCatId, target, radius, options, successCallback) {\n    options = options || {};\n    if (!('name' in options)) {\n        options['name'] = 'VizieR:' + vizCatId;\n    }\n    var url = URLBuilder.buildVizieRCSURL(vizCatId, target, radius, options);\n    console.log(url);\n    return A.catalogFromURL(url, options, successCallback, false);\n};\n\n// API\nA.catalogFromSkyBot = function (ra, dec, radius, epoch, queryOptions, options, successCallback) {\n    queryOptions = queryOptions || {};\n    options = options || {};\n    if (!('name' in options)) {\n        options['name'] = 'SkyBot';\n    }\n    var url = URLBuilder.buildSkyBotCSURL(ra, dec, radius, epoch, queryOptions);\n    return A.catalogFromURL(url, options, successCallback, false);\n};\n\nA.hipsDefinitionFromURL = function(url, successCallback) {\n    HiPSDefinition.fromURL(url, successCallback);\n};\n\n\nA.init = Promise.all([import('@fxpineau/healpix'), import('../core/pkg')]).then(async (values) => {\n    let [hpxAPI, webglAPI] = values;\n\n    // HEALPix library\n    Aladin.wasmLibs.hpx = hpxAPI;\n    // WebGL library\n    Aladin.wasmLibs.webgl = webglAPI;\n});\n\n// this is ugly for sure and there must be a better way using Webpack magic\nwindow.A = A;\n\n","// Copyright 2013-2017 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File HiPSDefinition\n * \n * Author: Thomas Boch [CDS]\n * \n *****************************************************************************/\n\nimport { Utils } from \"./Utils.js\";\n\nexport let HiPSDefinition = (function() {\n\n    // constructor\n    function HiPSDefinition(properties) {\n        this.properties = properties; // key-value object corresponding to the properties file\n\n        this.id = this.getID();\n        this.obsTitle = properties['obs_title'];\n        this.frame = properties['hips_frame'];\n        this.order = parseInt(properties['hips_order']);\n        this.clientSortKey = properties['client_sort_key'];\n        this.tileFormats = properties.hasOwnProperty('hips_tile_format') && properties['hips_tile_format'].split(' ');\n        this.urls = [];\n        this.urls.push(properties['hips_service_url']);\n        var k = 1;\n        while (properties.hasOwnProperty('hips_service_url_' + k)) {\n            this.urls.push(properties['hips_service_url_' + k]);\n            k++;\n        }\n\n        this.clientApplications = properties['client_application'];\n    };\n\n    HiPSDefinition.prototype = {\n\n        getServiceURLs: function(httpsOnly) {\n            httpsOnly = httpsOnly === true;\n\n            // TODO: TO BE COMPLETED\n        },\n\n        // return the ID according to the properties\n        getID: function() {\n            // ID is explicitely given\n            if (this.properties.hasOwnProperty('ID')) {\n                return this.properties['ID'];\n            }\n\n            var id = null;\n            // ID might be built from different fields\n            if (this.properties.hasOwnProperty('creator_did')) {\n                id = this.properties['creator_did'];\n            }\n            if (id==null && this.properties.hasOwnProperty('publisher_did')) {\n                id = this.properties['publisher_did'];\n            }\n\n            if (id != null) {\n                // remove ivo:// prefix\n                if (id.slice(0, 6) === 'ivo://') {\n                    id = id.slice(6);\n                }\n\n                // '?' are replaced by '/'\n                id = id.replace(/\\?/g, '/')\n            }\n\n            return id;\n        }\n\n\n\n    };\n\n    // cache (at the source code level) of the list of HiPS\n    // this is the result to a query to http://alasky.u-strasbg.fr/MocServer/query?dataproduct_type=image&client_application=AladinLite&fmt=json&fields=ID,obs_title,client_sort_key,client_application,hips_service_url*,hips_order,hips_tile_format,hips_frame\n    var AL_CACHE_CLASS_LEVEL = [\n    /*{\n    \"ID\": \"CDS/P/2MASS/color\",\n    \"obs_title\": \"2MASS color J (1.23 microns), H (1.66 microns), K (2.16 microns)\",\n    \"client_sort_key\": \"04-001-00\",\n    \"client_application\":[ \"AladinLite\", \"AladinDesktop\"],\n    \"hips_order\": \"9\",\n    \"hips_frame\": \"equatorial\",\n    \"hips_tile_format\": \"jpeg\",\n    \"hips_service_url\": \"http://alasky.unistra.fr/2MASS/Color\",\n    \"hips_service_url_1\": \"http://alaskybis.unistra.fr/2MASS/Color\",\n    \"hips_service_url_2\": \"https://alaskybis.unistra.fr/2MASS/Color\"\n    }, {\n    \"ID\": \"CDS/P/AKARI/FIS/Color\",\n    \"obs_title\": \"AKARI Far-infrared All-Sky Survey - color composition WideL/WideS/N60\",\n    \"client_sort_key\": \"04-05-00\",\n    \"client_application\":[ \"AladinLite\", \"AladinDesktop\"],\n    \"hips_order\": \"5\",\n    \"hips_frame\": \"equatorial\",\n    \"hips_tile_format\": \"png jpeg\",\n    \"hips_service_url\": \"http://alasky.unistra.fr/AKARI-FIS/ColorLSN60\",\n    \"hips_service_url_1\": \"http://alaskybis.unistra.fr/AKARI-FIS/ColorLSN60\",\n    \"hips_service_url_2\": \"https://alaskybis.unistra.fr/AKARI-FIS/ColorLSN60\"\n    }, {\n    \"ID\": \"CDS/P/DECaLS/DR3/color\",\n    \"obs_title\": \"DECaLS DR3 color\",\n    \"hips_frame\": \"equatorial\",\n    \"hips_order\": \"11\",\n    \"hips_tile_format\": \"jpeg\",\n    \"hips_service_url\": \"http://alasky.unistra.fr/DECaLS/DR3/color\"\n}, {\n    \"ID\": \"CDS/P/DSS2/blue\",\n    \"obs_title\": \"DSS2 Blue (XJ+S)\",\n    \"client_sort_key\": \"03-01-03\",\n    \"client_application\":[ \"AladinLite\", \"AladinDesktop\"],\n    \"hips_order\": \"9\",\n    \"hips_frame\": \"equatorial\",\n    \"hips_tile_format\": \"jpeg fits\",\n    \"hips_service_url\": \"http://alasky.unistra.fr/DSS/DSS2-blue-XJ-S\",\n    \"hips_service_url_1\": \"http://alaskybis.unistra.fr/DSS/DSS2-blue-XJ-S\",\n    \"hips_service_url_2\": \"https://alaskybis.unistra.fr/DSS/DSS2-blue-XJ-S\",\n    \"hips_service_url_3\": \"http://healpix.ias.u-psud.fr/DSS2Blue\"\n}, {\n    \"ID\": \"CDS/P/DSS2/color\",\n    \"obs_title\": \"DSS colored\",\n    \"client_sort_key\": \"03-00\",\n    \"client_application\":[ \"AladinLite\", \"AladinDesktop\"],\n    \"hips_order\": \"9\",\n    \"hips_frame\": \"equatorial\",\n    \"hips_tile_format\": \"jpeg\",\n    \"hips_service_url\": \"http://alasky.unistra.fr/DSS/DSSColor\",\n    \"hips_service_url_1\": \"http://alaskybis.unistra.fr/DSS/DSSColor\",\n    \"hips_service_url_2\": \"https://alaskybis.unistra.fr/DSS/DSSColor\",\n    \"hips_service_url_3\": \"http://healpix.ias.u-psud.fr/DSSColorNew\",\n    \"hips_service_url_4\": \"http://skies.esac.esa.int/DSSColor/\"\n}, {\n    \"ID\": \"CDS/P/DSS2/red\",\n    \"obs_title\": \"DSS2 Red (F+R)\",\n    \"client_sort_key\": \"03-01-02\",\n    \"client_application\":[ \"AladinLite\", \"AladinDesktop\"],\n    \"hips_order\": \"9\",\n    \"hips_frame\": \"equatorial\",\n    \"hips_tile_format\": \"jpeg fits\",\n    \"hips_service_url\": \"http://alasky.unistra.fr/DSS/DSS2Merged\",\n    \"hips_service_url_1\": \"http://alaskybis.unistra.fr/DSS/DSS2Merged\",\n    \"hips_service_url_2\": \"https://alaskybis.unistra.fr/DSS/DSS2Merged\",\n    \"hips_service_url_3\": \"http://healpix.ias.u-psud.fr/DSS2Merged\"\n}, {\n    \"ID\": \"P/PanSTARRS/DR1/g\",\n    \"hips_service_url\": \"http://alasky.u-strasbg.fr/Pan-STARRS/DR1/g\",\n    \"obs_title\": \"PanSTARRS DR1 g\",\n    \"hips_order\": 11,\n    \"hips_frame\": \"equatorial\",\n    \"hips_tile_format\": \"jpeg fits\"\n}, {\n    \"ID\": \"CDS/P/Fermi/color\",\n    \"obs_title\": \"Fermi Color HEALPix survey\",\n    \"client_sort_key\": \"00-01-01\",\n    \"client_application\":[ \"AladinLite\", \"AladinDesktop\"],\n    \"hips_order\": \"3\",\n    \"hips_frame\": \"equatorial\",\n    \"hips_tile_format\": \"jpeg\",\n    \"hips_service_url\": \"http://alasky.unistra.fr/Fermi/Color\",\n    \"hips_service_url_1\": \"http://alaskybis.unistra.fr/Fermi/Color\",\n    \"hips_service_url_2\": \"https://alaskybis.unistra.fr/Fermi/Color\"\n}, {\n    \"ID\": \"CDS/P/Finkbeiner\",\n    \"obs_title\": \"Finkbeiner Halpha composite survey\",\n    \"client_sort_key\": \"06-01\",\n    \"client_application\":[ \"AladinLite\", \"AladinDesktop\"],\n    \"hips_order\": \"3\",\n    \"hips_frame\": \"galactic\",\n    \"hips_tile_format\": \"jpeg fits\",\n    \"hips_service_url\": \"http://alasky.unistra.fr/FinkbeinerHalpha\",\n    \"hips_service_url_1\": \"http://alaskybis.unistra.fr/FinkbeinerHalpha\",\n    \"hips_service_url_2\": \"https://alaskybis.unistra.fr/FinkbeinerHalpha\"\n}, {\n    \"ID\": \"CDS/P/GALEXGR6/AIS/color\",\n    \"obs_title\": \"GALEX GR6 AIS (until March 2014)- Color composition\",\n    \"client_sort_key\": \"02-01-01\",\n    \"client_application\":[ \"AladinLite\", \"AladinDesktop\"],\n    \"hips_order\": \"8\",\n    \"hips_frame\": \"equatorial\",\n    \"hips_tile_format\": \"png jpeg\",\n    \"hips_service_url\": \"http://alasky.unistra.fr/GALEX/GR6-03-2014/AIS-Color\",\n    \"hips_service_url_1\": \"http://alaskybis.unistra.fr/GALEX/GR6-03-2014/AIS-Color\",\n    \"hips_service_url_2\": \"https://alaskybis.unistra.fr/GALEX/GR6-03-2014/AIS-Color\"\n}, {\n    \"ID\": \"CDS/P/IRIS/color\",\n    \"obs_title\": \"IRAS-IRIS HEALPix survey, color\",\n    \"client_sort_key\": \"04-02-01\",\n    \"client_application\":[ \"AladinLite\", \"AladinDesktop\"],\n    \"hips_order\": \"3\",\n    \"hips_frame\": \"galactic\",\n    \"hips_tile_format\": \"jpeg\",\n    \"hips_service_url\": \"http://alasky.unistra.fr/IRISColor\",\n    \"hips_service_url_1\": \"http://alaskybis.unistra.fr/IRISColor\",\n    \"hips_service_url_2\": \"https://alaskybis.unistra.fr/IRISColor\",\n    \"hips_service_url_3\": \"http://healpix.ias.u-psud.fr/IRISColor\",\n    \"hips_service_url_4\": \"http://skies.esac.esa.int/IRISColor/\"\n}, {\n    \"ID\": \"CDS/P/Mellinger/color\",\n    \"obs_title\": \"Mellinger optical survey, color\",\n    \"client_sort_key\": \"03-03\",\n    \"client_application\":[ \"AladinLite\", \"AladinDesktop\"],\n    \"hips_order\": \"4\",\n    \"hips_frame\": \"galactic\",\n    \"hips_tile_format\": \"jpeg\",\n    \"hips_service_url\": \"http://alasky.unistra.fr/MellingerRGB\",\n    \"hips_service_url_1\": \"http://alaskybis.unistra.fr/MellingerRGB\",\n    \"hips_service_url_2\": \"https://alaskybis.unistra.fr/MellingerRGB\"\n}, {\n    \"ID\": \"CDS/P/SDSS9/color\",\n    \"obs_title\": \"SDSS 9 color\",\n    \"client_sort_key\": \"03-02-01\",\n    \"client_application\":[ \"AladinLite\", \"AladinDesktop\"],\n    \"hips_order\": \"10\",\n    \"hips_frame\": \"equatorial\",\n    \"hips_tile_format\": \"jpeg\",\n    \"hips_service_url\": \"http://alasky.unistra.fr/SDSS/DR9/color\",\n    \"hips_service_url_1\": \"http://alaskybis.unistra.fr/SDSS/DR9/color\",\n    \"hips_service_url_2\": \"https://alaskybis.unistra.fr/SDSS/DR9/color\",\n    \"hips_service_url_3\": \"http://healpix.ias.u-psud.fr/SDSS9Color\",\n    \"hips_service_url_4\": \"http://skies.esac.esa.int/SDSS9Color/\"\n}, {\n    \"ID\": \"CDS/P/SPITZER/color\",\n    \"obs_title\": \"IRAC HEALPix survey, color\",\n    \"client_sort_key\": \"04-03-00\",\n    \"client_application\":[ \"AladinLite\", \"AladinDesktop\"],\n    \"hips_order\": \"9\",\n    \"hips_frame\": \"galactic\",\n    \"hips_tile_format\": \"jpeg\",\n    \"hips_service_url\": \"http://alasky.unistra.fr/SpitzerI1I2I4color\",\n    \"hips_service_url_1\": \"http://alaskybis.unistra.fr/SpitzerI1I2I4color\",\n    \"hips_service_url_2\": \"https://alaskybis.unistra.fr/SpitzerI1I2I4color\",\n    \"hips_service_url_3\": \"http://healpix.ias.u-psud.fr/SPITZERColor\"\n}, {\n    \"ID\": \"CDS/P/allWISE/color\",\n    \"obs_title\": \"AllWISE color  Red (W4) , Green (W2) , Blue (W1) from raw Atlas Images\",\n    \"client_sort_key\": \"04-003-00\",\n    \"client_application\":[ \"AladinLite\", \"AladinDesktop\"],\n    \"hips_order\": \"8\",\n    \"hips_frame\": \"equatorial\",\n    \"hips_tile_format\": \"jpeg\",\n    \"hips_service_url\": \"http://alasky.unistra.fr/AllWISE/RGB-W4-W2-W1\",\n    \"hips_service_url_1\": \"http://alaskybis.unistra.fr/AllWISE/RGB-W4-W2-W1\",\n    \"hips_service_url_2\": \"https://alaskybis.unistra.fr/AllWISE/RGB-W4-W2-W1\"\n}, {\n    \"ID\": \"IPAC/P/GLIMPSE360\",\n    \"obs_title\": \"GLIMPSE360: Spitzer's Infrared Milky Way\",\n    \"client_sort_key\": \"04-03-0\",\n    \"client_application\":[ \"AladinLite\", \"AladinDesktop\"],\n    \"hips_order\": \"9\",\n    \"hips_frame\": \"equatorial\",\n    \"hips_tile_format\": \"jpeg\",\n    \"hips_service_url\": \"http://www.spitzer.caltech.edu/glimpse360/aladin/data\"\n}, {\n    \"ID\": \"JAXA/P/MAXI_SSC_SUM\",\n    \"hips_tile_format\": \"png\",\n    \"hips_frame\": \"equatorial\",\n    \"obs_title\": \"MAXI SSC all-sky image integrated for 4.5 years\",\n    \"hips_order\": \"6\",\n    \"hips_service_url\": \"http://darts.isas.jaxa.jp/pub/judo2/HiPS/maxi_ssc_sum\",\n    \"hips_service_url_1\": \"http://alasky.unistra.fr//JAXA/JAXA_P_MAXI_SSC_SUM\",\n    \"hips_service_url_2\": \"http://alaskybis.unistra.fr//JAXA/JAXA_P_MAXI_SSC_SUM\",\n    \"hips_service_url_3\": \"https://alaskybis.unistra.fr//JAXA/JAXA_P_MAXI_SSC_SUM\"\n}, {\n    \"ID\": \"JAXA/P/SWIFT_BAT_FLUX\",\n    \"hips_tile_format\": \"png\",\n    \"hips_frame\": \"equatorial\",\n    \"obs_title\": \"Swift-BAT 70-month all-sray hard X-ray survey image\",\n    \"hips_order\": \"6\",\n    \"hips_service_url\": \"http://darts.isas.jaxa.jp/pub/judo2/HiPS/swift_bat_flux/\",\n    \"hips_service_url_1\": \"http://alasky.unistra.fr//JAXA/JAXA_P_SWIFT_BAT_FLUX\",\n    \"hips_service_url_2\": \"http://alaskybis.unistra.fr//JAXA/JAXA_P_SWIFT_BAT_FLUX\",\n    \"hips_service_url_3\": \"https://alaskybis.unistra.fr//JAXA/JAXA_P_SWIFT_BAT_FLUX\"\n}, {\n    \"ID\": \"ov-gso/P/VTSS/Ha\",\n    \"obs_title\": \"Virginia Tech Spectral-Line Survey (VTSS) - Halpha image\",\n    \"client_sort_key\": \"06-xx\",\n    \"client_application\":[ \"AladinLite\", \"AladinDesktop\"],\n    \"hips_order\": \"3\",\n    \"hips_frame\": [\"galactic\", \"galactic\"],\n    \"hips_tile_format\": \"png jpeg fits\",\n    \"hips_service_url\": \"http://cade.irap.omp.eu/documents/Ancillary/4Aladin/VTSS\",\n    \"hips_service_url_1\": \"http://alasky.unistra.fr/IRAP/VTSS\",\n    \"hips_service_url_2\": \"http://alaskybis.unistra.fr/IRAP/VTSS\",\n    \"hips_service_url_3\": \"https://alaskybis.unistra.fr/IRAP/VTSS\"\n}, {\n    \"ID\": \"xcatdb/P/XMM/EPIC\",\n    \"obs_title\": \"XMM-Newton stacked EPIC images\",\n    \"hips_frame\": \"equatorial\",\n    \"hips_order\": \"7\",\n    \"hips_service_url\": \"http://saada.u-strasbg.fr/xmmallsky\",\n    \"hips_tile_format\": \"png fits\",\n    \"hips_service_url_1\": \"http://alasky.unistra.fr/SSC/xmmallsky\",\n    \"hips_service_url_2\": \"http://alaskybis.unistra.fr/SSC/xmmallsky\",\n    \"hips_service_url_3\": \"https://alaskybis.unistra.fr/SSC/xmmallsky\"\n}, {\n    \"ID\": \"xcatdb/P/XMM/PN/color\",\n    \"obs_title\": \"False color X-ray images (Red=0.5-1 Green=1-2 Blue=2-4.5)Kev\",\n    \"hips_order\": \"7\",\n    \"hips_frame\": \"equatorial\",\n    \"hips_tile_format\": \"png jpeg\",\n    \"hips_service_url\": \"http://saada.unistra.fr/PNColor\",\n    \"hips_service_url_1\": \"http://alasky.u-strasbg.fr/SSC/xcatdb_P_XMM_PN_color\",\n    \"hips_service_url_2\": \"http://alaskybis.u-strasbg.fr/SSC/xcatdb_P_XMM_PN_color\",\n    \"hips_service_url_3\": \"https://alaskybis.u-strasbg.fr/SSC/xcatdb_P_XMM_PN_color\"\n}\n*/\n];\n\n    var listHipsProperties = []; // this variable stores our current knowledge\n\n    HiPSDefinition.LOCAL_STORAGE_KEY = 'aladin:hips-list';\n    \n    var RETRIEVAL_TIMESTAMP_KEY = '_timestamp_retrieved';\n    var LAST_URL_KEY = '_last_used_url'; // URL previousy used to retrieve data from this HiPS\n    // retrieve definitions previousy stored in local storage\n    // @return an array with the HiPS definitions, empty array if nothing found or if an error occured\n    HiPSDefinition.getLocalStorageDefinitions = function() {\n        try {\n            var defs = window.localStorage.getItem(HiPSDefinition.LOCAL_STORAGE_KEY);\n            return defs === null ? [] : window.JSON.parse(defs);\n        }\n        catch(e) {\n            // silently fail and return empty array\n            return [];\n        }\n    };\n\n    // store in local storage a list of HiPSDefinition objects\n    // @return true if storage was successful\n    HiPSDefinition.storeInLocalStorage = function(properties) {\n        try {\n            window.localStorage.setItem(HiPSDefinition.LOCAL_STORAGE_KEY, window.JSON.stringify(properties));\n        }\n        catch(e) {\n            // silently fail and return false\n            return false;\n        }\n\n        return true;\n    };\n\n    var MOCSERVER_MIRRORS_HTTP = ['http://alasky.u-strasbg.fr/MocServer/query', 'http://alaskybis.u-strasbg.fr/MocServer/query']; // list of base URL for MocServer mirrors, available in HTTP\n    var MOCSERVER_MIRRORS_HTTPS = ['https://alasky.u-strasbg.fr/MocServer/query', 'https://alaskybis.unistra.fr/MocServer/query']; // list of base URL for MocServer mirrors, available in HTTPS\n\n    // get HiPS definitions, by querying the MocServer\n    // return data as dict-like objects\n    HiPSDefinition.getRemoteDefinitions = function(params, successCallbackFn, failureCallbackFn) {\n        var params = params || {client_application: 'AladinLite'}; // by default, retrieve only HiPS tagged \"Aladin Lite\"\n\n        params['fmt'] = 'json';\n        params['fields'] = 'ID,obs_title,client_sort_key,client_application,hips_service_url*,hips_order,hips_tile_format,hips_frame';\n\n        var urls = Utils.isHttpsContext() ? MOCSERVER_MIRRORS_HTTPS : MOCSERVER_MIRRORS_HTTP;\n\n        var successCallback = function(data) {\n            (typeof successCallbackFn === 'function') && successCallbackFn(data);\n        };\n        var failureCallback = function() {\n            console.error('Could not load HiPS definitions from urls ' + urls);\n            (typeof failureCallbackFn === 'function') && failureCallbackFn();\n        };\n\n        Utils.loadFromMirrors(urls, {data: params, onSuccess: successCallback, onFailure: failureCallback, timeout: 5});\n    };\n\n    // complement the baseList with the items in newList\n    var merge = function(baseList, newList) {\n        var updatedList = [];\n        var newListById = {};\n        for (var k=0; k<newList.length; k++) {\n            var item = newList[k];\n            newListById[item.ID] = item;\n        }\n\n        for (var k=0; k<baseList.length; k++) {\n            var item = baseList[k];\n            var id = item.ID;\n            if (newListById.hasOwnProperty(id)) {\n                var itemToAdd = newListById[id];\n                // we keep the last used URL property\n                if (item.hasOwnProperty(LAST_URL_KEY) && ! itemToAdd.hasOwnProperty(LAST_URL_KEY)) {\n                    itemToAdd[LAST_URL_KEY] = item[LAST_URL_KEY];\n                }\n                updatedList.push(itemToAdd);\n            }\n            else {\n                updatedList.push(item);\n            }\n        }\n\n        return updatedList;\n    };\n\n    HiPSDefinition.CACHE_RETENTION_TIME_SECONDS = 7 * 86400; // definitions can be kept 7 days\n    HiPSDefinition.init = function() {\n        // first, merge local definitions at class level with definitions in local storage\n        listHipsProperties = AL_CACHE_CLASS_LEVEL;\n\n        // second, remove old definitions (client != AladinLite and timestamp older than CACHE_RETENTION_TIME_SECONDS) and merge\n        var localDefs = HiPSDefinition.getLocalStorageDefinitions();\n        // 2.1 remove old defs\n        var now = new Date().getTime();\n        var indicesToRemove = [];\n        for (var k=0; k<localDefs.length; k++) {\n            var def = localDefs[k];\n            if (def.hasOwnProperty(RETRIEVAL_TIMESTAMP_KEY) && (now - def[RETRIEVAL_TIMESTAMP_KEY]) > 1000 * HiPSDefinition.CACHE_RETENTION_TIME_SECONDS) {\n                indicesToRemove.push(k);\n            }\n        }\n        // we have to browse the array in reverse order in order not to mess up indices\n        for (var k = indicesToRemove.length - 1; k >= 0; k--) {\n            localDefs.splice(indicesToRemove[k],1);\n        }\n        // 2.2 merge\n        listHipsProperties = merge(listHipsProperties, localDefs);\n\n        // third, retrieve remote definitions, merge and save\n        HiPSDefinition.getRemoteDefinitions({dataproduct_type: 'image', client_application: 'AladinLite'}, function(remoteDefs) {\n            // adding timestamp of retrieval\n            var now = new Date().getTime();\n            for (var k=0; k<remoteDefs.length; k++) {\n                remoteDefs[k][RETRIEVAL_TIMESTAMP_KEY] = now;\n            }\n            listHipsProperties = merge(listHipsProperties, remoteDefs);\n            HiPSDefinition.storeInLocalStorage(listHipsProperties);\n        });\n\n    };\n\n    // return list of HiPSDefinition objects, filtering out definitions whose client_application is not AladinLite\n    HiPSDefinition.getALDefaultHiPSDefinitions = function() {\n        // filter out definitions with client_application != 'AladinLite'\n        var ret = [];\n        for (var k=0; k<listHipsProperties.length; k++) {\n            var properties = listHipsProperties[k];\n            if ( ! properties.hasOwnProperty('client_application') || properties['client_application'].indexOf('AladinLite')<0) {\n                continue;\n            }\n\n            ret.push(new HiPSDefinition(properties));\n        }\n\n        return ret;\n    };\n\n    // return list of known HiPSDefinition objects\n    HiPSDefinition.getDefinitions = function() {\n        var ret = [];\n        for (var k=0; k<listHipsProperties.length; k++) {\n            var properties = listHipsProperties[k];\n            ret.push(new HiPSDefinition(properties));\n        }\n\n        return ret;\n    };\n\n    // parse a HiPS properties and return a dict-like object with corresponding key-values\n    // return null if parsing failed\n    HiPSDefinition.parseHiPSProperties = function(propertiesStr) {\n        if (propertiesStr==null) {\n            return null;\n        }\n\n        var propertiesDict = {};\n        // remove CR characters\n        propertiesStr = propertiesStr.replace(/[\\r]/g, '');\n        // split on LF\n        var lines = propertiesStr.split('\\n');\n        for (var k=0; k<lines.length; k++)  {\n            var l = $.trim(lines[k]);\n            // ignore comments lines\n            if (l.slice(0, 1)==='#') {\n                continue;\n            }\n            var idx = l.indexOf('=');\n            if (idx<0) {\n                continue;\n            }\n            var key = $.trim(l.slice(0, idx));\n            var value = $.trim(l.slice(idx+1));\n\n            propertiesDict[key] = value;\n        }\n\n        return propertiesDict;\n    };\n\n\n    // find a HiPSDefinition by id.\n    // look first locally, and remotely only if local search was unsuccessful\n    //\n    // call callback function with a list of HiPSDefinition candidates, empty array if nothing found\n\n    HiPSDefinition.findByID = function(id, callback) {\n        // look first locally\n        var candidates = findByIDLocal(id);\n        if (candidates.length>0) {\n            (typeof callback === 'function') && callback(candidates);\n            return;\n        }\n\n        // then remotely\n        findByIDRemote(id, callback);\n    };\n\n    // find a HiPSDefinition by id.\n    // search is done on the local knowledge of HiPSDefinitions\n    HiPSDefinition.findByIDLocal = function(id2search, callback) {\n        var candidates = [];\n        for (var k=0; k<listHipsProperties.length; k++) {\n            var properties = listHipsProperties[k];\n            var id = properties['ID'];\n            if (id.match(id2search) != null ) {\n                candidates.push(new HiPSDefinition(properties));\n            }\n        }\n\n        return candidates;\n    };\n\n    // find remotely a HiPSDefinition by ID\n    HiPSDefinition.findByIDRemote = function(id, callback) {\n        HiPSDefinition.findHiPSRemote({ID: '*' + id + '*'}, callback);\n    };\n\n    // search a HiPS according to some criteria\n    HiPSDefinition.findHiPSRemote = function(searchOptions, callback) {\n        searchOptions = searchOptions || {};\n        if (! searchOptions.hasOwnProperty('dataproduct_type')) {\n            searchOptions['dataproduct_type'] = 'image';\n        }\n        HiPSDefinition.getRemoteDefinitions(searchOptions, function(candidates) {\n            var defs = [];\n            for (var k=0; k<candidates.length; k++) {\n                defs.push(new HiPSDefinition(candidates[k]));\n            }\n            (typeof callback === 'function') && callback(defs);\n        });\n    };\n\n\n    // Create a HiPSDefinition object from a URL\n    //\n    // If the URL ends with 'properties', it is assumed to be the URL of the properties file\n    // else, it is assumed to be the base URL of the HiPS\n    //\n    // return a HiPSDefinition if successful, null if it failed\n    HiPSDefinition.fromURL = function(url, callback) {\n        var hipsUrl, propertiesUrl;\n        if (url.slice(-10) === 'properties') {\n            propertiesUrl = url;\n            hipsUrl = propertiesUrl.slice(0, -11);\n        }\n        else {\n            if (url.slice(-1) === '/') {\n                url = url.slice(0, -1);\n            }\n            hipsUrl = url;\n            propertiesUrl = hipsUrl + '/properties';\n        }\n\n        var callbackWhenPropertiesLoaded = function(properties) {\n            // Sometimes, hips_service_url is missing. That can happen for instance Hipsgen does not set the hips_service_url keyword\n            // --> in that case, we add as an attribyte the URL that was given as input parameter\n            var hipsPropertiesDict = HiPSDefinition.parseHiPSProperties(properties);\n            if (! hipsPropertiesDict.hasOwnProperty('hips_service_url')) {\n                hipsPropertiesDict['hips_service_url'] = hipsUrl;\n            }\n            (typeof callback === 'function') && callback(new HiPSDefinition(hipsPropertiesDict));\n        };\n\n        // try first without proxy\n        var ajax = Utils.getAjaxObject(propertiesUrl, 'GET', 'text', false);\n        ajax\n            .done(function(data) {\n                callbackWhenPropertiesLoaded(data);\n            })\n            .fail(function() {\n                // if not working, try with the proxy\n                var ajax = Utils.getAjaxObject(propertiesUrl, 'GET', 'text', true);\n                ajax\n                    .done(function(data) {\n                        callbackWhenPropertiesLoaded(data);\n                    })\n                    .fail(function() {\n                        (typeof callback === 'function') && callback(null);\n                    })\n            });\n    };\n\n    // HiPSDefinition generation from a properties dict-like object\n    HiPSDefinition.fromProperties = function(properties) {\n        return new HiPSDefinition(properties);\n    };\n\n\n\n\n    HiPSDefinition.init();\n\n    return HiPSDefinition;\n\n})();\n\n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File HpxImageSurvey\n * \n * Authors: Thomas Boch & Matthieu Baumann [CDS]\n * \n *****************************************************************************/\nimport { Utils } from \"./Utils.js\";\nimport { HiPSDefinition} from \"./HiPSDefinition.js\";\n\nexport let HpxImageSurvey = (function() {\n    /** Constructor\n     * cooFrame and maxOrder can be set to null\n     * They will be determined by reading the properties file\n     *  \n     */\n    let HpxImageSurvey = function(rootURLOrId) {\n        if (!rootURLOrId) {\n            throw 'An hosting survey URL or an ID (i.e. DSS2/red) must be given';\n        }\n\n        let isUrl = false;\n        console.log(\"root url\", rootURLOrId)\n        if (rootURLOrId.includes(\"http\")) {\n            isUrl = true;\n        }\n\n        const request = async (url) => {\n            const response = await fetch(url);\n            const json = await response.json();\n\n            return json;\n        };\n\n        // If an HiPS id has been given\n        let url = null;\n        if (!isUrl) {\n            // Use the MOCServer to retrieve the\n            // properties\n            const id = rootURLOrId;\n            const MOCServerUrl = 'https://alasky.unistra.fr/MocServer/query?ID=*' + encodeURIComponent(id) + '*&get=record&fmt=json';\n\n            return (async () => {\n                let metadata = await request(MOCServerUrl);\n\n                // We get the property here\n\n                // 1. Ensure there is exactly one survey matching\n                if (!metadata) {\n                    throw 'no surveys matching';\n                } else {\n                    if (metadata.length > 1) {\n                        let ids = [];\n                        metadata.forEach((prop) => {\n                            ids.push(prop.ID)\n                        });\n                        throw ids + ' surveys are matching. Please use one from this list.';\n                    } else if (metadata.length === 0) {\n                        throw 'no surveys matching';\n                    } else {\n                        // Exactly one matching\n                        metadata = metadata[0];\n                    }\n                }\n                // Let is build the survey object\n                const survey = HpxImageSurvey.parseSurveyProperties(metadata);\n                return survey\n            })();\n        } else {\n            // Fetch the properties of the survey\n            let rootURL = rootURLOrId;\n            // Use the url for retrieving the HiPS properties\n            // remove final slash\n            if (rootURL.slice(-1) === '/') {\n                rootURL = rootURL.substr(0, rootURL.length-1);\n            }\n\n            // make URL absolute\n            rootURL = Utils.getAbsoluteURL(rootURL);\n\n            // fast fix for HTTPS support --> will work for all HiPS served by CDS\n            if (Utils.isHttpsContext() && ( /u-strasbg.fr/i.test(rootURL) || /unistra.fr/i.test(rootURL)  ) ) {\n                rootURL = rootURL.replace('http://', 'https://');\n            }\n\n            console.log(\"ROOT URL\", rootURL);\n            url = rootURL + '/properties';\n\n\n            return (async () => {\n                console.log(\"properties url\", url);\n                let metadata = await fetch(url)\n                    .then((response) => response.text());\n                // We get the property here\n                metadata = HiPSDefinition.parseHiPSProperties(metadata);\n                console.log(\"metadata\", metadata);\n\n                // 1. Ensure there is exactly one survey matching\n                if (!metadata) {\n                    throw 'no surveys matching';\n                }\n                // Let is build the survey object\n                const survey = HpxImageSurvey.parseSurveyProperties(metadata);\n                console.log(\"survey \", survey);\n\n                return survey\n            })();\n        }\n    };\n\n    HpxImageSurvey.parseSurveyProperties = function(metadata) {\n        const order = (+metadata.hips_order);\n        const hipsTileFormat = metadata.hips_tile_format.split(' ');\n\n        let tileFormat;\n        let color;\n        if (hipsTileFormat.indexOf('fits') >= 0) {\n            tileFormat = {\n                FITSImage: {\n                    bitpix: parseInt(metadata.hips_pixel_bitpix)\n                }\n            };\n            color = {\n                Grayscale2Color: {\n                    color: [1.0, 1.0, 1.0],\n                    k: 1.0,\n                    transfer: \"asinh\"\n                }\n            };\n        } else {\n            color = \"Color\";\n\n            if (hipsTileFormat.indexOf('png') >= 0) {\n                tileFormat = {\n                    Image: {\n                        format: \"png\"\n                    }\n                };\n            } else {\n                tileFormat = {\n                    Image: {\n                        format: \"jpeg\"\n                    }\n                };\n            }\n        }\n\n\n        let cuts = [undefined, undefined];\n        if (metadata.hips_pixel_cut) {\n            cuts = metadata.hips_pixel_cut.split(\" \");\n        }\n        let tileSize = 512;\n        // Verify the validity of the tile width\n        if (metadata.hips_tile_width) {\n            let hipsTileWidth = parseInt(metadata.hips_tile_width);\n            let isPowerOfTwo = hipsTileWidth && !(hipsTileWidth & (hipsTileWidth - 1));\n\n            if (isPowerOfTwo === true) {\n                tileSize = hipsTileWidth;\n            }\n        }\n        let url = metadata.hips_service_url;\n        if (!url) {\n            throw 'no valid service URL for retrieving the tiles'\n        }\n\n        if (url.startsWith('http://alasky')) {\n            // From alasky one can directly use the https access\n            url = url.replace('http', 'https');\n        } else {\n            // Pass by a proxy for extern http urls\n            url = 'https://alasky.u-strasbg.fr/cgi/JSONProxy?url=' + url;\n        }\n        return {\n            properties: {\n                url: url,\n                maxOrder:  parseInt(metadata.hips_order),\n                frame: {\n                    label: \"J2000\",\n                    system: \"J2000\"\n                },\n                tileSize: tileSize,\n                format: tileFormat,\n                minCutout: parseFloat(cuts[0]),\n                maxCutout: parseFloat(cuts[1]),\n            },\n            color: color,\n        };\n    }\n\n    HpxImageSurvey.create = async function(idOrRootUrl, options) {\n        if (!idOrRootUrl) {\n            return;\n        }\n    \n        let survey = await new HpxImageSurvey(idOrRootUrl);\n        return survey;\n    };\n\n    return HpxImageSurvey;\n})();\n\n","// Copyright 2018 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File SimbadPointer.js\n *\n * The SIMBAD pointer will query Simbad for a given position and radius and\n * return information on the object with \n *  \n * Author: Thomas Boch [CDS]\n * \n *****************************************************************************/\n\nSimbadPointer = (function() {\n    \n    \n    SimbadPointer = {};\n\n    SimbadPointer.MIRRORS = ['https://alasky.u-strasbg.fr/cgi/simbad-flat/simbad-quick.py', 'https://alaskybis.u-strasbg.fr/cgi/simbad-flat/simbad-quick.py']; // list of base URL for Simbad pointer service\n\n    \n    SimbadPointer.query = function(ra, dec, radiusDegrees, aladinInstance) {\n        var coo = new Coo(ra, dec, 7);\n        var params = {Ident: coo.format('s/'), SR: radiusDegrees}\n        var successCallback = function(result) {\n            aladinInstance.view.setCursor('pointer');\n\n            var regexp = /(.*?)\\/(.*?)\\((.*?),(.*?)\\)/g;\n            var match = regexp.exec(result);\n            if (match) {\n                var objCoo = new Coo();\n                objCoo.parse(match[1]);\n                var objName = match[2];\n                var title = '<div class=\"aladin-sp-title\"><a target=\"_blank\" href=\"http://simbad.u-strasbg.fr/simbad/sim-id?Ident=' + encodeURIComponent(objName) + '\">' + objName + '</a></div>';\n                var content = '<div class=\"aladin-sp-content\">';\n                content += '<em>Type: </em>' + match[4] + '<br>';\n                var magnitude = match[3];\n                if (Utils.isNumber(magnitude)) {\n                    content += '<em>Mag: </em>' + magnitude + '<br>';\n                }\n                content += '<br><a target=\"_blank\" href=\"http://cdsportal.u-strasbg.fr/?target=' + encodeURIComponent(objName) + '\">Query in CDS portal</a>';\n                content += '</div>';\n                aladinInstance.showPopup(objCoo.lon, objCoo.lat, title, content);\n            }\n            else {\n                aladinInstance.hidePopup();\n            }\n        };\n        var failureCallback = function() {\n            aladinInstance.view.setCursor('pointer');\n            aladinInstance.hidePopup();\n        };\n        Utils.loadFromMirrors(SimbadPointer.MIRRORS, {data: params, onSuccess: successCallback, onFailure: failureCallback, timeout: 5});\n\n    };\n\n    return SimbadPointer;\n})();\n    \n","// Copyright 2013 - UDS/CNRS\n// The Aladin Lite program is distributed under the terms\n// of the GNU General Public License version 3.\n//\n// This file is part of Aladin Lite.\n//\n//    Aladin Lite is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, version 3 of the License.\n//\n//    Aladin Lite is distributed in the hope that it will be useful,\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//    GNU General Public License for more details.\n//\n//    The GNU General Public License is available in COPYING file\n//    along with Aladin Lite.\n//\n\n\n\n\n/******************************************************************************\n * Aladin Lite project\n * \n * File Utils\n * \n * Author: Thomas Boch[CDS]\n * \n *****************************************************************************/\n\nimport { Aladin } from \"./Aladin.js\";\n\nexport let Utils = {};\n\nUtils.cssScale = undefined;\n// adding relMouseCoords to HTMLCanvasElement prototype (see http://stackoverflow.com/questions/55677/how-do-i-get-the-coordinates-of-a-mouse-click-on-a-canvas-element ) \nfunction relMouseCoords(event) {\n    var totalOffsetX = 0;\n    var totalOffsetY = 0;\n    var canvasX = 0;\n    var canvasY = 0;\n    var currentElement = this;\n   \n    if (event.offsetX) {\n        return {x: event.offsetX, y:event.offsetY};\n    } \n    else {\n        if (!Utils.cssScale) {\n            var st = window.getComputedStyle(document.body, null);\n            var tr = st.getPropertyValue(\"-webkit-transform\") ||\n                    st.getPropertyValue(\"-moz-transform\") ||\n                    st.getPropertyValue(\"-ms-transform\") ||\n                    st.getPropertyValue(\"-o-transform\") ||\n                    st.getPropertyValue(\"transform\");\n            var matrixRegex = /matrix\\((-?\\d*\\.?\\d+),\\s*0,\\s*0,\\s*(-?\\d*\\.?\\d+),\\s*0,\\s*0\\)/;\n            var matches = tr.match(matrixRegex);\n            if (matches) {\n                Utils.cssScale = parseFloat(matches[1]);\n            }\n            else {\n                Utils.cssScale = 1;\n            }\n        }\n        var e = event;\n        var canvas = e.target;\n        // http://www.jacklmoore.com/notes/mouse-position/\n        var target = e.target || e.srcElement;\n        var style = target.currentStyle || window.getComputedStyle(target, null);\n        var borderLeftWidth = parseInt(style['borderLeftWidth'], 10);\n        var borderTopWidth = parseInt(style['borderTopWidth'], 10);\n        var rect = target.getBoundingClientRect();\n\n        var clientX = e.clientX;\n        var clientY = e.clientY;\n        if (e.clientX) {\n            clientX = e.clientX;\n            clientY = e.clientY;\n        }\n        else {\n            clientX = e.originalEvent.changedTouches[0].clientX;\n            clientY = e.originalEvent.changedTouches[0].clientY;\n        }\n\n        var offsetX = clientX - borderLeftWidth - rect.left;\n        var offsetY = clientY - borderTopWidth - rect.top\n\n        return {x: parseInt(offsetX/Utils.cssScale), y: parseInt(offsetY/Utils.cssScale)};\n    }\n}\nHTMLCanvasElement.prototype.relMouseCoords = relMouseCoords;\n\n\n\n//Function.prototype.bind polyfill from \n//https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (obj) {\n        // closest thing possible to the ECMAScript 5 internal IsCallable function\n        if (typeof this !== 'function') {\n            throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n        }\n\n        var slice = [].slice,\n        args = slice.call(arguments, 1),\n        self = this,\n        nop = function () { },\n        bound = function () {\n            return self.apply(this instanceof nop ? this : (obj || {}),\n                    args.concat(slice.call(arguments)));\n        };\n\n        bound.prototype = this.prototype;\n\n        return bound;\n    };\n}\n\n\n\n\n\n\n\n\n//$ = $ || jQuery;\n\n/* source : http://stackoverflow.com/a/8764051 */\n$.urlParam = function(name, queryString){\n    if (queryString===undefined) {\n        queryString = location.search;\n    }\n\treturn decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(queryString)||[,\"\"])[1].replace(/\\+/g, '%20'))||null;\n};\n\n/* source: http://stackoverflow.com/a/1830844 */\nUtils.isNumber = function(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nUtils.isInt = function(n) {\n    return Utils.isNumber(n) && Math.floor(n)==n;\n};\n\n/* a debounce function, used to prevent multiple calls to the same function if less than delay milliseconds have passed */\nUtils.debounce = function(fn, delay) {\n    var timer = null;\n    return function () {\n      var context = this, args = arguments;\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        fn.apply(context, args);\n      }, delay);\n    };\n};\n\n/* return a throttled function, to rate limit the number of calls (by default, one call every 250 milliseconds) */\nUtils.throttle = function(fn, threshhold, scope) {\n  threshhold || (threshhold = 250);\n  var last,\n      deferTimer;\n  return function () {\n    var context = scope || this;\n\n    var now = +new Date,\n        args = arguments;\n    if (last && now < last + threshhold) {\n      // hold on to it\n      clearTimeout(deferTimer);\n      deferTimer = setTimeout(function () {\n        last = now;\n        fn.apply(context, args);\n      }, threshhold);\n    } else {\n      last = now;\n      fn.apply(context, args);\n    }\n  };\n}\n\n\n/* A LRU cache, inspired by https://gist.github.com/devinus/409353#file-gistfile1-js */\n// TODO : utiliser le LRU cache pour les tuiles images\nUtils.LRUCache = function (maxsize) {\n    this._keys = [];\n    this._items = {};\n    this._expires = {};\n    this._size = 0;\n    this._maxsize = maxsize || 1024;\n};\n   \nUtils.LRUCache.prototype = {\n        set: function (key, value) {\n            var keys = this._keys,\n                items = this._items,\n                expires = this._expires,\n                size = this._size,\n                maxsize = this._maxsize;\n\n            if (size >= maxsize) { // remove oldest element when no more room\n                keys.sort(function (a, b) {\n                    if (expires[a] > expires[b]) return -1;\n                    if (expires[a] < expires[b]) return 1;\n                    return 0;\n                });\n\n                size--;\n                delete expires[keys[size]];\n                delete items[keys[size]];\n            }\n\n            keys[size] = key;\n            items[key] = value;\n            expires[key] = Date.now();\n            size++;\n\n            this._keys = keys;\n            this._items = items;\n            this._expires = expires;\n            this._size = size;\n        },\n\n        get: function (key) {\n            var item = this._items[key];\n            if (item) this._expires[key] = Date.now();\n            return item;\n        },\n        \n        keys: function() {\n            return this._keys;\n        }\n};\n\n////////////////////////////////////////////////////////////////////////////:\n\n/**\n  Make an AJAX call, given a list of potential mirrors\n  First successful call will result in options.onSuccess being called back\n  If all calls fail, onFailure is called back at the end\n\n  This method assumes the URL are CORS-compatible, no proxy will be used\n */\nUtils.loadFromMirrors = function(urls, options) {\n    var data    = options && options.data || null;\n    var method = options && options.method || 'GET';\n    var dataType = options && options.dataType || null;\n    var timeout = options && options.timeout || 20;\n\n    var onSuccess = options && options.onSuccess || null;\n    var onFailure = options && options.onFailure || null;\n\n    if (urls.length === 0) {\n        (typeof onFailure === 'function') && onFailure();\n    }\n    else {\n        var ajaxOptions = {\n            url: urls[0],\n            data: data\n        }\n        if (dataType) {\n            ajaxOptions.dataType = dataType;\n        }\n\n        $.ajax(ajaxOptions)\n        .done(function(data) {\n            (typeof onSuccess === 'function') && onSuccess(data);\n        })\n        .fail(function() {\n             Utils.loadFromMirrors(urls.slice(1), options);\n        });\n    }\n} \n\n// return the jquery ajax object configured with the requested parameters\n// by default, we use the proxy (safer, as we don't know if the remote server supports CORS)\nUtils.getAjaxObject = function(url, method, dataType, useProxy) {\n        if (useProxy!==false) {\n            useProxy = true;\n        }\n\n        if (useProxy===true) {\n            var urlToRequest = Aladin.JSONP_PROXY + '?url=' + encodeURIComponent(url);\n        }\n        else {\n            urlToRequest = url;\n        }\n        method = method || 'GET';\n        dataType = dataType || null;\n\n        return $.ajax({\n            url: urlToRequest,\n            method: method,\n            dataType: dataType\n        }); \n};\n\n// return true if script is executed in a HTTPS context\n// return false otherwise\nUtils.isHttpsContext = function() {\n    return ( window.location.protocol === 'https:' );\n};\n\n// generate an absolute URL from a relative URL\n// example: getAbsoluteURL('foo/bar/toto') return http://cds.unistra.fr/AL/foo/bar/toto if executed from page http://cds.unistra.fr/AL/\nUtils.getAbsoluteURL = function(url) {\n    var a = document.createElement('a');\n    a.href = url;\n\n    return a.href;\n};\n\n// generate a valid v4 UUID\nUtils.uuidv4 = function() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// expose the module cache\n__webpack_require__.c = __webpack_module_cache__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".aladin.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tfor(moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) var result = runtime(__webpack_require__);\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkhips_webgl_renderer\"] = self[\"webpackChunkhips_webgl_renderer\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// module cache are used so entry inlining is disabled\n// startup\n// Load entry module and return exports\nvar __webpack_exports__ = __webpack_require__(6630);\n"],"sourceRoot":""}